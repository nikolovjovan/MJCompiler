package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.Level;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.exceptions.MJParserException;
import rs.ac.bg.etf.pp1.loggers.MJParserLogger;
import rs.ac.bg.etf.pp1.loggers.MJParserLogger.MessageType;

parser code {:
  private MJParserLogger logger = new MJParserLogger();
  private int errorLine = -1, errorColumn = -1, errorCount = 0;

  public int getErrorCount() { return errorCount; }

  @Override
  public void report_error(String message, Object info) {
    log_error(-1, info instanceof Symbol ? ((Symbol) info).left : -1, MessageType.OTHER, message);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    log_fatal(-1, info instanceof Symbol ? ((Symbol) info).left : -1, MessageType.OTHER, message);
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    errorLine = cur_token.left;
    errorColumn = cur_token.right;
    log_error(errorLine, errorColumn, MessageType.SYNTAX_ERROR, null);
  }

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    log_fatal(cur_token.left, cur_token.right, MessageType.IRR_SYNTAX_ERROR, null);
  }

  void log_warn_error_recovery(MessageType type) {
    logger.warn(errorLine, errorColumn, type);
  }

  private void log_error(int line, int column, MessageType type, String message) {
    errorCount++;
    if (message != null) logger.error(line, column, type, message);
    else logger.error(line, column, type);
  }

  private void log_fatal(int line, int column, MessageType type, String message) throws Exception {
    errorCount++;
    if (message != null) logger.fatal(line, column, type, message);
    else logger.fatal(line, column, type);
    done_parsing();
    throw new MJParserException("Cannot recover from previous error(s)!");
  }
:}

/* Keywords */
terminal PROGRAM, BREAK, CLASS, ABSTRACT, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, FOR, EXTENDS, CONTINUE;
terminal FOREACH, PUBLIC, PROTECTED, PRIVATE;

/* Operators */
terminal ASSIGN, PLUS, MINUS, ASTERISK, SLASH, PERCENT, PLUSPLUS, MINUSMINUS;
terminal EQL, NEQ, GRT, GEQ, LSS, LEQ, AND, OR;
terminal PLUS_ASSIGN, MINUS_ASSIGN, ASTERISK_ASSIGN, SLASH_ASSIGN, PERCENT_ASSIGN;

/* Punctuation symbols */
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, COLON, SEMICOLON, COMMA, DOT;

/* Types and identifier */
terminal Integer INT;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

/* Program non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol ProgramHeader;
nonterminal Program, OptProgramDeclList, ProgramDecl, OptMethodDeclList;

/* Common non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol Type;
nonterminal OptSign, OptArrayBrackets, ArrayIndexer, OptArrayIndexer;

/* Const non-terminals */
nonterminal ConstDecl, ConstAssignmentList, ConstAssignment, Const;

/* Global var non-terminals */
nonterminal VarDecl, VarList, Var;

/* Class var non-terminals */
nonterminal OptClassVarDeclList, ClassVarDecl, ClassVarList, ClassVar;

/* Local var non-terminals */
nonterminal OptLocalVarDeclList, LocalVarDecl, LocalVarList, LocalVar;

/* Common class non-terminals */
nonterminal OptClassBaseType, AccessModifier;

/* Class non-terminals */
nonterminal ClassDecl;
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol ClassHeader;
nonterminal OptClassMethodDeclList, ClassMethodDeclList, ClassMethodDecl;

/* Abstract class non-terminals */
nonterminal AbstractClassDecl;
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol AbstractClassHeader;
nonterminal OptAbstractClassMethodDeclList, AbstractClassMethodDeclList, AbstractClassMethodDecl;

/* Common method non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol RetType;
nonterminal OptFormalParamList, FormalParamList, FormalParam;

/* Method non-terminals */
nonterminal MethodDecl;
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol MethodHeader;
nonterminal MethodStatementListStart;

/* Abstract method non-terminals */
nonterminal AbstractMethodDecl;
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol AbstractMethodHeader;

/* Designator non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol Designator;
nonterminal DesignatorStatement, AssignHeader, AssignFooter;

/* Statement non-terminals */
nonterminal OptStatementList, Statement;
nonterminal IfStatementHeader, IfStatementHeaderStart, OptElseStatement;
nonterminal ForStatementHeader, ForDesignatorStatement, ForCondition;
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol ForEachStatementHeader;
nonterminal java.lang.Integer ElseStatementStart, ForStatementHeaderStart, ForEachStatementHeaderStart;
nonterminal OptRetValue, OptPrintWidth;

/* Method call non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol MethodCall, MethodCallHeader;
nonterminal OptActualParamList, ActualParamList, ActualParam;

/* Expression non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol Expr, LeftExpr, Term, Factor;
nonterminal ConstFactor;

/* Condition non-terminals */
nonterminal rs.ac.bg.etf.pp1.symboltable.concepts.MJSymbol Condition, CondTerm, CondFact;

/* Operator non-terminals */
nonterminal Assignop, Rightop, LeftAddop, RightAddop, LeftMulop, RightMulop, Relop;

/* Precedence for ELSE terminal for if-else statement */
precedence left ELSE;

/* Program non-terminals */

Program ::= (Program) ProgramHeader:header OptProgramDeclList:declarations LBRACE OptMethodDeclList:methods RBRACE;

ProgramHeader ::= (ProgramHeader) PROGRAM IDENT:name;

OptProgramDeclList ::= (MultipleProgramDeclarations) OptProgramDeclList:list ProgramDecl:declaration
                     | (NoProgramDeclarations) /* epsilon */
                     ;

ProgramDecl ::= (ConstProgramDeclaration) ConstDecl:declaration
              | (VarProgramDeclaration) VarDecl:declaration
              | (ClassProgramDeclaration) ClassDecl:declaration
              | (AbstractClassProgramDeclaration) AbstractClassDecl:declaration
              ;

OptMethodDeclList ::= (MultipleMethodDeclarations) OptMethodDeclList:list MethodDecl:declaration
                    | (NoMethodDeclarations) /* epsilon */
                    ;

/* Common non-terminals */

Type ::= (Type) IDENT:name;

OptSign ::= (MinusSign) MINUS
          | (PlusSign) PLUS
          | (NoSign) /* epsilon */
          ;

OptArrayBrackets ::= (ArrayBrackets) LBRACK RBRACK
                   | (NoArrayBrackets) /* epsilon */
                   ;

ArrayIndexer ::= (ArrayIndexer) LBRACK Expr:expr RBRACK;

OptArrayIndexer ::= (SingleArrayIndexer) ArrayIndexer:index
                  | (NoArrayIndexer) /* epsilon */
                  ;

/* Const non-terminals */

ConstDecl ::= (ConstDeclaration) CONST Type:type ConstAssignmentList:list SEMICOLON;

ConstAssignmentList ::= (MultipleConstAssignments) ConstAssignmentList:list COMMA ConstAssignment:assignment
                      | (SingleConstAssignment) ConstAssignment:assignment
                      ;

ConstAssignment ::= (ConstAssignment) IDENT:name ASSIGN Const:value;

Const ::= (IntConst) OptSign:sign INT:value
        | (CharConst) CHAR:value
        | (BoolConst) BOOL:value
        ;

/* Global var non-terminals */

VarDecl ::= (VarDeclaration) Type:type VarList:list SEMICOLON;

VarList ::= (MultipleVariables) VarList:list COMMA Var:declaration
          | (SingleVariable) Var:declaration
          ;

Var ::= (Variable) IDENT:name OptArrayBrackets:brackets;

/* Class var non-terminals */

OptClassVarDeclList ::= (MultipleClassVarDeclarations) OptClassVarDeclList:list ClassVarDecl:declaration
                      | (NoClassVarDeclarations) /* epsilon */
                      ;

ClassVarDecl ::= (ClassVarDeclaration) AccessModifier:access Type:type ClassVarList:list SEMICOLON;

ClassVarList ::= (MultipleClassVariables) ClassVarList:list COMMA ClassVar:declaration
               | (SingleClassVariable) ClassVar:declaration
               ;

ClassVar ::= (ClassVariable) IDENT:name OptArrayBrackets:brackets;

/* Local var non-terminals */

OptLocalVarDeclList ::= (MultipleLocalVarDeclarations) OptLocalVarDeclList:list LocalVarDecl:declaration
                      | (NoLocalVarDeclarations) /* epsilon */
                      ;

LocalVarDecl ::= (LocalVarDeclaration) Type:type LocalVarList:list SEMICOLON
               | (ErrorLocalVarDeclaration) error SEMICOLON {: parser.log_warn_error_recovery(MessageType.INV_LOCAL_VAR_DECL); :}
               ;

LocalVarList ::= (MultipleLocalVariables) LocalVarList:list COMMA LocalVar:declaration
               | (SingleLocalVariable) LocalVar:declaration
               ;

LocalVar ::= (LocalVariable) IDENT:name OptArrayBrackets:brackets
           | (ErrorLocalVariable) error {: parser.log_warn_error_recovery(MessageType.INV_CLS_BASE_TYPE); :}
           ;

/* Common class non-terminals */

OptClassBaseType ::= (ClassBaseType) EXTENDS Type:type
                   | (NoClassBaseType) /* epsilon */
                   | (ErrorClassBaseTypeAfterExtends) EXTENDS error {: parser.log_warn_error_recovery(MessageType.INV_CLS_BASE_TYPE); :}
                   | (ErrorClassBaseTypeBeforeExtends) error {: parser.log_warn_error_recovery(MessageType.INV_CLS_BASE_TYPE); :}
                   ;

AccessModifier ::= (PublicAccessModifier) PUBLIC
                 | (ProtectedAccessModifier) PROTECTED
                 | (PrivateAccessModifier) PRIVATE
                 ;

/* Class non-terminals */

ClassDecl ::= (ClassDeclaration) ClassHeader:header LBRACE OptClassVarDeclList:fields OptClassMethodDeclList:methods RBRACE;

ClassHeader ::= (ClassHeader) CLASS IDENT:name OptClassBaseType:baseType;

OptClassMethodDeclList ::= (ClassMethodDeclarations) LBRACE ClassMethodDeclList:list RBRACE
                         | (NoClassMethodDeclarations) /* epsilon */
                         ;

ClassMethodDeclList ::= (MultipleClassMethodDeclarations) ClassMethodDeclList:list ClassMethodDecl:declaration
                      | (SingleClassMethodDeclaration) ClassMethodDecl:declaration
                      ;

ClassMethodDecl ::= (ClassMethodDeclaration) AccessModifier:access MethodDecl:declaration;

/* Abstract class non-terminals */

AbstractClassDecl ::= (AbstractClassDeclaration) AbstractClassHeader:header LBRACE OptClassVarDeclList:fields OptAbstractClassMethodDeclList:methods RBRACE;

AbstractClassHeader ::= (AbstractClassHeader) ABSTRACT CLASS IDENT:name OptClassBaseType:baseType;

OptAbstractClassMethodDeclList ::= (AbstractClassMethods) LBRACE AbstractClassMethodDeclList:list RBRACE
                                 | (NoAbstractClassMethods) /* epsilon */
                                 ;

AbstractClassMethodDeclList ::= (MultipleAbstractClassMethods) AbstractClassMethodDeclList:list AbstractClassMethodDecl:declaration
                              | (SingleAbstractClassMethod) AbstractClassMethodDecl:declaration
                              ;

AbstractClassMethodDecl ::= (AbstractClassMethodDeclaration) AccessModifier:access MethodDecl:declaration
                          | (AbstractClassAbstractMethodDeclaration) AccessModifier:access AbstractMethodDecl:declaration
                          | (ErrorAbstractClassMethodDeclaration) error SEMICOLON {: parser.log_warn_error_recovery(MessageType.INV_ABS_CLS_METH_DECL); :}
                          ;

/* Common method non-terminals */

RetType ::= (ReturnType) Type:type
          | (ReturnVoid) VOID
          ;

OptFormalParamList ::= (FormalParameters) FormalParamList:list
                     | (NoFormalParameters) /* epsilon */
                     ;

FormalParamList ::= (MultipleFormalParameters) FormalParamList:list COMMA FormalParam:parameter
                  | (SingleFormalParameter) FormalParam:parameter
                  ;

FormalParam ::= (FormalParameter) Type:type IDENT:name OptArrayBrackets:brackets
              | (ErrorFormalParameter) error {: parser.log_warn_error_recovery(MessageType.INV_FORMAL_PARAM); :}
              ;

/* Method non-terminals */

MethodDecl ::= (MethodDeclaration) MethodHeader:header LPAREN OptFormalParamList:params RPAREN OptLocalVarDeclList:locals MethodStatementListStart OptStatementList:statements RBRACE;

MethodHeader ::= (MethodHeader) RetType:returnType IDENT:name;

MethodStatementListStart ::= (MethodStatementListStart) LBRACE;

/* Abstract method non-terminals */

AbstractMethodDecl ::= (AbstractMethodDeclaration) AbstractMethodHeader:header LPAREN OptFormalParamList:params RPAREN SEMICOLON;

AbstractMethodHeader ::= (AbstractMethodHeader) ABSTRACT RetType:type IDENT:name;

/* Designator non-terminals */

Designator ::= (IdentifierDesignator) IDENT:name
             | (MemberAccessDesignator) Designator:object DOT IDENT:name
             | (ElementAccessDesignator) Designator:array ArrayIndexer:index
             ;

DesignatorStatement ::= (AssignmentDesignatorStatement) AssignHeader:header AssignFooter:footer
                      | (MethodCallDesignatorStatement) MethodCall:methodCall
                      | (IncrementDesignatorStatement) Designator:var PLUSPLUS
                      | (DecrementDesignatorStatement) Designator:var MINUSMINUS
                      ;

AssignHeader ::= (AssignmentHeader) Designator:var;

AssignFooter ::= (AssignmentFooter) Assignop:op Expr:expr
               | (ErrorAssignmentFooter) error {: parser.log_warn_error_recovery(MessageType.INV_ASSIGN_FOOTER); :}
               ;

/* Statement non-terminals */

OptStatementList ::= (MultipleStatements) OptStatementList:list Statement:statement
                   | (NoStatements) /* epsilon */
                   ;

Statement ::= (DesignatorBasedStatement) DesignatorStatement:statement SEMICOLON
            | (IfOptElseStatement) IfStatementHeader:header Statement:ifStatement OptElseStatement:elseStatement
            | (ForStatement) ForStatementHeader:header Statement:statement
            | (ForEachStatement) ForEachStatementHeader:header Statement:statement
            | (BreakStatement) BREAK SEMICOLON
            | (ContinueStatement) CONTINUE SEMICOLON
            | (ReturnStatement) RETURN OptRetValue:returnValue SEMICOLON
            | (ReadStatement) READ LPAREN Designator:result RPAREN SEMICOLON
            | (PrintStatement) PRINT LPAREN Expr:expr OptPrintWidth:width RPAREN SEMICOLON
            | (StatementBlock) LBRACE OptStatementList:list RBRACE
            ;

IfStatementHeader ::= (IfStatementHeader) IfStatementHeaderStart Condition:condition RPAREN;

IfStatementHeaderStart ::= (IfStatementHeaderStart) IF LPAREN;

OptElseStatement ::= (ElseStatement) ElseStatementStart Statement:statement
                   | (NoElseStatment) /* epsilon */
                   ;

ElseStatementStart ::= (ElseStatementStart) ELSE;

ForStatementHeader ::= (ForStatementHeader) ForStatementHeaderStart ForDesignatorStatement:initStatement SEMICOLON ForCondition:condition SEMICOLON ForDesignatorStatement:updateStatement RPAREN;

ForStatementHeaderStart ::= (ForStatementHeaderStart) FOR LPAREN;

ForDesignatorStatement ::= (SingleDesignatorStatement) DesignatorStatement:statement
                         | (NoDesignatorStatement) /* epsilon */
                         ;

ForCondition ::= (SingleCondition) Condition:cond
               | (NoCondition) /* epsilon */
               | (ErrorCondition) error {: parser.log_warn_error_recovery(MessageType.INV_FOR_STMT_COND); :}
               ;

ForEachStatementHeader ::= (ForEachStatementHeader) ForEachStatementHeaderStart IDENT:name COLON Designator:designator RPAREN;

ForEachStatementHeaderStart ::= (ForEachStatementHeaderStart) FOREACH LPAREN;

OptRetValue ::= (ReturnValue) Expr:expr
              | (NoReturnValue) /* epsilon */
              ;

OptPrintWidth ::= (PrintWidth) COMMA INT:width
                | (NoPrintWidth) /* epsilon */
                ;

/* Method call non-terminals */

MethodCall ::= (MethodCall) MethodCallHeader:header LPAREN OptActualParamList:params RPAREN;

MethodCallHeader ::= (MethodCallHeader) Designator:name;

OptActualParamList ::= (ActualParameters) ActualParamList:list
                     | (NoActualParameters) /* epsilon */
                     ;

ActualParamList ::= (MultipleActualParameters) ActualParamList:list COMMA ActualParam:param
                  | (SingleActualParameter) ActualParam:param
                  ;

ActualParam ::= (ActualParameter) Expr:expr;

/* Expression non-terminals */

Expr ::= (AssignmentExpression) LeftExpr:leftExpr Rightop:op Expr:rightExpr
       | (LeftExpression) LeftExpr:expr
       ;

LeftExpr ::= (MultipleTermsExpression) LeftExpr:expr LeftAddop:op Term:term
           | (SingleTermExpression) OptSign:sign Term:term
           ;

Term ::= (MultipleFactorsTerm) Term:term LeftMulop:op Factor:factor
       | (SingleFactorTerm) Factor:factor
       ;

Factor ::= (DesignatorFactor) Designator:designator
         | (MethodCallFactor) MethodCall:methodCall
         | (ConstantFactor) ConstFactor:value
         | (AllocatorFactor) NEW Type:objectType OptArrayIndexer:optArraySize
         | (InnerExpressionFactor) LPAREN Expr:expr RPAREN
         ;

ConstFactor ::= (IntConstantFactor) INT:value
              | (CharConstantFactor) CHAR:value
              | (BoolConstantFactor) BOOL:value
              ;

/* Condition non-terminals */

Condition ::= (MultipleTermsCondition) Condition:cond OR CondTerm:term
            | (SingleTermCondition) CondTerm:term
            ;

CondTerm ::= (MultipleFactsConditionTerm) CondTerm:term AND CondFact:fact
           | (SingleFactConditionTerm) CondFact:fact
           ;

CondFact ::= (ComplexConditionFact) Expr:leftExpr Relop:op Expr:rightExpr
           | (SimpleConditionFact) Expr:expr
           ;

/* Operator non-terminals */

Assignop ::= (AssignOperator) ASSIGN
           | (RightOperator) Rightop:op
           ;

Rightop ::= (RightAddOperator) RightAddop:op
          | (RightMulOperator) RightMulop:op
          ;

LeftAddop ::= (AddOperator) PLUS
            | (SubOperator) MINUS
            ;

RightAddop ::= (AddAssignOperator) PLUS_ASSIGN
             | (SubAssignOperator) MINUS_ASSIGN
             ;

LeftMulop ::= (MulOperator) ASTERISK
            | (DivOperator) SLASH
            | (ModOperator) PERCENT
            ;

RightMulop ::= (MulAssignOperator) ASTERISK_ASSIGN
             | (DivAssignOperator) SLASH_ASSIGN
             | (ModAssignOperator) PERCENT_ASSIGN
             ;

Relop ::= (EqOperator) EQL
        | (NeqOperator) NEQ
        | (GrtOperator) GRT
        | (GeqOperator) GEQ
        | (LssOperator) LSS
        | (LeqOperator) LEQ
        ;