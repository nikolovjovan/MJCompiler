DEBUG - semantic_errors_B.mj:2:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - semantic_errors_B.mj:2:9: LEXER: Found symbol: '#55' with value: 'level_b_semantic_errors'
DEBUG - semantic_errors_B.mj:3:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:3:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:3:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:3:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:3:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:4:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:6:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:6:9: LEXER: Found symbol: '#55' with value: 'f1'
DEBUG - semantic_errors_B.mj:6:11: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:6:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:6:14: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:8:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:10:5: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:10:10: LEXER: Found symbol: '#55' with value: 'f2'
DEBUG - semantic_errors_B.mj:10:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:10:13: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:10:17: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_B.mj:10:18: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:10:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:10:24: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_B.mj:10:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:10:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:11:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_B.mj:11:16: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_B.mj:11:18: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_B.mj:11:20: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_B.mj:11:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:12:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:14:5: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_B.mj:14:10: LEXER: Found symbol: '#55' with value: 'f3'
DEBUG - semantic_errors_B.mj:14:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:14:13: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:14:17: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_B.mj:14:18: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:14:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:14:24: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_B.mj:14:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:14:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:15:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_B.mj:15:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:15:13: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_B.mj:15:15: LEXER: Found symbol: '#29' with value: '=='
DEBUG - semantic_errors_B.mj:15:18: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_B.mj:15:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:15:21: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_B.mj:15:28: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - semantic_errors_B.mj:15:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:16:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_B.mj:16:16: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_B.mj:16:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:17:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:19:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_B.mj:19:10: LEXER: Found symbol: '#55' with value: 'f4'
DEBUG - semantic_errors_B.mj:19:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:19:13: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:20:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:20:13: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_B.mj:20:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:20:17: LEXER: Found symbol: '#55' with value: 'it2'
DEBUG - semantic_errors_B.mj:20:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:21:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:22:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - semantic_errors_B.mj:22:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:22:18: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_B.mj:22:21: LEXER: Found symbol: '#48' with value: ':'
DEBUG - semantic_errors_B.mj:22:23: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:22:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:22:28: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:23:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_B.mj:23:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:23:19: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_B.mj:23:21: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:23:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:23:24: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_B.mj:23:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:23:30: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - semantic_errors_B.mj:23:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:23:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:25:13: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_B.mj:25:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:25:18: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:25:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:26:13: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - semantic_errors_B.mj:26:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:26:22: LEXER: Found symbol: '#55' with value: 'it2'
DEBUG - semantic_errors_B.mj:26:26: LEXER: Found symbol: '#48' with value: ':'
DEBUG - semantic_errors_B.mj:26:28: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:26:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:26:33: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:28:17: LEXER: Found symbol: '#55' with value: 'it2'
DEBUG - semantic_errors_B.mj:28:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:28:23: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_B.mj:28:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:29:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:30:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:31:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:33:5: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:33:10: LEXER: Found symbol: '#55' with value: 'f5'
DEBUG - semantic_errors_B.mj:33:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:33:13: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:33:17: LEXER: Found symbol: '#55' with value: 'p1'
DEBUG - semantic_errors_B.mj:33:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:34:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:34:13: LEXER: Found symbol: '#55' with value: 'var1'
DEBUG - semantic_errors_B.mj:34:17: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:34:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:34:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:35:9: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:35:14: LEXER: Found symbol: '#55' with value: 'var2'
DEBUG - semantic_errors_B.mj:35:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:36:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:38:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:40:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_B.mj:40:10: LEXER: Found symbol: '#55' with value: 'f6'
DEBUG - semantic_errors_B.mj:40:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:40:13: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:40:17: LEXER: Found symbol: '#55' with value: 'p1'
DEBUG - semantic_errors_B.mj:40:19: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:40:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:40:26: LEXER: Found symbol: '#55' with value: 'p2'
DEBUG - semantic_errors_B.mj:40:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:41:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:41:13: LEXER: Found symbol: '#55' with value: 'var1'
DEBUG - semantic_errors_B.mj:41:17: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:41:19: LEXER: Found symbol: '#55' with value: 'var2'
DEBUG - semantic_errors_B.mj:41:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:42:9: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:42:14: LEXER: Found symbol: '#55' with value: 'var3'
DEBUG - semantic_errors_B.mj:42:18: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:42:20: LEXER: Found symbol: '#55' with value: 'var4'
DEBUG - semantic_errors_B.mj:42:24: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:42:25: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:42:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:43:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_B.mj:43:14: LEXER: Found symbol: '#55' with value: 'var5'
DEBUG - semantic_errors_B.mj:43:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:44:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:46:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:48:5: LEXER: Found symbol: '#7' with value: 'const'
ERROR - semantic_errors_B.mj:48:5: PARSER: Syntax error!
DEBUG - semantic_errors_B.mj:48:11: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:48:15: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_B.mj:48:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:48:19: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:48:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:50:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:50:9: LEXER: Found symbol: '#55' with value: 'f'
DEBUG - semantic_errors_B.mj:50:10: LEXER: Found symbol: '#42' with value: '('
WARN  - semantic_errors_B.mj:48:5: PARSER: Invalid local variable declaration! Parsing continued...
ERROR - semantic_errors_B.mj:50:10: PARSER: Syntax error!
DEBUG - semantic_errors_B.mj:50:11: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:50:15: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:50:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:50:18: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:51:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_B.mj:51:16: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:51:18: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:51:20: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_B.mj:51:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:52:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:54:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_B.mj:54:10: LEXER: Found symbol: '#55' with value: 'statement_test'
DEBUG - semantic_errors_B.mj:54:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:54:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:55:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:55:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:55:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:55:16: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:55:17: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:55:19: LEXER: Found symbol: '#55' with value: 'z'
WARN  - semantic_errors_B.mj:50:10: PARSER: Invalid class base type declaration! Parsing continued...
DEBUG - semantic_errors_B.mj:55:20: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:55:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:55:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:56:9: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:56:14: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:56:17: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:56:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:56:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:57:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:59:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:59:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:59:13: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:59:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:60:9: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:60:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:60:13: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_B.mj:60:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:61:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:61:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:61:13: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_B.mj:61:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:62:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:62:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:62:15: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_B.mj:62:19: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_B.mj:62:23: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:62:24: LEXER: Found symbol: '#52' with value: '18'
DEBUG - semantic_errors_B.mj:62:27: LEXER: Found symbol: '#25' with value: '/'
DEBUG - semantic_errors_B.mj:62:29: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:62:30: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:62:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:65:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:65:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:65:13: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:65:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:65:17: LEXER: Found symbol: '#52' with value: '3'
DEBUG - semantic_errors_B.mj:65:19: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:65:21: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_B.mj:65:23: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:65:25: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:65:26: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:65:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:68:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:68:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:68:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:68:15: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:68:17: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:68:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:69:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:69:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:69:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:69:15: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_B.mj:69:17: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:69:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:70:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:70:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:70:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:70:15: LEXER: Found symbol: '#24' with value: '*'
DEBUG - semantic_errors_B.mj:70:17: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:70:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:71:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:71:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:71:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:71:15: LEXER: Found symbol: '#25' with value: '/'
DEBUG - semantic_errors_B.mj:71:17: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:71:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:72:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:72:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:72:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:72:15: LEXER: Found symbol: '#26' with value: '%'
DEBUG - semantic_errors_B.mj:72:17: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:72:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:75:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:75:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:75:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:75:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:75:16: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:75:18: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:75:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:75:21: LEXER: Found symbol: '#24' with value: '*'
DEBUG - semantic_errors_B.mj:75:23: LEXER: Found symbol: '#52' with value: '3'
DEBUG - semantic_errors_B.mj:75:25: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_B.mj:75:27: LEXER: Found symbol: '#52' with value: '12'
DEBUG - semantic_errors_B.mj:75:30: LEXER: Found symbol: '#25' with value: '/'
DEBUG - semantic_errors_B.mj:75:32: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:75:34: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:75:36: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:75:38: LEXER: Found symbol: '#26' with value: '%'
DEBUG - semantic_errors_B.mj:75:40: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:75:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:78:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:78:10: LEXER: Found symbol: '#27' with value: '++'
DEBUG - semantic_errors_B.mj:78:12: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:79:9: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:79:10: LEXER: Found symbol: '#28' with value: '--'
DEBUG - semantic_errors_B.mj:79:12: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:82:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:82:11: LEXER: Found symbol: '#37' with value: '+='
DEBUG - semantic_errors_B.mj:82:14: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_B.mj:82:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:83:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:83:11: LEXER: Found symbol: '#38' with value: '-='
DEBUG - semantic_errors_B.mj:83:14: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:83:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:84:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:84:11: LEXER: Found symbol: '#39' with value: '*='
DEBUG - semantic_errors_B.mj:84:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:84:16: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:84:18: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:84:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:85:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:85:11: LEXER: Found symbol: '#40' with value: '/='
DEBUG - semantic_errors_B.mj:85:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:85:16: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_B.mj:85:18: LEXER: Found symbol: '#52' with value: '4'
DEBUG - semantic_errors_B.mj:85:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:86:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:86:11: LEXER: Found symbol: '#41' with value: '%='
DEBUG - semantic_errors_B.mj:86:14: LEXER: Found symbol: '#52' with value: '12'
DEBUG - semantic_errors_B.mj:86:17: LEXER: Found symbol: '#24' with value: '*'
DEBUG - semantic_errors_B.mj:86:19: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:86:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:89:9: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:89:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:89:13: LEXER: Found symbol: '#55' with value: 'f'
DEBUG - semantic_errors_B.mj:89:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:89:15: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:89:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:89:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:92:9: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - semantic_errors_B.mj:92:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:92:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:92:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:92:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:93:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_B.mj:93:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:93:15: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:93:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:93:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:96:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_B.mj:96:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:96:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:96:15: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_B.mj:96:17: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_B.mj:96:19: LEXER: Found symbol: '#31' with value: '>'
DEBUG - semantic_errors_B.mj:96:21: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:96:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:96:24: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:97:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:97:15: LEXER: Found symbol: '#37' with value: '+='
DEBUG - semantic_errors_B.mj:97:18: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:97:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:98:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:99:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_B.mj:99:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:99:13: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:99:15: LEXER: Found symbol: '#26' with value: '%'
DEBUG - semantic_errors_B.mj:99:17: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:99:19: LEXER: Found symbol: '#30' with value: '!='
DEBUG - semantic_errors_B.mj:99:22: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:99:24: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - semantic_errors_B.mj:99:27: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:99:29: LEXER: Found symbol: '#31' with value: '>'
DEBUG - semantic_errors_B.mj:99:31: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:99:33: LEXER: Found symbol: '#36' with value: '||'
DEBUG - semantic_errors_B.mj:99:36: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:99:38: LEXER: Found symbol: '#29' with value: '=='
DEBUG - semantic_errors_B.mj:99:41: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_B.mj:99:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:99:44: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:100:13: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:100:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:100:17: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:100:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:101:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:101:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - semantic_errors_B.mj:101:16: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_B.mj:101:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:101:20: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - semantic_errors_B.mj:101:25: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - semantic_errors_B.mj:101:28: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_B.mj:101:34: LEXER: Found symbol: '#36' with value: '||'
DEBUG - semantic_errors_B.mj:101:37: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - semantic_errors_B.mj:101:41: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:102:13: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:102:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:102:17: LEXER: Found symbol: '#52' with value: '15'
DEBUG - semantic_errors_B.mj:102:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:103:9: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - semantic_errors_B.mj:103:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:103:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:103:18: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_B.mj:103:19: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_B.mj:103:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:106:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - semantic_errors_B.mj:106:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:106:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:106:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:106:18: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_B.mj:106:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:106:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:106:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - semantic_errors_B.mj:106:25: LEXER: Found symbol: '#52' with value: '16'
DEBUG - semantic_errors_B.mj:106:28: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - semantic_errors_B.mj:106:31: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:106:33: LEXER: Found symbol: '#33' with value: '<'
DEBUG - semantic_errors_B.mj:106:35: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - semantic_errors_B.mj:106:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:106:38: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:106:39: LEXER: Found symbol: '#27' with value: '++'
DEBUG - semantic_errors_B.mj:106:41: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:106:43: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:107:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_B.mj:107:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:107:19: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:107:20: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:107:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:109:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_B.mj:109:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:109:17: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:109:19: LEXER: Found symbol: '#29' with value: '=='
DEBUG - semantic_errors_B.mj:109:22: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:109:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:109:25: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - semantic_errors_B.mj:109:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:110:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_B.mj:110:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:110:17: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_B.mj:110:19: LEXER: Found symbol: '#33' with value: '<'
DEBUG - semantic_errors_B.mj:110:21: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_B.mj:110:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:110:24: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - semantic_errors_B.mj:110:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:111:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:114:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - semantic_errors_B.mj:114:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:114:18: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:114:20: LEXER: Found symbol: '#48' with value: ':'
DEBUG - semantic_errors_B.mj:114:22: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:114:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:114:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:115:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_B.mj:115:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:115:19: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:115:20: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:115:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:116:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:119:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:119:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:119:13: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_B.mj:119:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_B.mj:119:15: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_B.mj:119:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_B.mj:119:17: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_B.mj:119:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:120:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:123:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:123:9: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - semantic_errors_B.mj:123:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:123:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:123:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:124:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_B.mj:124:16: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_B.mj:124:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:125:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:127:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_B.mj:127:10: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - semantic_errors_B.mj:127:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:127:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:128:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:128:13: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:128:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_B.mj:128:16: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:128:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:129:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_B.mj:130:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:130:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:130:15: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_B.mj:130:19: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_B.mj:130:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:130:23: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:130:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:130:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:131:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:131:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:131:13: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_B.mj:131:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:131:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:131:18: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_B.mj:131:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:132:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:132:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:132:13: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_B.mj:132:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:132:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:132:18: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:132:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:133:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:133:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_B.mj:133:13: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_B.mj:133:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:135:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:135:11: LEXER: Found symbol: '#37' with value: '+='
DEBUG - semantic_errors_B.mj:135:14: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_B.mj:135:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:136:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:136:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_B.mj:136:13: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_B.mj:136:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_B.mj:136:16: LEXER: Found symbol: '#39' with value: '*='
DEBUG - semantic_errors_B.mj:136:19: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_B.mj:136:21: LEXER: Found symbol: '#38' with value: '-='
DEBUG - semantic_errors_B.mj:136:24: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_B.mj:136:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:138:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - semantic_errors_B.mj:138:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:138:18: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:138:20: LEXER: Found symbol: '#48' with value: ':'
DEBUG - semantic_errors_B.mj:138:22: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_B.mj:138:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:138:27: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_B.mj:138:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_B.mj:138:33: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_B.mj:138:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_B.mj:138:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_B.mj:139:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:140:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_B.mj:140:2: LEXER: Found symbol: '#0' with value: ''
DEBUG - semantic_errors_B.mj:140:2: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree:
Program(
  ProgramHeader(
   level_b_semantic_errors
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    NoProgramDeclarations(
    ) [NoProgramDeclarations]
    VarProgramDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        SingleVariable(
          Variable(
           arr
            ArrayBrackets(
            ) [ArrayBrackets]
          ) [Variable]
        ) [SingleVariable]
      ) [VarDeclaration]
    ) [VarProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      MultipleMethodDeclarations(
        MultipleMethodDeclarations(
          MultipleMethodDeclarations(
            MultipleMethodDeclarations(
              MultipleMethodDeclarations(
                MultipleMethodDeclarations(
                  NoMethodDeclarations(
                  ) [NoMethodDeclarations]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnType(
                        Type(
                         int
                        ) [Type]
                      ) [ReturnType]
                     f1
                    ) [MethodHeader]
                    NoFormalParameters(
                    ) [NoFormalParameters]
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    NoStatements(
                    ) [NoStatements]
                  ) [MethodDeclaration]
                ) [MultipleMethodDeclarations]
                MethodDeclaration(
                  MethodHeader(
                    ReturnType(
                      Type(
                       char
                      ) [Type]
                    ) [ReturnType]
                   f2
                  ) [MethodHeader]
                  FormalParameters(
                    MultipleFormalParameters(
                      SingleFormalParameter(
                        FormalParameter(
                          Type(
                           int
                          ) [Type]
                         a
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [FormalParameter]
                      ) [SingleFormalParameter]
                      FormalParameter(
                        Type(
                         int
                        ) [Type]
                       b
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [MultipleFormalParameters]
                  ) [FormalParameters]
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  MethodStatementListStart(
                  ) [MethodStatementListStart]
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    ReturnStatement(
                      ReturnValue(
                        LeftExpression(
                          MultipleTermsExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   a
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                            SubOperator(
                            ) [SubOperator]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 b
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [MultipleTermsExpression]
                        ) [LeftExpression]
                      ) [ReturnValue]
                    ) [ReturnStatement]
                  ) [MultipleStatements]
                ) [MethodDeclaration]
              ) [MultipleMethodDeclarations]
              MethodDeclaration(
                MethodHeader(
                  ReturnType(
                    Type(
                     bool
                    ) [Type]
                  ) [ReturnType]
                 f3
                ) [MethodHeader]
                FormalParameters(
                  MultipleFormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         int
                        ) [Type]
                       a
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                    FormalParameter(
                      Type(
                       int
                      ) [Type]
                     b
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [FormalParameter]
                  ) [MultipleFormalParameters]
                ) [FormalParameters]
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                MethodStatementListStart(
                ) [MethodStatementListStart]
                MultipleStatements(
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    IfOptElseStatement(
                      IfStatementHeader(
                        IfStatementHeaderStart(
                        ) [IfStatementHeaderStart]
                        SingleTermCondition(
                          SingleFactConditionTerm(
                            ComplexConditionFact(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       a
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              EqOperator(
                              ) [EqOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       b
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [SingleFactConditionTerm]
                        ) [SingleTermCondition]
                      ) [IfStatementHeader]
                      ReturnStatement(
                        ReturnValue(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  BoolConstantFactor(
                                   true
                                  ) [BoolConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ReturnValue]
                      ) [ReturnStatement]
                      NoElseStatment(
                      ) [NoElseStatment]
                    ) [IfOptElseStatement]
                  ) [MultipleStatements]
                  ReturnStatement(
                    ReturnValue(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              BoolConstantFactor(
                               false
                              ) [BoolConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [ReturnValue]
                  ) [ReturnStatement]
                ) [MultipleStatements]
              ) [MethodDeclaration]
            ) [MultipleMethodDeclarations]
            MethodDeclaration(
              MethodHeader(
                ReturnVoid(
                ) [ReturnVoid]
               f4
              ) [MethodHeader]
              NoFormalParameters(
              ) [NoFormalParameters]
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   int
                  ) [Type]
                  MultipleLocalVariables(
                    SingleLocalVariable(
                      LocalVariable(
                       it
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [LocalVariable]
                    ) [SingleLocalVariable]
                    LocalVariable(
                     it2
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [MultipleLocalVariables]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              MethodStatementListStart(
              ) [MethodStatementListStart]
              MultipleStatements(
                NoStatements(
                ) [NoStatements]
                ForEachStatement(
                  ForEachStatementHeader(
                    ForEachStatementHeaderStart(
                    ) [ForEachStatementHeaderStart]
                   it
                    IdentifierDesignator(
                     arr
                    ) [IdentifierDesignator]
                  ) [ForEachStatementHeader]
                  StatementBlock(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       it
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     eol
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               it
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       5
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                      ForEachStatement(
                        ForEachStatementHeader(
                          ForEachStatementHeaderStart(
                          ) [ForEachStatementHeaderStart]
                         it2
                          IdentifierDesignator(
                           arr
                          ) [IdentifierDesignator]
                        ) [ForEachStatementHeader]
                        StatementBlock(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   it2
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           it
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                        ) [StatementBlock]
                      ) [ForEachStatement]
                    ) [MultipleStatements]
                  ) [StatementBlock]
                ) [ForEachStatement]
              ) [MultipleStatements]
            ) [MethodDeclaration]
          ) [MultipleMethodDeclarations]
          MethodDeclaration(
            MethodHeader(
              ReturnType(
                Type(
                 char
                ) [Type]
              ) [ReturnType]
             f5
            ) [MethodHeader]
            FormalParameters(
              SingleFormalParameter(
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 p1
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [SingleFormalParameter]
            ) [FormalParameters]
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   int
                  ) [Type]
                  SingleLocalVariable(
                    LocalVariable(
                     var1
                      ArrayBrackets(
                      ) [ArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 char
                ) [Type]
                SingleLocalVariable(
                  LocalVariable(
                   var2
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            MethodStatementListStart(
            ) [MethodStatementListStart]
            NoStatements(
            ) [NoStatements]
          ) [MethodDeclaration]
        ) [MultipleMethodDeclarations]
        MethodDeclaration(
          MethodHeader(
            ReturnVoid(
            ) [ReturnVoid]
           f6
          ) [MethodHeader]
          FormalParameters(
            MultipleFormalParameters(
              SingleFormalParameter(
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 p1
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [SingleFormalParameter]
              FormalParameter(
                Type(
                 char
                ) [Type]
               p2
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [FormalParameter]
            ) [MultipleFormalParameters]
          ) [FormalParameters]
          MultipleLocalVarDeclarations(
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                MultipleLocalVarDeclarations(
                  MultipleLocalVarDeclarations(
                    MultipleLocalVarDeclarations(
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      LocalVarDeclaration(
                        Type(
                         int
                        ) [Type]
                        MultipleLocalVariables(
                          SingleLocalVariable(
                            LocalVariable(
                             var1
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [LocalVariable]
                          ) [SingleLocalVariable]
                          LocalVariable(
                           var2
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [LocalVariable]
                        ) [MultipleLocalVariables]
                      ) [LocalVarDeclaration]
                    ) [MultipleLocalVarDeclarations]
                    LocalVarDeclaration(
                      Type(
                       char
                      ) [Type]
                      MultipleLocalVariables(
                        SingleLocalVariable(
                          LocalVariable(
                           var3
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [LocalVariable]
                        ) [SingleLocalVariable]
                        LocalVariable(
                         var4
                          ArrayBrackets(
                          ) [ArrayBrackets]
                        ) [LocalVariable]
                      ) [MultipleLocalVariables]
                    ) [LocalVarDeclaration]
                  ) [MultipleLocalVarDeclarations]
                  LocalVarDeclaration(
                    Type(
                     bool
                    ) [Type]
                    SingleLocalVariable(
                      LocalVariable(
                       var5
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [LocalVariable]
                    ) [SingleLocalVariable]
                  ) [LocalVarDeclaration]
                ) [MultipleLocalVarDeclarations]
                ErrorLocalVarDeclaration(
                ) [ErrorLocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 int
                ) [Type]
                MultipleLocalVariables(
                  MultipleLocalVariables(
                    MultipleLocalVariables(
                      SingleLocalVariable(
                        ErrorLocalVariable(
                        ) [ErrorLocalVariable]
                      ) [SingleLocalVariable]
                      LocalVariable(
                       y
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [LocalVariable]
                    ) [MultipleLocalVariables]
                    LocalVariable(
                     z
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [MultipleLocalVariables]
                  LocalVariable(
                   i
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [MultipleLocalVariables]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               char
              ) [Type]
              SingleLocalVariable(
                LocalVariable(
                 arr
                  ArrayBrackets(
                  ) [ArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          MethodStatementListStart(
          ) [MethodStatementListStart]
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            MultipleStatements(
                                                              NoStatements(
                                                              ) [NoStatements]
                                                              DesignatorBasedStatement(
                                                                AssignmentDesignatorStatement(
                                                                  AssignmentHeader(
                                                                    IdentifierDesignator(
                                                                     x
                                                                    ) [IdentifierDesignator]
                                                                  ) [AssignmentHeader]
                                                                  AssignmentFooter(
                                                                    AssignOperator(
                                                                    ) [AssignOperator]
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            IntConstantFactor(
                                                                             5
                                                                            ) [IntConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [AssignmentFooter]
                                                                ) [AssignmentDesignatorStatement]
                                                              ) [DesignatorBasedStatement]
                                                            ) [MultipleStatements]
                                                            DesignatorBasedStatement(
                                                              AssignmentDesignatorStatement(
                                                                AssignmentHeader(
                                                                  IdentifierDesignator(
                                                                   y
                                                                  ) [IdentifierDesignator]
                                                                ) [AssignmentHeader]
                                                                AssignmentFooter(
                                                                  AssignOperator(
                                                                  ) [AssignOperator]
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          IntConstantFactor(
                                                                           6
                                                                          ) [IntConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [AssignmentFooter]
                                                              ) [AssignmentDesignatorStatement]
                                                            ) [DesignatorBasedStatement]
                                                          ) [MultipleStatements]
                                                          DesignatorBasedStatement(
                                                            AssignmentDesignatorStatement(
                                                              AssignmentHeader(
                                                                IdentifierDesignator(
                                                                 z
                                                                ) [IdentifierDesignator]
                                                              ) [AssignmentHeader]
                                                              AssignmentFooter(
                                                                AssignOperator(
                                                                ) [AssignOperator]
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         1
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [AssignmentFooter]
                                                            ) [AssignmentDesignatorStatement]
                                                          ) [DesignatorBasedStatement]
                                                        ) [MultipleStatements]
                                                        DesignatorBasedStatement(
                                                          AssignmentDesignatorStatement(
                                                            AssignmentHeader(
                                                              IdentifierDesignator(
                                                               arr
                                                              ) [IdentifierDesignator]
                                                            ) [AssignmentHeader]
                                                            AssignmentFooter(
                                                              AssignOperator(
                                                              ) [AssignOperator]
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    AllocatorFactor(
                                                                      Type(
                                                                       char
                                                                      ) [Type]
                                                                      SingleArrayIndexer(
                                                                        ArrayIndexer(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              MultipleFactorsTerm(
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     18
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                                DivOperator(
                                                                                ) [DivOperator]
                                                                                ConstantFactor(
                                                                                  IntConstantFactor(
                                                                                   2
                                                                                  ) [IntConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [MultipleFactorsTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [ArrayIndexer]
                                                                      ) [SingleArrayIndexer]
                                                                    ) [AllocatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [AssignmentFooter]
                                                          ) [AssignmentDesignatorStatement]
                                                        ) [DesignatorBasedStatement]
                                                      ) [MultipleStatements]
                                                      DesignatorBasedStatement(
                                                        AssignmentDesignatorStatement(
                                                          AssignmentHeader(
                                                            IdentifierDesignator(
                                                             x
                                                            ) [IdentifierDesignator]
                                                          ) [AssignmentHeader]
                                                          AssignmentFooter(
                                                            AssignOperator(
                                                            ) [AssignOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    ElementAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       arr
                                                                      ) [IdentifierDesignator]
                                                                      ArrayIndexer(
                                                                        LeftExpression(
                                                                          MultipleTermsExpression(
                                                                            MultipleTermsExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     3
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                              AddOperator(
                                                                              ) [AddOperator]
                                                                              SingleFactorTerm(
                                                                                ConstantFactor(
                                                                                  IntConstantFactor(
                                                                                   1
                                                                                  ) [IntConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [MultipleTermsExpression]
                                                                            AddOperator(
                                                                            ) [AddOperator]
                                                                            SingleFactorTerm(
                                                                              DesignatorFactor(
                                                                                IdentifierDesignator(
                                                                                 z
                                                                                ) [IdentifierDesignator]
                                                                              ) [DesignatorFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [MultipleTermsExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ArrayIndexer]
                                                                    ) [ElementAccessDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [AssignmentFooter]
                                                        ) [AssignmentDesignatorStatement]
                                                      ) [DesignatorBasedStatement]
                                                    ) [MultipleStatements]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          IdentifierDesignator(
                                                           z
                                                          ) [IdentifierDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            MultipleTermsExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     x
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                              AddOperator(
                                                              ) [AddOperator]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   y
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [MultipleTermsExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [MultipleStatements]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        IdentifierDesignator(
                                                         z
                                                        ) [IdentifierDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          MultipleTermsExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   x
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                            SubOperator(
                                                            ) [SubOperator]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 y
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [MultipleTermsExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      IdentifierDesignator(
                                                       z
                                                      ) [IdentifierDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          MultipleFactorsTerm(
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 x
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                            MulOperator(
                                                            ) [MulOperator]
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               y
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [MultipleFactorsTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    IdentifierDesignator(
                                                     z
                                                    ) [IdentifierDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        MultipleFactorsTerm(
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               x
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                          DivOperator(
                                                          ) [DivOperator]
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             y
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [MultipleFactorsTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  IdentifierDesignator(
                                                   z
                                                  ) [IdentifierDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      MultipleFactorsTerm(
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             x
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                        ModOperator(
                                                        ) [ModOperator]
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           y
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [MultipleFactorsTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                IdentifierDesignator(
                                                 z
                                                ) [IdentifierDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  MultipleTermsExpression(
                                                    MultipleTermsExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        MultipleFactorsTerm(
                                                          SingleFactorTerm(
                                                            InnerExpressionFactor(
                                                              LeftExpression(
                                                                MultipleTermsExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      DesignatorFactor(
                                                                        IdentifierDesignator(
                                                                         x
                                                                        ) [IdentifierDesignator]
                                                                      ) [DesignatorFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                  AddOperator(
                                                                  ) [AddOperator]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       y
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [MultipleTermsExpression]
                                                              ) [LeftExpression]
                                                            ) [InnerExpressionFactor]
                                                          ) [SingleFactorTerm]
                                                          MulOperator(
                                                          ) [MulOperator]
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             3
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [MultipleFactorsTerm]
                                                      ) [SingleTermExpression]
                                                      SubOperator(
                                                      ) [SubOperator]
                                                      MultipleFactorsTerm(
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             12
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                        DivOperator(
                                                        ) [DivOperator]
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           2
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [MultipleFactorsTerm]
                                                    ) [MultipleTermsExpression]
                                                    AddOperator(
                                                    ) [AddOperator]
                                                    MultipleFactorsTerm(
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           z
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                      ModOperator(
                                                      ) [ModOperator]
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         2
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [MultipleFactorsTerm]
                                                  ) [MultipleTermsExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          IncrementDesignatorStatement(
                                            IdentifierDesignator(
                                             x
                                            ) [IdentifierDesignator]
                                          ) [IncrementDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        DecrementDesignatorStatement(
                                          IdentifierDesignator(
                                           y
                                          ) [IdentifierDesignator]
                                        ) [DecrementDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           z
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          RightOperator(
                                            RightAddOperator(
                                              AddAssignOperator(
                                              ) [AddAssignOperator]
                                            ) [RightAddOperator]
                                          ) [RightOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   1
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         z
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        RightOperator(
                                          RightAddOperator(
                                            SubAssignOperator(
                                            ) [SubAssignOperator]
                                          ) [RightAddOperator]
                                        ) [RightOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 2
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       z
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      RightOperator(
                                        RightMulOperator(
                                          MulAssignOperator(
                                          ) [MulAssignOperator]
                                        ) [RightMulOperator]
                                      ) [RightOperator]
                                      LeftExpression(
                                        MultipleTermsExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 x
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                          AddOperator(
                                          ) [AddOperator]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               y
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [MultipleTermsExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    IdentifierDesignator(
                                     z
                                    ) [IdentifierDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    RightOperator(
                                      RightMulOperator(
                                        DivAssignOperator(
                                        ) [DivAssignOperator]
                                      ) [RightMulOperator]
                                    ) [RightOperator]
                                    LeftExpression(
                                      MultipleTermsExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               x
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                        SubOperator(
                                        ) [SubOperator]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             4
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [MultipleTermsExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   z
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  RightOperator(
                                    RightMulOperator(
                                      ModAssignOperator(
                                      ) [ModAssignOperator]
                                    ) [RightMulOperator]
                                  ) [RightOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      MultipleFactorsTerm(
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             12
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                        MulOperator(
                                        ) [MulOperator]
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           y
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [MultipleFactorsTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 z
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      MethodCallFactor(
                                        MethodCall(
                                          MethodCallHeader(
                                            IdentifierDesignator(
                                             f
                                            ) [IdentifierDesignator]
                                          ) [MethodCallHeader]
                                          ActualParameters(
                                            SingleActualParameter(
                                              ActualParameter(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         x
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ActualParameter]
                                            ) [SingleActualParameter]
                                          ) [ActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        ReadStatement(
                          IdentifierDesignator(
                           x
                          ) [IdentifierDesignator]
                        ) [ReadStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 y
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    IfOptElseStatement(
                      IfStatementHeader(
                        IfStatementHeaderStart(
                        ) [IfStatementHeaderStart]
                        SingleTermCondition(
                          SingleFactConditionTerm(
                            ComplexConditionFact(
                              LeftExpression(
                                MultipleTermsExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         x
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                  AddOperator(
                                  ) [AddOperator]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       1
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [MultipleTermsExpression]
                              ) [LeftExpression]
                              GrtOperator(
                              ) [GrtOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       y
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [SingleFactConditionTerm]
                        ) [SingleTermCondition]
                      ) [IfStatementHeader]
                      StatementBlock(
                        MultipleStatements(
                          NoStatements(
                          ) [NoStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 x
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                RightOperator(
                                  RightAddOperator(
                                    AddAssignOperator(
                                    ) [AddAssignOperator]
                                  ) [RightAddOperator]
                                ) [RightOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         5
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                      ) [StatementBlock]
                      NoElseStatment(
                      ) [NoElseStatment]
                    ) [IfOptElseStatement]
                  ) [MultipleStatements]
                  IfOptElseStatement(
                    IfStatementHeader(
                      IfStatementHeaderStart(
                      ) [IfStatementHeaderStart]
                      MultipleTermsCondition(
                        SingleTermCondition(
                          MultipleFactsConditionTerm(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    MultipleFactorsTerm(
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           y
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                      ModOperator(
                                      ) [ModOperator]
                                      ConstantFactor(
                                        IntConstantFactor(
                                         2
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [MultipleFactorsTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NeqOperator(
                                ) [NeqOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         z
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                            ComplexConditionFact(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       x
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              GrtOperator(
                              ) [GrtOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       5
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [MultipleFactsConditionTerm]
                        ) [SingleTermCondition]
                        SingleFactConditionTerm(
                          ComplexConditionFact(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     x
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            EqOperator(
                            ) [EqOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    IntConstantFactor(
                                     6
                                    ) [IntConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ComplexConditionFact]
                        ) [SingleFactConditionTerm]
                      ) [MultipleTermsCondition]
                    ) [IfStatementHeader]
                    StatementBlock(
                      MultipleStatements(
                        NoStatements(
                        ) [NoStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               z
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       2
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                    ) [StatementBlock]
                    ElseStatement(
                      ElseStatementStart(
                      ) [ElseStatementStart]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          MultipleTermsCondition(
                            SingleTermCondition(
                              MultipleFactsConditionTerm(
                                SingleFactConditionTerm(
                                  SimpleConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            BoolConstantFactor(
                                             true
                                            ) [BoolConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [SimpleConditionFact]
                                ) [SingleFactConditionTerm]
                                SimpleConditionFact(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          BoolConstantFactor(
                                           false
                                          ) [BoolConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [SimpleConditionFact]
                              ) [MultipleFactsConditionTerm]
                            ) [SingleTermCondition]
                            SingleFactConditionTerm(
                              SimpleConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        BoolConstantFactor(
                                         true
                                        ) [BoolConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [SimpleConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [MultipleTermsCondition]
                        ) [IfStatementHeader]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               y
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       15
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                        ElseStatement(
                          ElseStatementStart(
                          ) [ElseStatementStart]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 x
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    MinusSign(
                                    ) [MinusSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         6
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [ElseStatement]
                      ) [IfOptElseStatement]
                    ) [ElseStatement]
                  ) [IfOptElseStatement]
                ) [MultipleStatements]
                ForStatement(
                  ForStatementHeader(
                    ForStatementHeaderStart(
                    ) [ForStatementHeaderStart]
                    SingleDesignatorStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           i
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   6
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [SingleDesignatorStatement]
                    SingleCondition(
                      SingleTermCondition(
                        MultipleFactsConditionTerm(
                          SingleFactConditionTerm(
                            ComplexConditionFact(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       i
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              LssOperator(
                              ) [LssOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       16
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [SingleFactConditionTerm]
                          ComplexConditionFact(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     i
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            LssOperator(
                            ) [LssOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     z
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ComplexConditionFact]
                        ) [MultipleFactsConditionTerm]
                      ) [SingleTermCondition]
                    ) [SingleCondition]
                    SingleDesignatorStatement(
                      IncrementDesignatorStatement(
                        IdentifierDesignator(
                         i
                        ) [IdentifierDesignator]
                      ) [IncrementDesignatorStatement]
                    ) [SingleDesignatorStatement]
                  ) [ForStatementHeader]
                  StatementBlock(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          NoStatements(
                          ) [NoStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     i
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                        IfOptElseStatement(
                          IfStatementHeader(
                            IfStatementHeaderStart(
                            ) [IfStatementHeaderStart]
                            SingleTermCondition(
                              SingleFactConditionTerm(
                                ComplexConditionFact(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           x
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  EqOperator(
                                  ) [EqOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           5
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ComplexConditionFact]
                              ) [SingleFactConditionTerm]
                            ) [SingleTermCondition]
                          ) [IfStatementHeader]
                          BreakStatement(
                          ) [BreakStatement]
                          NoElseStatment(
                          ) [NoElseStatment]
                        ) [IfOptElseStatement]
                      ) [MultipleStatements]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          SingleTermCondition(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         y
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                LssOperator(
                                ) [LssOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         6
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [SingleTermCondition]
                        ) [IfStatementHeader]
                        ContinueStatement(
                        ) [ContinueStatement]
                        NoElseStatment(
                        ) [NoElseStatment]
                      ) [IfOptElseStatement]
                    ) [MultipleStatements]
                  ) [StatementBlock]
                ) [ForStatement]
              ) [MultipleStatements]
              ForEachStatement(
                ForEachStatementHeader(
                  ForEachStatementHeaderStart(
                  ) [ForEachStatementHeaderStart]
                 x
                  IdentifierDesignator(
                   arr
                  ) [IdentifierDesignator]
                ) [ForEachStatementHeader]
                StatementBlock(
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               x
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                ) [StatementBlock]
              ) [ForEachStatement]
            ) [MultipleStatements]
            DesignatorBasedStatement(
              AssignmentDesignatorStatement(
                AssignmentHeader(
                  IdentifierDesignator(
                   x
                  ) [IdentifierDesignator]
                ) [AssignmentHeader]
                AssignmentFooter(
                  AssignOperator(
                  ) [AssignOperator]
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        DesignatorFactor(
                          MemberAccessDesignator(
                            MemberAccessDesignator(
                              IdentifierDesignator(
                               a
                              ) [IdentifierDesignator]
                             b
                            ) [MemberAccessDesignator]
                           c
                          ) [MemberAccessDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                ) [AssignmentFooter]
              ) [AssignmentDesignatorStatement]
            ) [DesignatorBasedStatement]
          ) [MultipleStatements]
        ) [MethodDeclaration]
      ) [MultipleMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnType(
            Type(
             int
            ) [Type]
          ) [ReturnType]
         main
        ) [MethodHeader]
        NoFormalParameters(
        ) [NoFormalParameters]
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          NoStatements(
          ) [NoStatements]
          ReturnStatement(
            ReturnValue(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    ConstantFactor(
                      IntConstantFactor(
                       0
                      ) [IntConstantFactor]
                    ) [ConstantFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
            ) [ReturnValue]
          ) [ReturnStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           int
          ) [Type]
          MultipleLocalVariables(
            SingleLocalVariable(
              LocalVariable(
               x
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [SingleLocalVariable]
            LocalVariable(
             i
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [LocalVariable]
          ) [MultipleLocalVariables]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           arr
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                AllocatorFactor(
                                  Type(
                                   int
                                  ) [Type]
                                  SingleArrayIndexer(
                                    ArrayIndexer(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               2
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ArrayIndexer]
                                  ) [SingleArrayIndexer]
                                ) [AllocatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                  DesignatorBasedStatement(
                    AssignmentDesignatorStatement(
                      AssignmentHeader(
                        ElementAccessDesignator(
                          IdentifierDesignator(
                           arr
                          ) [IdentifierDesignator]
                          ArrayIndexer(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    IntConstantFactor(
                                     0
                                    ) [IntConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ArrayIndexer]
                        ) [ElementAccessDesignator]
                      ) [AssignmentHeader]
                      AssignmentFooter(
                        AssignOperator(
                        ) [AssignOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                IntConstantFactor(
                                 5
                                ) [IntConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [AssignmentFooter]
                    ) [AssignmentDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                DesignatorBasedStatement(
                  AssignmentDesignatorStatement(
                    AssignmentHeader(
                      ElementAccessDesignator(
                        IdentifierDesignator(
                         arr
                        ) [IdentifierDesignator]
                        ArrayIndexer(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   1
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ArrayIndexer]
                      ) [ElementAccessDesignator]
                    ) [AssignmentHeader]
                    AssignmentFooter(
                      AssignOperator(
                      ) [AssignOperator]
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              IntConstantFactor(
                               2
                              ) [IntConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [AssignmentFooter]
                  ) [AssignmentDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
              DesignatorBasedStatement(
                AssignmentDesignatorStatement(
                  AssignmentHeader(
                    IdentifierDesignator(
                     x
                    ) [IdentifierDesignator]
                  ) [AssignmentHeader]
                  AssignmentFooter(
                    AssignOperator(
                    ) [AssignOperator]
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             0
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [AssignmentFooter]
                ) [AssignmentDesignatorStatement]
              ) [DesignatorBasedStatement]
            ) [MultipleStatements]
            DesignatorBasedStatement(
              AssignmentDesignatorStatement(
                AssignmentHeader(
                  IdentifierDesignator(
                   x
                  ) [IdentifierDesignator]
                ) [AssignmentHeader]
                AssignmentFooter(
                  RightOperator(
                    RightAddOperator(
                      AddAssignOperator(
                      ) [AddAssignOperator]
                    ) [RightAddOperator]
                  ) [RightOperator]
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        ConstantFactor(
                          IntConstantFactor(
                           2
                          ) [IntConstantFactor]
                        ) [ConstantFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                ) [AssignmentFooter]
              ) [AssignmentDesignatorStatement]
            ) [DesignatorBasedStatement]
          ) [MultipleStatements]
          DesignatorBasedStatement(
            AssignmentDesignatorStatement(
              AssignmentHeader(
                ElementAccessDesignator(
                  IdentifierDesignator(
                   arr
                  ) [IdentifierDesignator]
                  ArrayIndexer(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             0
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [ArrayIndexer]
                ) [ElementAccessDesignator]
              ) [AssignmentHeader]
              AssignmentFooter(
                RightOperator(
                  RightMulOperator(
                    MulAssignOperator(
                    ) [MulAssignOperator]
                  ) [RightMulOperator]
                ) [RightOperator]
                AssignmentExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         x
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                  RightAddOperator(
                    SubAssignOperator(
                    ) [SubAssignOperator]
                  ) [RightAddOperator]
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        ConstantFactor(
                          IntConstantFactor(
                           1
                          ) [IntConstantFactor]
                        ) [ConstantFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                ) [AssignmentExpression]
              ) [AssignmentFooter]
            ) [AssignmentDesignatorStatement]
          ) [DesignatorBasedStatement]
        ) [MultipleStatements]
        ForEachStatement(
          ForEachStatementHeader(
            ForEachStatementHeaderStart(
            ) [ForEachStatementHeaderStart]
           i
            IdentifierDesignator(
             arr
            ) [IdentifierDesignator]
          ) [ForEachStatementHeader]
          PrintStatement(
            LeftExpression(
              SingleTermExpression(
                NoSign(
                ) [NoSign]
                SingleFactorTerm(
                  DesignatorFactor(
                    IdentifierDesignator(
                     i
                    ) [IdentifierDesignator]
                  ) [DesignatorFactor]
                ) [SingleFactorTerm]
              ) [SingleTermExpression]
            ) [LeftExpression]
            NoPrintWidth(
            ) [NoPrintWidth]
          ) [PrintStatement]
        ) [ForEachStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - semantic_errors_B.mj:2: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - semantic_errors_B.mj:3: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:3: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_B.mj:3: SEMANTIC ANALYZER: Defined int array variable 'arr'. Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:6: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:6: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_B.mj:6: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:6: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:6: SEMANTIC ANALYZER: Defined method 'f1'. Symbol node: Method 'f1': type = 'int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Defined int formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
ERROR - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Return expression type incompatible with method type!
DEBUG - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:10: SEMANTIC ANALYZER: Defined method 'f2'. Symbol node: Method 'f2': type = 'char', adr = 0, level = 2
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Defined int formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Defined method 'f3'. Symbol node: Method 'f3': type = 'bool', adr = 0, level = 2
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_B.mj:20: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:20: SEMANTIC ANALYZER: Defined int variable 'it'. Symbol node: Variable 'it': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:20: SEMANTIC ANALYZER: Defined int variable 'it2'. Symbol node: Variable 'it2': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:22: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:22: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:22: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:29: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
ERROR - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Variable 'it' is read-only inside the foreach loop!
DEBUG - semantic_errors_B.mj:26: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:26: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:26: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Found local variable usage 'it2'! Symbol node: Variable 'it2': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
ERROR - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Variable 'it2' is read-only inside the foreach loop!
DEBUG - semantic_errors_B.mj:26: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - semantic_errors_B.mj:22: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Defined method 'f4'. Symbol node: Method 'f4': type = 'void', adr = 0, level = 0
  Variable 'it': type = 'int', adr = 0, level = 1
  Variable 'it2': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Defined int formal parameter 'p1'. Symbol node: Formal parameter 'p1': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:34: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:34: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:34: SEMANTIC ANALYZER: Defined int array variable 'var1'. Symbol node: Variable 'var1': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:35: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:35: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:35: SEMANTIC ANALYZER: Defined char variable 'var2'. Symbol node: Variable 'var2': type = 'char', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Defined method 'f5'. Symbol node: Method 'f5': type = 'char', adr = 0, level = 1
  Formal parameter 'p1': type = 'int', adr = 0, level = 1
  Variable 'var1': type = 'array of int', adr = 1, level = 1
  Variable 'var2': type = 'char', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Defined int formal parameter 'p1'. Symbol node: Formal parameter 'p1': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Defined char formal parameter 'p2'. Symbol node: Formal parameter 'p2': type = 'char', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:41: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:41: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:41: SEMANTIC ANALYZER: Defined int variable 'var1'. Symbol node: Variable 'var1': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_B.mj:41: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:41: SEMANTIC ANALYZER: Defined int variable 'var2'. Symbol node: Variable 'var2': type = 'int', adr = 3, level = 1
DEBUG - semantic_errors_B.mj:42: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:42: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:42: SEMANTIC ANALYZER: Defined char variable 'var3'. Symbol node: Variable 'var3': type = 'char', adr = 4, level = 1
DEBUG - semantic_errors_B.mj:42: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:42: SEMANTIC ANALYZER: Defined char array variable 'var4'. Symbol node: Variable 'var4': type = 'array of char', adr = 5, level = 1
DEBUG - semantic_errors_B.mj:43: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:43: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:43: SEMANTIC ANALYZER: Defined bool variable 'var5'. Symbol node: Variable 'var5': type = 'bool', adr = 6, level = 1
DEBUG - semantic_errors_B.mj:50: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:55: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:55: SEMANTIC ANALYZER: Defined int variable 'y'. Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:55: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:55: SEMANTIC ANALYZER: Defined int variable 'z'. Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:55: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:55: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 9, level = 1
DEBUG - semantic_errors_B.mj:56: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:56: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:56: SEMANTIC ANALYZER: Defined char array variable 'arr'. Symbol node: Variable 'arr': type = 'array of char', adr = 10, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:59: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:59: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:59: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:59: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:59: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:60: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:60: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:60: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:60: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:60: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:61: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:61: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:61: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:61: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:61: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of char', adr = 10, level = 1
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:62: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:65: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of char', adr = 10, level = 1
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Found array element access 'z[3 + 1 + z]'! Symbol node: Array element 'z[3 + 1 + z]': type = 'char', adr = -1, level = -1
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:65: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:68: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:68: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:69: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:69: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:70: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
ERROR - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Left term is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:70: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:71: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
ERROR - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Left term is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:71: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:72: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
ERROR - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Left term is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:72: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:75: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'InnerExpressionFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
ERROR - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Left term is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:75: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:78: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:78: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:78: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - semantic_errors_B.mj:79: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:79: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:79: SEMANTIC ANALYZER: Visited node: 'DecrementDesignatorStatement'.
DEBUG - semantic_errors_B.mj:82: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:82: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:82: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:82: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:83: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:83: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:83: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:83: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:83: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:84: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:84: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:85: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:85: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:86: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:89: SEMANTIC ANALYZER: 'f' is not defined!
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:89: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:89: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
ERROR - semantic_errors_B.mj:89: SEMANTIC ANALYZER: none incompatible with int!
DEBUG - semantic_errors_B.mj:92: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:92: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:92: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - semantic_errors_B.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:93: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:93: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:93: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:96: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Left expression is invalid!
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - semantic_errors_B.mj:97: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:97: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:97: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:97: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:97: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:96: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:99: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:24: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:99: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - semantic_errors_B.mj:100: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:100: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:100: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:100: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:100: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - semantic_errors_B.mj:102: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:102: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:102: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:102: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:102: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:103: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:103: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:103: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:103: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:103: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:101: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 9, level = 1
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 9, level = 1
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 9, level = 1
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 8, level = 1
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:28: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 9, level = 1
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - semantic_errors_B.mj:107: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:107: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 9, level = 1
DEBUG - semantic_errors_B.mj:107: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:109: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - semantic_errors_B.mj:109: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Found local variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 1
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - semantic_errors_B.mj:110: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_B.mj:106: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - semantic_errors_B.mj:114: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:114: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of char', adr = 10, level = 1
DEBUG - semantic_errors_B.mj:114: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
ERROR - semantic_errors_B.mj:114: SEMANTIC ANALYZER: x is not defined!
DEBUG - semantic_errors_B.mj:115: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:115: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:115: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:115: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
ERROR - semantic_errors_B.mj:18: SEMANTIC ANALYZER: Print statement parameter must be of basic type: int, char or bool!
DEBUG - semantic_errors_B.mj:114: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:119: SEMANTIC ANALYZER: 'x' is not defined!
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_B.mj:119: SEMANTIC ANALYZER: 'a' is not defined!
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:119: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:40: SEMANTIC ANALYZER: Defined method 'f6'. Symbol node: Method 'f6': type = 'void', adr = 0, level = 2
  Formal parameter 'p1': type = 'int', adr = 0, level = 1
  Formal parameter 'p2': type = 'char', adr = 1, level = 1
  Variable 'var1': type = 'int', adr = 2, level = 1
  Variable 'var2': type = 'int', adr = 3, level = 1
  Variable 'var3': type = 'char', adr = 4, level = 1
  Variable 'var4': type = 'array of char', adr = 5, level = 1
  Variable 'var5': type = 'bool', adr = 6, level = 1
  Variable 'y': type = 'int', adr = 7, level = 1
  Variable 'z': type = 'int', adr = 8, level = 1
  Variable 'i': type = 'int', adr = 9, level = 1
  Variable 'arr': type = 'array of char', adr = 10, level = 1
DEBUG - semantic_errors_B.mj:123: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:123: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_B.mj:123: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:124: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:124: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_B.mj:123: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:123: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'int', adr = 0, level = 0
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_B.mj:127: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
ERROR - semantic_errors_B.mj:127: SEMANTIC ANALYZER: 'main' is already in use!
DEBUG - semantic_errors_B.mj:128: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:128: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:128: SEMANTIC ANALYZER: Defined int variable 'x'. Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:128: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_B.mj:128: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:130: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Found array element access 'arr[0]'! Symbol node: Array element 'arr[0]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:131: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Found array element access 'arr[1]'! Symbol node: Array element 'arr[1]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:132: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:133: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:133: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:133: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:135: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:135: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:135: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:135: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:135: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Found array element access 'arr[0]'! Symbol node: Array element 'arr[0]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:16: SEMANTIC ANALYZER: Visited node: 'AssignmentExpression'.
DEBUG - semantic_errors_B.mj:136: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Found global variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 0, level = 0
DEBUG - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_B.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_B.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_B.mj:32: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_B.mj:138: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - semantic_errors_B.mj:127: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_B.mj:127: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = -1, level = 0
  Variable 'x': type = 'int', adr = 0, level = 1
  Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_B.mj:2: SEMANTIC ANALYZER: Visited node: 'Program'.
ERROR - semantic_errors_B.mj:2: SEMANTIC ANALYZER: Main method defined but is not a void method with zero parameters!
INFO  - semantic_errors_B.mj:2: SEMANTIC ANALYZER: Defined program 'level_b_semantic_errors'. Symbol node: Program 'level_b_semantic_errors': type = 'none', adr = 0, level = 1
  Variable 'arr': type = 'array of int', adr = 0, level = 0
  Method 'f1': type = 'int', adr = 0, level = 0
  Method 'f2': type = 'char', adr = 0, level = 2
    Formal parameter 'a': type = 'int', adr = 0, level = 1
    Formal parameter 'b': type = 'int', adr = 1, level = 1
  Method 'f3': type = 'bool', adr = 0, level = 2
    Formal parameter 'a': type = 'int', adr = 0, level = 1
    Formal parameter 'b': type = 'int', adr = 1, level = 1
  Method 'f4': type = 'void', adr = 0, level = 0
    Variable 'it': type = 'int', adr = 0, level = 1
    Variable 'it2': type = 'int', adr = 1, level = 1
  Method 'f5': type = 'char', adr = 0, level = 1
    Formal parameter 'p1': type = 'int', adr = 0, level = 1
    Variable 'var1': type = 'array of int', adr = 1, level = 1
    Variable 'var2': type = 'char', adr = 2, level = 1
  Method 'f6': type = 'void', adr = 0, level = 2
    Formal parameter 'p1': type = 'int', adr = 0, level = 1
    Formal parameter 'p2': type = 'char', adr = 1, level = 1
    Variable 'var1': type = 'int', adr = 2, level = 1
    Variable 'var2': type = 'int', adr = 3, level = 1
    Variable 'var3': type = 'char', adr = 4, level = 1
    Variable 'var4': type = 'array of char', adr = 5, level = 1
    Variable 'var5': type = 'bool', adr = 6, level = 1
    Variable 'y': type = 'int', adr = 7, level = 1
    Variable 'z': type = 'int', adr = 8, level = 1
    Variable 'i': type = 'int', adr = 9, level = 1
    Variable 'arr': type = 'array of char', adr = 10, level = 1
  Method 'main': type = 'int', adr = 0, level = 0
