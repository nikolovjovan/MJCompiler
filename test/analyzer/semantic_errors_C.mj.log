DEBUG - semantic_errors_C.mj:2:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - semantic_errors_C.mj:2:9: LEXER: Found symbol: '#55' with value: 'level_c_semantic_errors'
DEBUG - semantic_errors_C.mj:4:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:4:11: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:4:15: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:4:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:4:19: LEXER: Found symbol: '#52' with value: '20'
DEBUG - semantic_errors_C.mj:4:21: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:4:23: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:4:25: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:4:27: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_C.mj:4:28: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_C.mj:4:29: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:4:31: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:4:33: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:4:35: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_C.mj:4:36: LEXER: Found symbol: '#52' with value: '25'
DEBUG - semantic_errors_C.mj:4:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:5:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:5:11: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:5:16: LEXER: Found symbol: '#55' with value: 'd'
DEBUG - semantic_errors_C.mj:5:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:5:20: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - semantic_errors_C.mj:5:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:6:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:6:11: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:6:16: LEXER: Found symbol: '#55' with value: 'e'
DEBUG - semantic_errors_C.mj:6:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:6:20: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - semantic_errors_C.mj:6:24: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:6:26: LEXER: Found symbol: '#55' with value: 'f'
DEBUG - semantic_errors_C.mj:6:28: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:6:30: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_C.mj:6:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:7:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:7:11: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:7:15: LEXER: Found symbol: '#55' with value: 'A'
DEBUG - semantic_errors_C.mj:7:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:7:19: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_C.mj:7:20: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:7:22: LEXER: Found symbol: '#55' with value: 'B'
DEBUG - semantic_errors_C.mj:7:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:7:26: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_C.mj:7:27: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:7:29: LEXER: Found symbol: '#55' with value: 'C'
DEBUG - semantic_errors_C.mj:7:31: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:7:33: LEXER: Found symbol: '#52' with value: '3'
DEBUG - semantic_errors_C.mj:7:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:8:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:8:11: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:8:16: LEXER: Found symbol: '#55' with value: 'X'
DEBUG - semantic_errors_C.mj:8:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:8:20: LEXER: Found symbol: '#53' with value: 'x'
DEBUG - semantic_errors_C.mj:8:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:8:25: LEXER: Found symbol: '#55' with value: 'Y'
DEBUG - semantic_errors_C.mj:8:27: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:8:29: LEXER: Found symbol: '#53' with value: 'y'
DEBUG - semantic_errors_C.mj:8:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:9:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:9:11: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:9:16: LEXER: Found symbol: '#55' with value: 'VALID'
DEBUG - semantic_errors_C.mj:9:22: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:9:24: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - semantic_errors_C.mj:9:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:12:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:12:9: LEXER: Found symbol: '#55' with value: 'var_a'
DEBUG - semantic_errors_C.mj:12:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:12:16: LEXER: Found symbol: '#55' with value: 'var_b'
DEBUG - semantic_errors_C.mj:12:21: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:12:22: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:12:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:13:5: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:13:10: LEXER: Found symbol: '#55' with value: 'var_c'
DEBUG - semantic_errors_C.mj:13:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:13:17: LEXER: Found symbol: '#55' with value: 'var_d'
DEBUG - semantic_errors_C.mj:13:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:13:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:13:24: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:13:26: LEXER: Found symbol: '#55' with value: 'var_e'
DEBUG - semantic_errors_C.mj:13:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:14:5: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:14:10: LEXER: Found symbol: '#55' with value: 'var_f'
DEBUG - semantic_errors_C.mj:14:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:15:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:15:9: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:15:10: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:15:12: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:15:13: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:15:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:15:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:15:17: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:15:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:16:5: LEXER: Found symbol: '#55' with value: 'Point'
DEBUG - semantic_errors_C.mj:16:11: LEXER: Found symbol: '#55' with value: 'p1'
DEBUG - semantic_errors_C.mj:16:13: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:16:15: LEXER: Found symbol: '#55' with value: 'p2'
DEBUG - semantic_errors_C.mj:16:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:19:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:19:11: LEXER: Found symbol: '#55' with value: 'Point'
DEBUG - semantic_errors_C.mj:19:17: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - semantic_errors_C.mj:19:25: LEXER: Found symbol: '#55' with value: 'IPoint'
DEBUG - semantic_errors_C.mj:19:32: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:20:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:20:16: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:20:20: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:20:21: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:20:23: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:20:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:21:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:22:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:22:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:22:24: LEXER: Found symbol: '#55' with value: 'get_x'
DEBUG - semantic_errors_C.mj:22:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:22:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:22:32: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:22:34: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:22:41: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:22:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:22:44: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:23:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:23:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:23:24: LEXER: Found symbol: '#55' with value: 'diff_x'
DEBUG - semantic_errors_C.mj:23:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:23:31: LEXER: Found symbol: '#55' with value: 'IPoint'
DEBUG - semantic_errors_C.mj:23:38: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:23:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:23:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:23:43: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:23:50: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:23:51: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:23:52: LEXER: Found symbol: '#55' with value: 'get_x'
DEBUG - semantic_errors_C.mj:23:57: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:23:58: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:23:60: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_C.mj:23:62: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:23:63: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:23:65: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:24:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:25:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:28:5: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:28:14: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:28:20: LEXER: Found symbol: '#55' with value: 'IPoint'
DEBUG - semantic_errors_C.mj:28:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:29:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:29:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:29:21: LEXER: Found symbol: '#55' with value: 'd'
DEBUG - semantic_errors_C.mj:29:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:30:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:31:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:31:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:31:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:31:33: LEXER: Found symbol: '#55' with value: 'get_x'
DEBUG - semantic_errors_C.mj:31:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:31:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:31:40: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:32:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:32:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:32:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:32:33: LEXER: Found symbol: '#55' with value: 'diff_x'
DEBUG - semantic_errors_C.mj:32:39: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:32:40: LEXER: Found symbol: '#55' with value: 'IPoint'
DEBUG - semantic_errors_C.mj:32:47: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:32:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:32:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:33:13: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:33:21: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:33:30: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:33:35: LEXER: Found symbol: '#55' with value: 'test'
DEBUG - semantic_errors_C.mj:33:39: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:33:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:33:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:34:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:35:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:37:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - semantic_errors_C.mj:37:11: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:37:16: LEXER: Found symbol: '#55' with value: 'SPACE'
DEBUG - semantic_errors_C.mj:37:22: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:37:24: LEXER: Found symbol: '#53' with value: ' '
DEBUG - semantic_errors_C.mj:37:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:39:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:39:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:39:10: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:39:12: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:39:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:41:5: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:41:14: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:41:20: LEXER: Found symbol: '#55' with value: 'Object'
DEBUG - semantic_errors_C.mj:41:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:42:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:43:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:43:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:43:29: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:43:34: LEXER: Found symbol: '#55' with value: 'println'
DEBUG - semantic_errors_C.mj:43:41: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:43:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:43:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:44:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:45:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:47:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:47:11: LEXER: Found symbol: '#55' with value: 'Point'
DEBUG - semantic_errors_C.mj:47:17: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - semantic_errors_C.mj:47:25: LEXER: Found symbol: '#55' with value: 'Object'
DEBUG - semantic_errors_C.mj:48:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:49:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:49:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:49:21: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:49:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:49:24: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:49:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:50:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:51:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:51:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:51:24: LEXER: Found symbol: '#55' with value: 'getX'
DEBUG - semantic_errors_C.mj:51:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:51:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:51:31: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:51:33: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:51:40: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:51:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:51:43: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:52:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:52:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:52:25: LEXER: Found symbol: '#55' with value: 'setX'
DEBUG - semantic_errors_C.mj:52:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:52:30: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:52:34: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:52:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:52:37: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:52:39: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - semantic_errors_C.mj:52:43: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:52:44: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:52:46: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:52:48: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:52:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:52:51: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:54:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:54:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:54:24: LEXER: Found symbol: '#55' with value: 'getY'
DEBUG - semantic_errors_C.mj:54:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:54:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:54:31: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:54:33: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:54:40: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:54:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:54:43: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:55:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:55:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:55:25: LEXER: Found symbol: '#55' with value: 'setY'
DEBUG - semantic_errors_C.mj:55:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:55:30: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:55:34: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:55:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:55:37: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:55:39: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - semantic_errors_C.mj:55:43: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:55:44: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:55:46: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:55:48: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:55:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:55:51: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:57:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:57:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:57:25: LEXER: Found symbol: '#55' with value: 'println'
DEBUG - semantic_errors_C.mj:57:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:57:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:57:35: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:58:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:58:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:58:23: LEXER: Found symbol: '#55' with value: 'd'
DEBUG - semantic_errors_C.mj:58:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:58:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:59:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:59:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:59:23: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:59:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:59:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:60:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:60:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:60:23: LEXER: Found symbol: '#55' with value: 'SPACE'
DEBUG - semantic_errors_C.mj:60:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:60:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:61:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:61:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:61:23: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:61:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:61:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:62:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:62:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:62:23: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - semantic_errors_C.mj:62:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:62:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:63:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:65:13: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:65:21: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:65:26: LEXER: Found symbol: '#55' with value: 'test'
DEBUG - semantic_errors_C.mj:65:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:65:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:65:33: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:65:34: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:66:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:67:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:69:5: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:69:14: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:69:20: LEXER: Found symbol: '#55' with value: 'abstract_class'
DEBUG - semantic_errors_C.mj:69:35: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:70:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:70:16: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:70:20: LEXER: Found symbol: '#55' with value: 'abstract_class_public_field'
DEBUG - semantic_errors_C.mj:70:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:71:9: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - semantic_errors_C.mj:71:19: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:71:24: LEXER: Found symbol: '#55' with value: 'abstract_class_protected_field'
DEBUG - semantic_errors_C.mj:71:54: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:72:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:72:17: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:72:22: LEXER: Found symbol: '#55' with value: 'abstract_class_private_field'
DEBUG - semantic_errors_C.mj:72:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:73:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:74:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:74:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:74:29: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:74:34: LEXER: Found symbol: '#55' with value: 'public_method'
DEBUG - semantic_errors_C.mj:74:47: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:74:48: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:74:52: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:74:53: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:74:55: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:74:59: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:74:60: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:74:61: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:75:13: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - semantic_errors_C.mj:75:23: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:75:32: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:75:37: LEXER: Found symbol: '#55' with value: 'protected_method'
DEBUG - semantic_errors_C.mj:75:53: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:75:54: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:75:59: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:75:60: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:75:61: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:76:13: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:76:21: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - semantic_errors_C.mj:76:30: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:76:35: LEXER: Found symbol: '#55' with value: 'private_method'
DEBUG - semantic_errors_C.mj:76:49: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:76:50: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:76:55: LEXER: Found symbol: '#55' with value: 'ind'
DEBUG - semantic_errors_C.mj:76:58: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:76:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:77:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:78:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:80:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:80:11: LEXER: Found symbol: '#55' with value: 'concrete_class'
DEBUG - semantic_errors_C.mj:80:26: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - semantic_errors_C.mj:80:34: LEXER: Found symbol: '#55' with value: 'abstract_class'
DEBUG - semantic_errors_C.mj:80:49: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:82:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:82:16: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:82:20: LEXER: Found symbol: '#55' with value: 'class_var_a'
DEBUG - semantic_errors_C.mj:82:31: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:82:33: LEXER: Found symbol: '#55' with value: 'class_var_b'
DEBUG - semantic_errors_C.mj:82:44: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:82:45: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:82:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:83:9: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - semantic_errors_C.mj:83:19: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:83:24: LEXER: Found symbol: '#55' with value: 'class_var_c'
DEBUG - semantic_errors_C.mj:83:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:84:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:84:17: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:84:22: LEXER: Found symbol: '#55' with value: 'class_var_d'
DEBUG - semantic_errors_C.mj:84:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:85:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:87:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:87:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:87:25: LEXER: Found symbol: '#55' with value: 'public_method'
DEBUG - semantic_errors_C.mj:87:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:87:39: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:87:43: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:87:44: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:87:46: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:87:50: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:87:51: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:88:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:88:21: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:88:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:89:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:90:17: LEXER: Found symbol: '#55' with value: 'abstract_class_public_field'
DEBUG - semantic_errors_C.mj:90:45: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:90:47: LEXER: Found symbol: '#52' with value: '12'
DEBUG - semantic_errors_C.mj:90:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:91:17: LEXER: Found symbol: '#55' with value: 'abstract_class_protected_field'
DEBUG - semantic_errors_C.mj:91:48: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:91:50: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - semantic_errors_C.mj:91:53: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:92:17: LEXER: Found symbol: '#55' with value: 'abstract_class_private_field'
DEBUG - semantic_errors_C.mj:92:46: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:92:48: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_C.mj:92:53: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:93:17: LEXER: Found symbol: '#55' with value: 'class_var_a'
DEBUG - semantic_errors_C.mj:93:29: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:93:31: LEXER: Found symbol: '#52' with value: '15'
DEBUG - semantic_errors_C.mj:93:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:94:17: LEXER: Found symbol: '#55' with value: 'class_var_c'
DEBUG - semantic_errors_C.mj:94:29: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:94:31: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - semantic_errors_C.mj:94:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:95:17: LEXER: Found symbol: '#55' with value: 'class_var_d'
DEBUG - semantic_errors_C.mj:95:29: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:95:31: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_C.mj:95:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:96:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:98:13: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - semantic_errors_C.mj:98:23: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:98:28: LEXER: Found symbol: '#55' with value: 'protected_method'
DEBUG - semantic_errors_C.mj:98:44: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:98:45: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:98:50: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:98:51: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:98:53: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:98:54: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:100:13: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:100:21: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:100:26: LEXER: Found symbol: '#55' with value: 'private_method'
DEBUG - semantic_errors_C.mj:100:40: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:100:41: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:100:46: LEXER: Found symbol: '#55' with value: 'ind'
DEBUG - semantic_errors_C.mj:100:49: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:100:51: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:100:52: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:101:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:102:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:104:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - semantic_errors_C.mj:104:11: LEXER: Found symbol: '#55' with value: 'test_class'
DEBUG - semantic_errors_C.mj:104:22: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:106:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:106:16: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:106:20: LEXER: Found symbol: '#55' with value: 'class_var_a'
DEBUG - semantic_errors_C.mj:106:31: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:106:33: LEXER: Found symbol: '#55' with value: 'class_var_b'
DEBUG - semantic_errors_C.mj:106:44: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:106:45: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:106:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:107:9: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - semantic_errors_C.mj:107:19: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:107:24: LEXER: Found symbol: '#55' with value: 'class_var_c'
DEBUG - semantic_errors_C.mj:107:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:108:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - semantic_errors_C.mj:108:17: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:108:22: LEXER: Found symbol: '#55' with value: 'class_var_d'
DEBUG - semantic_errors_C.mj:108:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:109:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:110:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - semantic_errors_C.mj:110:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:110:25: LEXER: Found symbol: '#55' with value: 'test_method'
DEBUG - semantic_errors_C.mj:110:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:110:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:110:39: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:110:40: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:111:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:112:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:113:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:114:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:114:9: LEXER: Found symbol: '#55' with value: 'k'
DEBUG - semantic_errors_C.mj:114:10: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:114:11: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:115:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:115:13: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:115:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:116:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:117:9: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:117:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:117:13: LEXER: Found symbol: '#52' with value: '1'
DEBUG - semantic_errors_C.mj:117:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:118:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:118:16: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:118:18: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_C.mj:118:20: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_C.mj:118:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:119:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:121:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:121:10: LEXER: Found symbol: '#55' with value: 'printArray'
DEBUG - semantic_errors_C.mj:121:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:121:21: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:121:25: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:121:28: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:121:29: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:121:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:122:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:122:13: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_C.mj:122:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:123:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:124:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - semantic_errors_C.mj:124:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:124:18: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_C.mj:124:21: LEXER: Found symbol: '#48' with value: ':'
DEBUG - semantic_errors_C.mj:124:23: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:124:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:124:28: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:125:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:125:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:125:19: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - semantic_errors_C.mj:125:21: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:125:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:126:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:126:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:126:19: LEXER: Found symbol: '#55' with value: 'SPACE'
DEBUG - semantic_errors_C.mj:126:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:126:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:127:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:128:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:128:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:128:15: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - semantic_errors_C.mj:128:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:128:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:129:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:131:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:131:9: LEXER: Found symbol: '#55' with value: 'calc'
DEBUG - semantic_errors_C.mj:131:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:131:14: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:131:18: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:131:19: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:131:21: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:131:25: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:131:26: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:131:28: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:131:33: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:131:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:131:36: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:132:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_C.mj:132:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:132:13: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:132:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:132:16: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:132:23: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:132:25: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_C.mj:132:27: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:132:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:133:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - semantic_errors_C.mj:133:16: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:133:18: LEXER: Found symbol: '#24' with value: '*'
DEBUG - semantic_errors_C.mj:133:20: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:133:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:134:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:136:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:136:10: LEXER: Found symbol: '#55' with value: 'test'
DEBUG - semantic_errors_C.mj:136:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:136:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:138:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:138:13: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:138:24: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:138:26: LEXER: Found symbol: '#55' with value: 'local_var_b'
DEBUG - semantic_errors_C.mj:138:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:138:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:138:39: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:138:41: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:138:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:139:9: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:139:14: LEXER: Found symbol: '#55' with value: 'local_var_c'
DEBUG - semantic_errors_C.mj:139:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:140:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:140:14: LEXER: Found symbol: '#55' with value: 'local_var_d'
DEBUG - semantic_errors_C.mj:140:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:140:27: LEXER: Found symbol: '#55' with value: 'local_var_e'
DEBUG - semantic_errors_C.mj:140:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:140:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:140:40: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:141:9: LEXER: Found symbol: '#55' with value: 'test_class'
DEBUG - semantic_errors_C.mj:141:20: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:141:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:142:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:143:9: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:143:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:143:23: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:143:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:144:9: LEXER: Found symbol: '#55' with value: 'local_var_b'
DEBUG - semantic_errors_C.mj:144:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:144:23: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_C.mj:144:27: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:144:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:144:31: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_C.mj:144:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:144:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:145:9: LEXER: Found symbol: '#55' with value: 'local_var_c'
DEBUG - semantic_errors_C.mj:145:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:145:23: LEXER: Found symbol: '#55' with value: 'd'
DEBUG - semantic_errors_C.mj:145:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:146:9: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:146:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:146:25: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_C.mj:146:29: LEXER: Found symbol: '#55' with value: 'test_class'
DEBUG - semantic_errors_C.mj:146:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:148:9: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:148:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:148:23: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:148:36: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:148:37: LEXER: Found symbol: '#55' with value: 'class_var_a'
DEBUG - semantic_errors_C.mj:148:48: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:149:9: LEXER: Found symbol: '#55' with value: 'local_var_b'
DEBUG - semantic_errors_C.mj:149:20: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:149:21: LEXER: Found symbol: '#52' with value: '3'
DEBUG - semantic_errors_C.mj:149:22: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:149:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:149:26: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:149:39: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:149:40: LEXER: Found symbol: '#55' with value: 'class_var_b'
DEBUG - semantic_errors_C.mj:149:51: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:149:52: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_C.mj:149:53: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:149:54: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:150:9: LEXER: Found symbol: '#55' with value: 'local_var_c'
DEBUG - semantic_errors_C.mj:150:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:150:23: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:150:36: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:150:37: LEXER: Found symbol: '#55' with value: 'class_var_c'
DEBUG - semantic_errors_C.mj:150:48: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:151:9: LEXER: Found symbol: '#55' with value: 'local_var_d'
DEBUG - semantic_errors_C.mj:151:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:151:23: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:151:36: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:151:37: LEXER: Found symbol: '#55' with value: 'class_var_d'
DEBUG - semantic_errors_C.mj:151:48: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:152:9: LEXER: Found symbol: '#55' with value: 'local_var_obj'
DEBUG - semantic_errors_C.mj:152:22: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:152:23: LEXER: Found symbol: '#55' with value: 'test_method'
DEBUG - semantic_errors_C.mj:152:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:152:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:152:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:154:9: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:154:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:154:23: LEXER: Found symbol: '#55' with value: 'calc'
DEBUG - semantic_errors_C.mj:154:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:154:28: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:154:39: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:154:41: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:154:52: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:154:54: LEXER: Found symbol: '#55' with value: 'local_var_d'
DEBUG - semantic_errors_C.mj:154:65: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:154:66: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:155:9: LEXER: Found symbol: '#55' with value: 'calc'
DEBUG - semantic_errors_C.mj:155:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:155:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:155:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:156:9: LEXER: Found symbol: '#55' with value: 'calc'
DEBUG - semantic_errors_C.mj:156:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:156:14: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:156:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:156:27: LEXER: Found symbol: '#55' with value: 'local_var_d'
DEBUG - semantic_errors_C.mj:156:38: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:156:40: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:156:51: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:156:52: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:157:9: LEXER: Found symbol: '#55' with value: 'local_var_b'
DEBUG - semantic_errors_C.mj:157:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:157:23: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_C.mj:157:27: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:157:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:157:31: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:157:33: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_C.mj:157:35: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:157:36: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:157:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:158:9: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - semantic_errors_C.mj:158:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:159:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - semantic_errors_C.mj:159:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:159:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:159:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:159:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_C.mj:159:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:159:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:159:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - semantic_errors_C.mj:159:25: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:159:27: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_C.mj:159:29: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:159:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:159:32: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:159:33: LEXER: Found symbol: '#27' with value: '++'
DEBUG - semantic_errors_C.mj:159:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:159:37: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:160:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - semantic_errors_C.mj:160:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:160:17: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:160:19: LEXER: Found symbol: '#26' with value: '%'
DEBUG - semantic_errors_C.mj:160:21: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_C.mj:160:23: LEXER: Found symbol: '#29' with value: '=='
DEBUG - semantic_errors_C.mj:160:26: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_C.mj:160:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:160:29: LEXER: Found symbol: '#55' with value: 'local_var_c'
DEBUG - semantic_errors_C.mj:160:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:160:43: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - semantic_errors_C.mj:160:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:161:13: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - semantic_errors_C.mj:161:18: LEXER: Found symbol: '#55' with value: 'local_var_c'
DEBUG - semantic_errors_C.mj:161:30: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:161:32: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_C.mj:161:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:162:13: LEXER: Found symbol: '#55' with value: 'local_var_b'
DEBUG - semantic_errors_C.mj:162:24: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:162:25: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:162:26: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:162:28: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:162:30: LEXER: Found symbol: '#55' with value: 'calc'
DEBUG - semantic_errors_C.mj:162:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:162:35: LEXER: Found symbol: '#55' with value: 'local_var_a'
DEBUG - semantic_errors_C.mj:162:46: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:162:48: LEXER: Found symbol: '#55' with value: 'local_var_b'
DEBUG - semantic_errors_C.mj:162:59: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:162:60: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:162:61: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:162:62: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:162:64: LEXER: Found symbol: '#55' with value: 'local_var_c'
DEBUG - semantic_errors_C.mj:162:75: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:162:76: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:163:13: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - semantic_errors_C.mj:163:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:164:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:165:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:167:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - semantic_errors_C.mj:167:10: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - semantic_errors_C.mj:167:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:167:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:168:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:168:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:168:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:168:16: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:168:19: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:168:20: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:168:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:169:9: LEXER: Found symbol: '#55' with value: 'Point'
DEBUG - semantic_errors_C.mj:169:15: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - semantic_errors_C.mj:169:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:170:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:170:13: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:170:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:170:16: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:170:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:171:9: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - semantic_errors_C.mj:171:14: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:171:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:172:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - semantic_errors_C.mj:172:14: LEXER: Found symbol: '#55' with value: 'ind'
DEBUG - semantic_errors_C.mj:172:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:173:9: LEXER: Found symbol: '#55' with value: 'abstract_class'
DEBUG - semantic_errors_C.mj:173:24: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:173:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:174:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:175:9: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:175:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:175:13: LEXER: Found symbol: '#52' with value: '4'
DEBUG - semantic_errors_C.mj:175:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:176:9: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:176:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:176:13: LEXER: Found symbol: '#52' with value: '15'
DEBUG - semantic_errors_C.mj:176:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:177:9: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:177:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:177:13: LEXER: Found symbol: '#53' with value: 'b'
DEBUG - semantic_errors_C.mj:177:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:178:9: LEXER: Found symbol: '#55' with value: 'ind'
DEBUG - semantic_errors_C.mj:178:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:178:15: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_C.mj:178:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:179:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:179:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:179:15: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_C.mj:179:19: LEXER: Found symbol: '#55' with value: 'concrete_class'
DEBUG - semantic_errors_C.mj:179:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:180:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:180:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:180:13: LEXER: Found symbol: '#55' with value: 'class_var_a'
DEBUG - semantic_errors_C.mj:180:25: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:180:27: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_C.mj:180:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:181:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:181:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:181:13: LEXER: Found symbol: '#55' with value: 'abstract_class_public_field'
DEBUG - semantic_errors_C.mj:181:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:181:43: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_C.mj:181:44: LEXER: Found symbol: '#52' with value: '5'
DEBUG - semantic_errors_C.mj:181:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:182:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:182:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:182:13: LEXER: Found symbol: '#55' with value: 'class_var_c'
DEBUG - semantic_errors_C.mj:182:25: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:182:27: LEXER: Found symbol: '#53' with value: 'b'
DEBUG - semantic_errors_C.mj:182:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:183:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:183:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:183:13: LEXER: Found symbol: '#55' with value: 'class_var_d'
DEBUG - semantic_errors_C.mj:183:25: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:183:27: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - semantic_errors_C.mj:183:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:184:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:184:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:184:13: LEXER: Found symbol: '#55' with value: 'public_method'
DEBUG - semantic_errors_C.mj:184:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:184:27: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - semantic_errors_C.mj:184:28: LEXER: Found symbol: '#50' with value: ','
DEBUG - semantic_errors_C.mj:184:30: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:184:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:184:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:185:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:185:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:185:13: LEXER: Found symbol: '#55' with value: 'protected_method'
DEBUG - semantic_errors_C.mj:185:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:185:30: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - semantic_errors_C.mj:185:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:185:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:186:9: LEXER: Found symbol: '#55' with value: 'var'
DEBUG - semantic_errors_C.mj:186:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:186:13: LEXER: Found symbol: '#55' with value: 'private_method'
DEBUG - semantic_errors_C.mj:186:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:186:28: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - semantic_errors_C.mj:186:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:186:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:187:9: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:187:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:187:13: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_C.mj:187:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:188:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:188:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:188:15: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:188:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:188:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:188:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:188:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:188:25: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - semantic_errors_C.mj:188:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:188:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:189:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:189:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:189:13: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:189:15: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_C.mj:189:17: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_C.mj:189:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:190:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:190:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:190:15: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:190:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:190:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:190:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:190:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:190:25: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - semantic_errors_C.mj:190:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:190:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:191:9: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:191:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:191:13: LEXER: Found symbol: '#55' with value: 'k'
DEBUG - semantic_errors_C.mj:191:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:191:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:191:17: LEXER: Found symbol: '#22' with value: '+'
DEBUG - semantic_errors_C.mj:191:19: LEXER: Found symbol: '#52' with value: '3'
DEBUG - semantic_errors_C.mj:191:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:192:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - semantic_errors_C.mj:192:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:192:15: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:192:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:192:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:193:9: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - semantic_errors_C.mj:193:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:193:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_C.mj:193:17: LEXER: Found symbol: '#55' with value: 'Point'
DEBUG - semantic_errors_C.mj:193:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:194:9: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - semantic_errors_C.mj:194:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:194:11: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:194:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:194:15: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - semantic_errors_C.mj:194:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:195:9: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - semantic_errors_C.mj:195:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:195:11: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:195:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:195:15: LEXER: Found symbol: '#55' with value: 'y'
DEBUG - semantic_errors_C.mj:195:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:196:9: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - semantic_errors_C.mj:196:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - semantic_errors_C.mj:196:11: LEXER: Found symbol: '#55' with value: 'printPoint'
DEBUG - semantic_errors_C.mj:196:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:196:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:196:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:197:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:197:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:197:15: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - semantic_errors_C.mj:197:19: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - semantic_errors_C.mj:197:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:197:23: LEXER: Found symbol: '#52' with value: '6'
DEBUG - semantic_errors_C.mj:197:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:197:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:198:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - semantic_errors_C.mj:198:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:198:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:198:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:198:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - semantic_errors_C.mj:198:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:198:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:198:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - semantic_errors_C.mj:198:25: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - semantic_errors_C.mj:198:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:198:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:198:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:198:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:198:35: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:198:36: LEXER: Found symbol: '#27' with value: '++'
DEBUG - semantic_errors_C.mj:198:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:198:40: LEXER: Found symbol: '#46' with value: '{'
DEBUG - semantic_errors_C.mj:199:13: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:199:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - semantic_errors_C.mj:199:17: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:199:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - semantic_errors_C.mj:199:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - semantic_errors_C.mj:199:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - semantic_errors_C.mj:199:24: LEXER: Found symbol: '#24' with value: '*'
DEBUG - semantic_errors_C.mj:199:26: LEXER: Found symbol: '#52' with value: '7'
DEBUG - semantic_errors_C.mj:199:28: LEXER: Found symbol: '#23' with value: '-'
DEBUG - semantic_errors_C.mj:199:30: LEXER: Found symbol: '#52' with value: '2'
DEBUG - semantic_errors_C.mj:199:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:200:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:201:9: LEXER: Found symbol: '#55' with value: 'printArray'
DEBUG - semantic_errors_C.mj:201:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - semantic_errors_C.mj:201:20: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - semantic_errors_C.mj:201:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - semantic_errors_C.mj:201:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - semantic_errors_C.mj:202:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:203:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - semantic_errors_C.mj:203:2: LEXER: Found symbol: '#0' with value: ''
DEBUG - semantic_errors_C.mj:203:2: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree:
Program(
  ProgramHeader(
   level_c_semantic_errors
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    MultipleProgramDeclarations(
      MultipleProgramDeclarations(
        MultipleProgramDeclarations(
          MultipleProgramDeclarations(
            MultipleProgramDeclarations(
              MultipleProgramDeclarations(
                MultipleProgramDeclarations(
                  MultipleProgramDeclarations(
                    MultipleProgramDeclarations(
                      MultipleProgramDeclarations(
                        MultipleProgramDeclarations(
                          MultipleProgramDeclarations(
                            MultipleProgramDeclarations(
                              MultipleProgramDeclarations(
                                MultipleProgramDeclarations(
                                  MultipleProgramDeclarations(
                                    MultipleProgramDeclarations(
                                      MultipleProgramDeclarations(
                                        MultipleProgramDeclarations(
                                          NoProgramDeclarations(
                                          ) [NoProgramDeclarations]
                                          ConstProgramDeclaration(
                                            ConstDeclaration(
                                              Type(
                                               int
                                              ) [Type]
                                              MultipleConstAssignments(
                                                MultipleConstAssignments(
                                                  SingleConstAssignment(
                                                    ConstAssignment(
                                                     a
                                                      IntConst(
                                                        NoSign(
                                                        ) [NoSign]
                                                       20
                                                      ) [IntConst]
                                                    ) [ConstAssignment]
                                                  ) [SingleConstAssignment]
                                                  ConstAssignment(
                                                   b
                                                    IntConst(
                                                      MinusSign(
                                                      ) [MinusSign]
                                                     1
                                                    ) [IntConst]
                                                  ) [ConstAssignment]
                                                ) [MultipleConstAssignments]
                                                ConstAssignment(
                                                 c
                                                  IntConst(
                                                    PlusSign(
                                                    ) [PlusSign]
                                                   25
                                                  ) [IntConst]
                                                ) [ConstAssignment]
                                              ) [MultipleConstAssignments]
                                            ) [ConstDeclaration]
                                          ) [ConstProgramDeclaration]
                                        ) [MultipleProgramDeclarations]
                                        ConstProgramDeclaration(
                                          ConstDeclaration(
                                            Type(
                                             char
                                            ) [Type]
                                            SingleConstAssignment(
                                              ConstAssignment(
                                               d
                                                CharConst(
                                                 a
                                                ) [CharConst]
                                              ) [ConstAssignment]
                                            ) [SingleConstAssignment]
                                          ) [ConstDeclaration]
                                        ) [ConstProgramDeclaration]
                                      ) [MultipleProgramDeclarations]
                                      ConstProgramDeclaration(
                                        ConstDeclaration(
                                          Type(
                                           bool
                                          ) [Type]
                                          MultipleConstAssignments(
                                            SingleConstAssignment(
                                              ConstAssignment(
                                               e
                                                BoolConst(
                                                 true
                                                ) [BoolConst]
                                              ) [ConstAssignment]
                                            ) [SingleConstAssignment]
                                            ConstAssignment(
                                             f
                                              BoolConst(
                                               false
                                              ) [BoolConst]
                                            ) [ConstAssignment]
                                          ) [MultipleConstAssignments]
                                        ) [ConstDeclaration]
                                      ) [ConstProgramDeclaration]
                                    ) [MultipleProgramDeclarations]
                                    ConstProgramDeclaration(
                                      ConstDeclaration(
                                        Type(
                                         int
                                        ) [Type]
                                        MultipleConstAssignments(
                                          MultipleConstAssignments(
                                            SingleConstAssignment(
                                              ConstAssignment(
                                               A
                                                IntConst(
                                                  NoSign(
                                                  ) [NoSign]
                                                 1
                                                ) [IntConst]
                                              ) [ConstAssignment]
                                            ) [SingleConstAssignment]
                                            ConstAssignment(
                                             B
                                              IntConst(
                                                NoSign(
                                                ) [NoSign]
                                               2
                                              ) [IntConst]
                                            ) [ConstAssignment]
                                          ) [MultipleConstAssignments]
                                          ConstAssignment(
                                           C
                                            IntConst(
                                              NoSign(
                                              ) [NoSign]
                                             3
                                            ) [IntConst]
                                          ) [ConstAssignment]
                                        ) [MultipleConstAssignments]
                                      ) [ConstDeclaration]
                                    ) [ConstProgramDeclaration]
                                  ) [MultipleProgramDeclarations]
                                  ConstProgramDeclaration(
                                    ConstDeclaration(
                                      Type(
                                       char
                                      ) [Type]
                                      MultipleConstAssignments(
                                        SingleConstAssignment(
                                          ConstAssignment(
                                           X
                                            CharConst(
                                             x
                                            ) [CharConst]
                                          ) [ConstAssignment]
                                        ) [SingleConstAssignment]
                                        ConstAssignment(
                                         Y
                                          CharConst(
                                           y
                                          ) [CharConst]
                                        ) [ConstAssignment]
                                      ) [MultipleConstAssignments]
                                    ) [ConstDeclaration]
                                  ) [ConstProgramDeclaration]
                                ) [MultipleProgramDeclarations]
                                ConstProgramDeclaration(
                                  ConstDeclaration(
                                    Type(
                                     bool
                                    ) [Type]
                                    SingleConstAssignment(
                                      ConstAssignment(
                                       VALID
                                        BoolConst(
                                         true
                                        ) [BoolConst]
                                      ) [ConstAssignment]
                                    ) [SingleConstAssignment]
                                  ) [ConstDeclaration]
                                ) [ConstProgramDeclaration]
                              ) [MultipleProgramDeclarations]
                              VarProgramDeclaration(
                                VarDeclaration(
                                  Type(
                                   int
                                  ) [Type]
                                  MultipleVariables(
                                    SingleVariable(
                                      Variable(
                                       var_a
                                        NoArrayBrackets(
                                        ) [NoArrayBrackets]
                                      ) [Variable]
                                    ) [SingleVariable]
                                    Variable(
                                     var_b
                                      ArrayBrackets(
                                      ) [ArrayBrackets]
                                    ) [Variable]
                                  ) [MultipleVariables]
                                ) [VarDeclaration]
                              ) [VarProgramDeclaration]
                            ) [MultipleProgramDeclarations]
                            VarProgramDeclaration(
                              VarDeclaration(
                                Type(
                                 char
                                ) [Type]
                                MultipleVariables(
                                  MultipleVariables(
                                    SingleVariable(
                                      Variable(
                                       var_c
                                        NoArrayBrackets(
                                        ) [NoArrayBrackets]
                                      ) [Variable]
                                    ) [SingleVariable]
                                    Variable(
                                     var_d
                                      ArrayBrackets(
                                      ) [ArrayBrackets]
                                    ) [Variable]
                                  ) [MultipleVariables]
                                  Variable(
                                   var_e
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [Variable]
                                ) [MultipleVariables]
                              ) [VarDeclaration]
                            ) [VarProgramDeclaration]
                          ) [MultipleProgramDeclarations]
                          VarProgramDeclaration(
                            VarDeclaration(
                              Type(
                               bool
                              ) [Type]
                              SingleVariable(
                                Variable(
                                 var_f
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [Variable]
                              ) [SingleVariable]
                            ) [VarDeclaration]
                          ) [VarProgramDeclaration]
                        ) [MultipleProgramDeclarations]
                        VarProgramDeclaration(
                          VarDeclaration(
                            Type(
                             int
                            ) [Type]
                            MultipleVariables(
                              MultipleVariables(
                                SingleVariable(
                                  Variable(
                                   a
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [Variable]
                                ) [SingleVariable]
                                Variable(
                                 b
                                  ArrayBrackets(
                                  ) [ArrayBrackets]
                                ) [Variable]
                              ) [MultipleVariables]
                              Variable(
                               c
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [Variable]
                            ) [MultipleVariables]
                          ) [VarDeclaration]
                        ) [VarProgramDeclaration]
                      ) [MultipleProgramDeclarations]
                      VarProgramDeclaration(
                        VarDeclaration(
                          Type(
                           Point
                          ) [Type]
                          MultipleVariables(
                            SingleVariable(
                              Variable(
                               p1
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [Variable]
                            ) [SingleVariable]
                            Variable(
                             p2
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [Variable]
                          ) [MultipleVariables]
                        ) [VarDeclaration]
                      ) [VarProgramDeclaration]
                    ) [MultipleProgramDeclarations]
                    ClassProgramDeclaration(
                      ClassDeclaration(
                        ClassHeader(
                         Point
                          ClassBaseType(
                            Type(
                             IPoint
                            ) [Type]
                          ) [ClassBaseType]
                        ) [ClassHeader]
                        MultipleClassVarDeclarations(
                          NoClassVarDeclarations(
                          ) [NoClassVarDeclarations]
                          ClassVarDeclaration(
                            PublicAccessModifier(
                            ) [PublicAccessModifier]
                            Type(
                             int
                            ) [Type]
                            MultipleClassVariables(
                              SingleClassVariable(
                                ClassVariable(
                                 x
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [ClassVariable]
                              ) [SingleClassVariable]
                              ClassVariable(
                               y
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [ClassVariable]
                            ) [MultipleClassVariables]
                          ) [ClassVarDeclaration]
                        ) [MultipleClassVarDeclarations]
                        ClassMethodDeclarations(
                          MultipleClassMethodDeclarations(
                            SingleClassMethodDeclaration(
                              ClassMethodDeclaration(
                                PublicAccessModifier(
                                ) [PublicAccessModifier]
                                MethodDeclaration(
                                  MethodHeader(
                                    ReturnType(
                                      Type(
                                       int
                                      ) [Type]
                                    ) [ReturnType]
                                   get_x
                                  ) [MethodHeader]
                                  NoFormalParameters(
                                  ) [NoFormalParameters]
                                  NoLocalVarDeclarations(
                                  ) [NoLocalVarDeclarations]
                                  MethodStatementListStart(
                                  ) [MethodStatementListStart]
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    ReturnStatement(
                                      ReturnValue(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 x
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ReturnValue]
                                    ) [ReturnStatement]
                                  ) [MultipleStatements]
                                ) [MethodDeclaration]
                              ) [ClassMethodDeclaration]
                            ) [SingleClassMethodDeclaration]
                            ClassMethodDeclaration(
                              PublicAccessModifier(
                              ) [PublicAccessModifier]
                              MethodDeclaration(
                                MethodHeader(
                                  ReturnType(
                                    Type(
                                     int
                                    ) [Type]
                                  ) [ReturnType]
                                 diff_x
                                ) [MethodHeader]
                                FormalParameters(
                                  SingleFormalParameter(
                                    FormalParameter(
                                      Type(
                                       IPoint
                                      ) [Type]
                                     a
                                      NoArrayBrackets(
                                      ) [NoArrayBrackets]
                                    ) [FormalParameter]
                                  ) [SingleFormalParameter]
                                ) [FormalParameters]
                                NoLocalVarDeclarations(
                                ) [NoLocalVarDeclarations]
                                MethodStatementListStart(
                                ) [MethodStatementListStart]
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  ReturnStatement(
                                    ReturnValue(
                                      LeftExpression(
                                        MultipleTermsExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              MethodCallFactor(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       a
                                                      ) [IdentifierDesignator]
                                                     get_x
                                                    ) [MemberAccessDesignator]
                                                  ) [MethodCallHeader]
                                                  NoActualParameters(
                                                  ) [NoActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                          SubOperator(
                                          ) [SubOperator]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               x
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [MultipleTermsExpression]
                                      ) [LeftExpression]
                                    ) [ReturnValue]
                                  ) [ReturnStatement]
                                ) [MultipleStatements]
                              ) [MethodDeclaration]
                            ) [ClassMethodDeclaration]
                          ) [MultipleClassMethodDeclarations]
                        ) [ClassMethodDeclarations]
                      ) [ClassDeclaration]
                    ) [ClassProgramDeclaration]
                  ) [MultipleProgramDeclarations]
                  AbstractClassProgramDeclaration(
                    AbstractClassDeclaration(
                      AbstractClassHeader(
                       IPoint
                        NoClassBaseType(
                        ) [NoClassBaseType]
                      ) [AbstractClassHeader]
                      MultipleClassVarDeclarations(
                        NoClassVarDeclarations(
                        ) [NoClassVarDeclarations]
                        ClassVarDeclaration(
                          PrivateAccessModifier(
                          ) [PrivateAccessModifier]
                          Type(
                           int
                          ) [Type]
                          SingleClassVariable(
                            ClassVariable(
                             d
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [ClassVariable]
                          ) [SingleClassVariable]
                        ) [ClassVarDeclaration]
                      ) [MultipleClassVarDeclarations]
                      AbstractClassMethods(
                        MultipleAbstractClassMethods(
                          MultipleAbstractClassMethods(
                            SingleAbstractClassMethod(
                              AbstractClassAbstractMethodDeclaration(
                                PublicAccessModifier(
                                ) [PublicAccessModifier]
                                AbstractMethodDeclaration(
                                  AbstractMethodHeader(
                                    ReturnType(
                                      Type(
                                       int
                                      ) [Type]
                                    ) [ReturnType]
                                   get_x
                                  ) [AbstractMethodHeader]
                                  NoFormalParameters(
                                  ) [NoFormalParameters]
                                ) [AbstractMethodDeclaration]
                              ) [AbstractClassAbstractMethodDeclaration]
                            ) [SingleAbstractClassMethod]
                            AbstractClassAbstractMethodDeclaration(
                              PublicAccessModifier(
                              ) [PublicAccessModifier]
                              AbstractMethodDeclaration(
                                AbstractMethodHeader(
                                  ReturnType(
                                    Type(
                                     int
                                    ) [Type]
                                  ) [ReturnType]
                                 diff_x
                                ) [AbstractMethodHeader]
                                FormalParameters(
                                  SingleFormalParameter(
                                    FormalParameter(
                                      Type(
                                       IPoint
                                      ) [Type]
                                     a
                                      NoArrayBrackets(
                                      ) [NoArrayBrackets]
                                    ) [FormalParameter]
                                  ) [SingleFormalParameter]
                                ) [FormalParameters]
                              ) [AbstractMethodDeclaration]
                            ) [AbstractClassAbstractMethodDeclaration]
                          ) [MultipleAbstractClassMethods]
                          AbstractClassAbstractMethodDeclaration(
                            PrivateAccessModifier(
                            ) [PrivateAccessModifier]
                            AbstractMethodDeclaration(
                              AbstractMethodHeader(
                                ReturnVoid(
                                ) [ReturnVoid]
                               test
                              ) [AbstractMethodHeader]
                              NoFormalParameters(
                              ) [NoFormalParameters]
                            ) [AbstractMethodDeclaration]
                          ) [AbstractClassAbstractMethodDeclaration]
                        ) [MultipleAbstractClassMethods]
                      ) [AbstractClassMethods]
                    ) [AbstractClassDeclaration]
                  ) [AbstractClassProgramDeclaration]
                ) [MultipleProgramDeclarations]
                ConstProgramDeclaration(
                  ConstDeclaration(
                    Type(
                     char
                    ) [Type]
                    SingleConstAssignment(
                      ConstAssignment(
                       SPACE
                        CharConst(
                          
                        ) [CharConst]
                      ) [ConstAssignment]
                    ) [SingleConstAssignment]
                  ) [ConstDeclaration]
                ) [ConstProgramDeclaration]
              ) [MultipleProgramDeclarations]
              VarProgramDeclaration(
                VarDeclaration(
                  Type(
                   int
                  ) [Type]
                  MultipleVariables(
                    SingleVariable(
                      Variable(
                       x
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [Variable]
                    ) [SingleVariable]
                    Variable(
                     y
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [Variable]
                  ) [MultipleVariables]
                ) [VarDeclaration]
              ) [VarProgramDeclaration]
            ) [MultipleProgramDeclarations]
            AbstractClassProgramDeclaration(
              AbstractClassDeclaration(
                AbstractClassHeader(
                 Object
                  NoClassBaseType(
                  ) [NoClassBaseType]
                ) [AbstractClassHeader]
                NoClassVarDeclarations(
                ) [NoClassVarDeclarations]
                AbstractClassMethods(
                  SingleAbstractClassMethod(
                    AbstractClassAbstractMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      AbstractMethodDeclaration(
                        AbstractMethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         println
                        ) [AbstractMethodHeader]
                        NoFormalParameters(
                        ) [NoFormalParameters]
                      ) [AbstractMethodDeclaration]
                    ) [AbstractClassAbstractMethodDeclaration]
                  ) [SingleAbstractClassMethod]
                ) [AbstractClassMethods]
              ) [AbstractClassDeclaration]
            ) [AbstractClassProgramDeclaration]
          ) [MultipleProgramDeclarations]
          ClassProgramDeclaration(
            ClassDeclaration(
              ClassHeader(
               Point
                ClassBaseType(
                  Type(
                   Object
                  ) [Type]
                ) [ClassBaseType]
              ) [ClassHeader]
              MultipleClassVarDeclarations(
                NoClassVarDeclarations(
                ) [NoClassVarDeclarations]
                ClassVarDeclaration(
                  PrivateAccessModifier(
                  ) [PrivateAccessModifier]
                  Type(
                   int
                  ) [Type]
                  MultipleClassVariables(
                    SingleClassVariable(
                      ClassVariable(
                       x
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [ClassVariable]
                    ) [SingleClassVariable]
                    ClassVariable(
                     y
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [ClassVariable]
                  ) [MultipleClassVariables]
                ) [ClassVarDeclaration]
              ) [MultipleClassVarDeclarations]
              ClassMethodDeclarations(
                MultipleClassMethodDeclarations(
                  MultipleClassMethodDeclarations(
                    MultipleClassMethodDeclarations(
                      MultipleClassMethodDeclarations(
                        MultipleClassMethodDeclarations(
                          SingleClassMethodDeclaration(
                            ClassMethodDeclaration(
                              PublicAccessModifier(
                              ) [PublicAccessModifier]
                              MethodDeclaration(
                                MethodHeader(
                                  ReturnType(
                                    Type(
                                     int
                                    ) [Type]
                                  ) [ReturnType]
                                 getX
                                ) [MethodHeader]
                                NoFormalParameters(
                                ) [NoFormalParameters]
                                NoLocalVarDeclarations(
                                ) [NoLocalVarDeclarations]
                                MethodStatementListStart(
                                ) [MethodStatementListStart]
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  ReturnStatement(
                                    ReturnValue(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               x
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ReturnValue]
                                  ) [ReturnStatement]
                                ) [MultipleStatements]
                              ) [MethodDeclaration]
                            ) [ClassMethodDeclaration]
                          ) [SingleClassMethodDeclaration]
                          ClassMethodDeclaration(
                            PublicAccessModifier(
                            ) [PublicAccessModifier]
                            MethodDeclaration(
                              MethodHeader(
                                ReturnVoid(
                                ) [ReturnVoid]
                               setX
                              ) [MethodHeader]
                              FormalParameters(
                                SingleFormalParameter(
                                  FormalParameter(
                                    Type(
                                     int
                                    ) [Type]
                                   x
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [FormalParameter]
                                ) [SingleFormalParameter]
                              ) [FormalParameters]
                              NoLocalVarDeclarations(
                              ) [NoLocalVarDeclarations]
                              MethodStatementListStart(
                              ) [MethodStatementListStart]
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         this
                                        ) [IdentifierDesignator]
                                       x
                                      ) [MemberAccessDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               x
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                            ) [MethodDeclaration]
                          ) [ClassMethodDeclaration]
                        ) [MultipleClassMethodDeclarations]
                        ClassMethodDeclaration(
                          PublicAccessModifier(
                          ) [PublicAccessModifier]
                          MethodDeclaration(
                            MethodHeader(
                              ReturnType(
                                Type(
                                 int
                                ) [Type]
                              ) [ReturnType]
                             getY
                            ) [MethodHeader]
                            NoFormalParameters(
                            ) [NoFormalParameters]
                            NoLocalVarDeclarations(
                            ) [NoLocalVarDeclarations]
                            MethodStatementListStart(
                            ) [MethodStatementListStart]
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              ReturnStatement(
                                ReturnValue(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           y
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ReturnValue]
                              ) [ReturnStatement]
                            ) [MultipleStatements]
                          ) [MethodDeclaration]
                        ) [ClassMethodDeclaration]
                      ) [MultipleClassMethodDeclarations]
                      ClassMethodDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        MethodDeclaration(
                          MethodHeader(
                            ReturnVoid(
                            ) [ReturnVoid]
                           setY
                          ) [MethodHeader]
                          FormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               y
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                          ) [FormalParameters]
                          NoLocalVarDeclarations(
                          ) [NoLocalVarDeclarations]
                          MethodStatementListStart(
                          ) [MethodStatementListStart]
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     this
                                    ) [IdentifierDesignator]
                                   y
                                  ) [MemberAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           y
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                        ) [MethodDeclaration]
                      ) [ClassMethodDeclaration]
                    ) [MultipleClassMethodDeclarations]
                    ClassMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         println
                        ) [MethodHeader]
                        NoFormalParameters(
                        ) [NoFormalParameters]
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             d
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           x
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         SPACE
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       y
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     eol
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [ClassMethodDeclaration]
                  ) [MultipleClassMethodDeclarations]
                  ClassMethodDeclaration(
                    PrivateAccessModifier(
                    ) [PrivateAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnVoid(
                        ) [ReturnVoid]
                       test
                      ) [MethodHeader]
                      NoFormalParameters(
                      ) [NoFormalParameters]
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      NoStatements(
                      ) [NoStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [MultipleClassMethodDeclarations]
              ) [ClassMethodDeclarations]
            ) [ClassDeclaration]
          ) [ClassProgramDeclaration]
        ) [MultipleProgramDeclarations]
        AbstractClassProgramDeclaration(
          AbstractClassDeclaration(
            AbstractClassHeader(
             abstract_class
              NoClassBaseType(
              ) [NoClassBaseType]
            ) [AbstractClassHeader]
            MultipleClassVarDeclarations(
              MultipleClassVarDeclarations(
                MultipleClassVarDeclarations(
                  NoClassVarDeclarations(
                  ) [NoClassVarDeclarations]
                  ClassVarDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    Type(
                     int
                    ) [Type]
                    SingleClassVariable(
                      ClassVariable(
                       abstract_class_public_field
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [ClassVariable]
                    ) [SingleClassVariable]
                  ) [ClassVarDeclaration]
                ) [MultipleClassVarDeclarations]
                ClassVarDeclaration(
                  ProtectedAccessModifier(
                  ) [ProtectedAccessModifier]
                  Type(
                   char
                  ) [Type]
                  SingleClassVariable(
                    ClassVariable(
                     abstract_class_protected_field
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [ClassVariable]
                  ) [SingleClassVariable]
                ) [ClassVarDeclaration]
              ) [MultipleClassVarDeclarations]
              ClassVarDeclaration(
                PrivateAccessModifier(
                ) [PrivateAccessModifier]
                Type(
                 bool
                ) [Type]
                SingleClassVariable(
                  ClassVariable(
                   abstract_class_private_field
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [ClassVariable]
                ) [SingleClassVariable]
              ) [ClassVarDeclaration]
            ) [MultipleClassVarDeclarations]
            AbstractClassMethods(
              MultipleAbstractClassMethods(
                MultipleAbstractClassMethods(
                  SingleAbstractClassMethod(
                    AbstractClassAbstractMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      AbstractMethodDeclaration(
                        AbstractMethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         public_method
                        ) [AbstractMethodHeader]
                        FormalParameters(
                          MultipleFormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               a
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             b
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [MultipleFormalParameters]
                        ) [FormalParameters]
                      ) [AbstractMethodDeclaration]
                    ) [AbstractClassAbstractMethodDeclaration]
                  ) [SingleAbstractClassMethod]
                  AbstractClassAbstractMethodDeclaration(
                    ProtectedAccessModifier(
                    ) [ProtectedAccessModifier]
                    AbstractMethodDeclaration(
                      AbstractMethodHeader(
                        ReturnVoid(
                        ) [ReturnVoid]
                       protected_method
                      ) [AbstractMethodHeader]
                      FormalParameters(
                        SingleFormalParameter(
                          FormalParameter(
                            Type(
                             char
                            ) [Type]
                           a
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [FormalParameter]
                        ) [SingleFormalParameter]
                      ) [FormalParameters]
                    ) [AbstractMethodDeclaration]
                  ) [AbstractClassAbstractMethodDeclaration]
                ) [MultipleAbstractClassMethods]
                AbstractClassAbstractMethodDeclaration(
                  PrivateAccessModifier(
                  ) [PrivateAccessModifier]
                  AbstractMethodDeclaration(
                    AbstractMethodHeader(
                      ReturnVoid(
                      ) [ReturnVoid]
                     private_method
                    ) [AbstractMethodHeader]
                    FormalParameters(
                      SingleFormalParameter(
                        FormalParameter(
                          Type(
                           bool
                          ) [Type]
                         ind
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [FormalParameter]
                      ) [SingleFormalParameter]
                    ) [FormalParameters]
                  ) [AbstractMethodDeclaration]
                ) [AbstractClassAbstractMethodDeclaration]
              ) [MultipleAbstractClassMethods]
            ) [AbstractClassMethods]
          ) [AbstractClassDeclaration]
        ) [AbstractClassProgramDeclaration]
      ) [MultipleProgramDeclarations]
      ClassProgramDeclaration(
        ClassDeclaration(
          ClassHeader(
           concrete_class
            ClassBaseType(
              Type(
               abstract_class
              ) [Type]
            ) [ClassBaseType]
          ) [ClassHeader]
          MultipleClassVarDeclarations(
            MultipleClassVarDeclarations(
              MultipleClassVarDeclarations(
                NoClassVarDeclarations(
                ) [NoClassVarDeclarations]
                ClassVarDeclaration(
                  PublicAccessModifier(
                  ) [PublicAccessModifier]
                  Type(
                   int
                  ) [Type]
                  MultipleClassVariables(
                    SingleClassVariable(
                      ClassVariable(
                       class_var_a
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [ClassVariable]
                    ) [SingleClassVariable]
                    ClassVariable(
                     class_var_b
                      ArrayBrackets(
                      ) [ArrayBrackets]
                    ) [ClassVariable]
                  ) [MultipleClassVariables]
                ) [ClassVarDeclaration]
              ) [MultipleClassVarDeclarations]
              ClassVarDeclaration(
                ProtectedAccessModifier(
                ) [ProtectedAccessModifier]
                Type(
                 char
                ) [Type]
                SingleClassVariable(
                  ClassVariable(
                   class_var_c
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [ClassVariable]
                ) [SingleClassVariable]
              ) [ClassVarDeclaration]
            ) [MultipleClassVarDeclarations]
            ClassVarDeclaration(
              PrivateAccessModifier(
              ) [PrivateAccessModifier]
              Type(
               bool
              ) [Type]
              SingleClassVariable(
                ClassVariable(
                 class_var_d
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [ClassVariable]
              ) [SingleClassVariable]
            ) [ClassVarDeclaration]
          ) [MultipleClassVarDeclarations]
          ClassMethodDeclarations(
            MultipleClassMethodDeclarations(
              MultipleClassMethodDeclarations(
                SingleClassMethodDeclaration(
                  ClassMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnVoid(
                        ) [ReturnVoid]
                       public_method
                      ) [MethodHeader]
                      FormalParameters(
                        MultipleFormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             a
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                          FormalParameter(
                            Type(
                             int
                            ) [Type]
                           b
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [FormalParameter]
                        ) [MultipleFormalParameters]
                      ) [FormalParameters]
                      MultipleLocalVarDeclarations(
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        LocalVarDeclaration(
                          Type(
                           int
                          ) [Type]
                          SingleLocalVariable(
                            LocalVariable(
                             c
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [LocalVariable]
                          ) [SingleLocalVariable]
                        ) [LocalVarDeclaration]
                      ) [MultipleLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         abstract_class_public_field
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 12
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       abstract_class_protected_field
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               c
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    IdentifierDesignator(
                                     abstract_class_private_field
                                    ) [IdentifierDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            BoolConstantFactor(
                                             false
                                            ) [BoolConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   class_var_a
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           15
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 class_var_c
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        CharConstantFactor(
                                         d
                                        ) [CharConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               class_var_d
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      BoolConstantFactor(
                                       false
                                      ) [BoolConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [SingleClassMethodDeclaration]
                ClassMethodDeclaration(
                  ProtectedAccessModifier(
                  ) [ProtectedAccessModifier]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnVoid(
                      ) [ReturnVoid]
                     protected_method
                    ) [MethodHeader]
                    FormalParameters(
                      SingleFormalParameter(
                        FormalParameter(
                          Type(
                           char
                          ) [Type]
                         a
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [FormalParameter]
                      ) [SingleFormalParameter]
                    ) [FormalParameters]
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    NoStatements(
                    ) [NoStatements]
                  ) [MethodDeclaration]
                ) [ClassMethodDeclaration]
              ) [MultipleClassMethodDeclarations]
              ClassMethodDeclaration(
                PrivateAccessModifier(
                ) [PrivateAccessModifier]
                MethodDeclaration(
                  MethodHeader(
                    ReturnVoid(
                    ) [ReturnVoid]
                   private_method
                  ) [MethodHeader]
                  FormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         bool
                        ) [Type]
                       ind
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                  ) [FormalParameters]
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  MethodStatementListStart(
                  ) [MethodStatementListStart]
                  NoStatements(
                  ) [NoStatements]
                ) [MethodDeclaration]
              ) [ClassMethodDeclaration]
            ) [MultipleClassMethodDeclarations]
          ) [ClassMethodDeclarations]
        ) [ClassDeclaration]
      ) [ClassProgramDeclaration]
    ) [MultipleProgramDeclarations]
    ClassProgramDeclaration(
      ClassDeclaration(
        ClassHeader(
         test_class
          NoClassBaseType(
          ) [NoClassBaseType]
        ) [ClassHeader]
        MultipleClassVarDeclarations(
          MultipleClassVarDeclarations(
            MultipleClassVarDeclarations(
              NoClassVarDeclarations(
              ) [NoClassVarDeclarations]
              ClassVarDeclaration(
                PublicAccessModifier(
                ) [PublicAccessModifier]
                Type(
                 int
                ) [Type]
                MultipleClassVariables(
                  SingleClassVariable(
                    ClassVariable(
                     class_var_a
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [ClassVariable]
                  ) [SingleClassVariable]
                  ClassVariable(
                   class_var_b
                    ArrayBrackets(
                    ) [ArrayBrackets]
                  ) [ClassVariable]
                ) [MultipleClassVariables]
              ) [ClassVarDeclaration]
            ) [MultipleClassVarDeclarations]
            ClassVarDeclaration(
              ProtectedAccessModifier(
              ) [ProtectedAccessModifier]
              Type(
               char
              ) [Type]
              SingleClassVariable(
                ClassVariable(
                 class_var_c
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [ClassVariable]
              ) [SingleClassVariable]
            ) [ClassVarDeclaration]
          ) [MultipleClassVarDeclarations]
          ClassVarDeclaration(
            PrivateAccessModifier(
            ) [PrivateAccessModifier]
            Type(
             bool
            ) [Type]
            SingleClassVariable(
              ClassVariable(
               class_var_d
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [ClassVariable]
            ) [SingleClassVariable]
          ) [ClassVarDeclaration]
        ) [MultipleClassVarDeclarations]
        ClassMethodDeclarations(
          SingleClassMethodDeclaration(
            ClassMethodDeclaration(
              PublicAccessModifier(
              ) [PublicAccessModifier]
              MethodDeclaration(
                MethodHeader(
                  ReturnVoid(
                  ) [ReturnVoid]
                 test_method
                ) [MethodHeader]
                NoFormalParameters(
                ) [NoFormalParameters]
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                MethodStatementListStart(
                ) [MethodStatementListStart]
                NoStatements(
                ) [NoStatements]
              ) [MethodDeclaration]
            ) [ClassMethodDeclaration]
          ) [SingleClassMethodDeclaration]
        ) [ClassMethodDeclarations]
      ) [ClassDeclaration]
    ) [ClassProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      MultipleMethodDeclarations(
        MultipleMethodDeclarations(
          MultipleMethodDeclarations(
            NoMethodDeclarations(
            ) [NoMethodDeclarations]
            MethodDeclaration(
              MethodHeader(
                ReturnType(
                  Type(
                   int
                  ) [Type]
                ) [ReturnType]
               k
              ) [MethodHeader]
              NoFormalParameters(
              ) [NoFormalParameters]
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   int
                  ) [Type]
                  SingleLocalVariable(
                    LocalVariable(
                     c
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              MethodStatementListStart(
              ) [MethodStatementListStart]
              MultipleStatements(
                MultipleStatements(
                  NoStatements(
                  ) [NoStatements]
                  DesignatorBasedStatement(
                    AssignmentDesignatorStatement(
                      AssignmentHeader(
                        IdentifierDesignator(
                         c
                        ) [IdentifierDesignator]
                      ) [AssignmentHeader]
                      AssignmentFooter(
                        AssignOperator(
                        ) [AssignOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                IntConstantFactor(
                                 1
                                ) [IntConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [AssignmentFooter]
                    ) [AssignmentDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                ReturnStatement(
                  ReturnValue(
                    LeftExpression(
                      MultipleTermsExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               c
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                        AddOperator(
                        ) [AddOperator]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             2
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [MultipleTermsExpression]
                    ) [LeftExpression]
                  ) [ReturnValue]
                ) [ReturnStatement]
              ) [MultipleStatements]
            ) [MethodDeclaration]
          ) [MultipleMethodDeclarations]
          MethodDeclaration(
            MethodHeader(
              ReturnVoid(
              ) [ReturnVoid]
             printArray
            ) [MethodHeader]
            FormalParameters(
              SingleFormalParameter(
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 arr
                  ArrayBrackets(
                  ) [ArrayBrackets]
                ) [FormalParameter]
              ) [SingleFormalParameter]
            ) [FormalParameters]
            MultipleLocalVarDeclarations(
              NoLocalVarDeclarations(
              ) [NoLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 int
                ) [Type]
                SingleLocalVariable(
                  LocalVariable(
                   it
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            MethodStatementListStart(
            ) [MethodStatementListStart]
            MultipleStatements(
              MultipleStatements(
                NoStatements(
                ) [NoStatements]
                ForEachStatement(
                  ForEachStatementHeader(
                    ForEachStatementHeaderStart(
                    ) [ForEachStatementHeaderStart]
                   it
                    IdentifierDesignator(
                     arr
                    ) [IdentifierDesignator]
                  ) [ForEachStatementHeader]
                  StatementBlock(
                    MultipleStatements(
                      MultipleStatements(
                        NoStatements(
                        ) [NoStatements]
                        PrintStatement(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   it
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          NoPrintWidth(
                          ) [NoPrintWidth]
                        ) [PrintStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 SPACE
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                  ) [StatementBlock]
                ) [ForEachStatement]
              ) [MultipleStatements]
              PrintStatement(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         eol
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
                NoPrintWidth(
                ) [NoPrintWidth]
              ) [PrintStatement]
            ) [MultipleStatements]
          ) [MethodDeclaration]
        ) [MultipleMethodDeclarations]
        MethodDeclaration(
          MethodHeader(
            ReturnType(
              Type(
               int
              ) [Type]
            ) [ReturnType]
           calc
          ) [MethodHeader]
          FormalParameters(
            MultipleFormalParameters(
              MultipleFormalParameters(
                SingleFormalParameter(
                  FormalParameter(
                    Type(
                     int
                    ) [Type]
                   a
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [FormalParameter]
                ) [SingleFormalParameter]
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 b
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [MultipleFormalParameters]
              FormalParameter(
                Type(
                 bool
                ) [Type]
               c
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [FormalParameter]
            ) [MultipleFormalParameters]
          ) [FormalParameters]
          NoLocalVarDeclarations(
          ) [NoLocalVarDeclarations]
          MethodStatementListStart(
          ) [MethodStatementListStart]
          MultipleStatements(
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              IfOptElseStatement(
                IfStatementHeader(
                  IfStatementHeaderStart(
                  ) [IfStatementHeaderStart]
                  SingleTermCondition(
                    SingleFactConditionTerm(
                      SimpleConditionFact(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 c
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [SimpleConditionFact]
                    ) [SingleFactConditionTerm]
                  ) [SingleTermCondition]
                ) [IfStatementHeader]
                ReturnStatement(
                  ReturnValue(
                    LeftExpression(
                      MultipleTermsExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               a
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                        AddOperator(
                        ) [AddOperator]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             b
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [MultipleTermsExpression]
                    ) [LeftExpression]
                  ) [ReturnValue]
                ) [ReturnStatement]
                NoElseStatment(
                ) [NoElseStatment]
              ) [IfOptElseStatement]
            ) [MultipleStatements]
            ReturnStatement(
              ReturnValue(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    MultipleFactorsTerm(
                      SingleFactorTerm(
                        DesignatorFactor(
                          IdentifierDesignator(
                           a
                          ) [IdentifierDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                      MulOperator(
                      ) [MulOperator]
                      DesignatorFactor(
                        IdentifierDesignator(
                         b
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [MultipleFactorsTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
              ) [ReturnValue]
            ) [ReturnStatement]
          ) [MultipleStatements]
        ) [MethodDeclaration]
      ) [MultipleMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnVoid(
          ) [ReturnVoid]
         test
        ) [MethodHeader]
        NoFormalParameters(
        ) [NoFormalParameters]
        MultipleLocalVarDeclarations(
          MultipleLocalVarDeclarations(
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   int
                  ) [Type]
                  MultipleLocalVariables(
                    MultipleLocalVariables(
                      SingleLocalVariable(
                        LocalVariable(
                         local_var_a
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [LocalVariable]
                      ) [SingleLocalVariable]
                      LocalVariable(
                       local_var_b
                        ArrayBrackets(
                        ) [ArrayBrackets]
                      ) [LocalVariable]
                    ) [MultipleLocalVariables]
                    LocalVariable(
                     i
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [MultipleLocalVariables]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 char
                ) [Type]
                SingleLocalVariable(
                  LocalVariable(
                   local_var_c
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               bool
              ) [Type]
              MultipleLocalVariables(
                SingleLocalVariable(
                  LocalVariable(
                   local_var_d
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
                LocalVariable(
                 local_var_e
                  ArrayBrackets(
                  ) [ArrayBrackets]
                ) [LocalVariable]
              ) [MultipleLocalVariables]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             test_class
            ) [Type]
            SingleLocalVariable(
              LocalVariable(
               local_var_obj
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [SingleLocalVariable]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      NoStatements(
                                      ) [NoStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             local_var_a
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     a
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           local_var_b
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                AllocatorFactor(
                                                  Type(
                                                   int
                                                  ) [Type]
                                                  SingleArrayIndexer(
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               5
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [SingleArrayIndexer]
                                                ) [AllocatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         local_var_c
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 d
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       local_var_obj
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            AllocatorFactor(
                                              Type(
                                               test_class
                                              ) [Type]
                                              NoArrayIndexer(
                                              ) [NoArrayIndexer]
                                            ) [AllocatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    IdentifierDesignator(
                                     local_var_a
                                    ) [IdentifierDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               local_var_obj
                                              ) [IdentifierDesignator]
                                             class_var_a
                                            ) [MemberAccessDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  ElementAccessDesignator(
                                    IdentifierDesignator(
                                     local_var_b
                                    ) [IdentifierDesignator]
                                    ArrayIndexer(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               3
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ArrayIndexer]
                                  ) [ElementAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          ElementAccessDesignator(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               local_var_obj
                                              ) [IdentifierDesignator]
                                             class_var_b
                                            ) [MemberAccessDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       5
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 local_var_c
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           local_var_obj
                                          ) [IdentifierDesignator]
                                         class_var_c
                                        ) [MemberAccessDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               local_var_d
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         local_var_obj
                                        ) [IdentifierDesignator]
                                       class_var_d
                                      ) [MemberAccessDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                      DesignatorBasedStatement(
                        MethodCallDesignatorStatement(
                          MethodCall(
                            MethodCallHeader(
                              MemberAccessDesignator(
                                IdentifierDesignator(
                                 local_var_obj
                                ) [IdentifierDesignator]
                               test_method
                              ) [MemberAccessDesignator]
                            ) [MethodCallHeader]
                            NoActualParameters(
                            ) [NoActualParameters]
                          ) [MethodCall]
                        ) [MethodCallDesignatorStatement]
                      ) [DesignatorBasedStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           local_var_a
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      IdentifierDesignator(
                                       calc
                                      ) [IdentifierDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      MultipleActualParameters(
                                        MultipleActualParameters(
                                          SingleActualParameter(
                                            ActualParameter(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       local_var_a
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ActualParameter]
                                          ) [SingleActualParameter]
                                          ActualParameter(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     local_var_a
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ActualParameter]
                                        ) [MultipleActualParameters]
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   local_var_d
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [MultipleActualParameters]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                  DesignatorBasedStatement(
                    MethodCallDesignatorStatement(
                      MethodCall(
                        MethodCallHeader(
                          IdentifierDesignator(
                           calc
                          ) [IdentifierDesignator]
                        ) [MethodCallHeader]
                        NoActualParameters(
                        ) [NoActualParameters]
                      ) [MethodCall]
                    ) [MethodCallDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                DesignatorBasedStatement(
                  MethodCallDesignatorStatement(
                    MethodCall(
                      MethodCallHeader(
                        IdentifierDesignator(
                         calc
                        ) [IdentifierDesignator]
                      ) [MethodCallHeader]
                      ActualParameters(
                        MultipleActualParameters(
                          MultipleActualParameters(
                            SingleActualParameter(
                              ActualParameter(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         local_var_a
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ActualParameter]
                            ) [SingleActualParameter]
                            ActualParameter(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       local_var_d
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ActualParameter]
                          ) [MultipleActualParameters]
                          ActualParameter(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     local_var_a
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ActualParameter]
                        ) [MultipleActualParameters]
                      ) [ActualParameters]
                    ) [MethodCall]
                  ) [MethodCallDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
              DesignatorBasedStatement(
                AssignmentDesignatorStatement(
                  AssignmentHeader(
                    IdentifierDesignator(
                     local_var_b
                    ) [IdentifierDesignator]
                  ) [AssignmentHeader]
                  AssignmentFooter(
                    AssignOperator(
                    ) [AssignOperator]
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          AllocatorFactor(
                            Type(
                             int
                            ) [Type]
                            SingleArrayIndexer(
                              ArrayIndexer(
                                LeftExpression(
                                  MultipleTermsExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           c
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                    SubOperator(
                                    ) [SubOperator]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         a
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [MultipleTermsExpression]
                                ) [LeftExpression]
                              ) [ArrayIndexer]
                            ) [SingleArrayIndexer]
                          ) [AllocatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [AssignmentFooter]
                ) [AssignmentDesignatorStatement]
              ) [DesignatorBasedStatement]
            ) [MultipleStatements]
            BreakStatement(
            ) [BreakStatement]
          ) [MultipleStatements]
          ForStatement(
            ForStatementHeader(
              ForStatementHeaderStart(
              ) [ForStatementHeaderStart]
              SingleDesignatorStatement(
                AssignmentDesignatorStatement(
                  AssignmentHeader(
                    IdentifierDesignator(
                     i
                    ) [IdentifierDesignator]
                  ) [AssignmentHeader]
                  AssignmentFooter(
                    AssignOperator(
                    ) [AssignOperator]
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             0
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [AssignmentFooter]
                ) [AssignmentDesignatorStatement]
              ) [SingleDesignatorStatement]
              SingleCondition(
                SingleTermCondition(
                  SingleFactConditionTerm(
                    ComplexConditionFact(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               i
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      LssOperator(
                      ) [LssOperator]
                      LeftExpression(
                        MultipleTermsExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 c
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                          SubOperator(
                          ) [SubOperator]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               a
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [MultipleTermsExpression]
                      ) [LeftExpression]
                    ) [ComplexConditionFact]
                  ) [SingleFactConditionTerm]
                ) [SingleTermCondition]
              ) [SingleCondition]
              SingleDesignatorStatement(
                IncrementDesignatorStatement(
                  IdentifierDesignator(
                   i
                  ) [IdentifierDesignator]
                ) [IncrementDesignatorStatement]
              ) [SingleDesignatorStatement]
            ) [ForStatementHeader]
            StatementBlock(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    IfOptElseStatement(
                      IfStatementHeader(
                        IfStatementHeaderStart(
                        ) [IfStatementHeaderStart]
                        SingleTermCondition(
                          SingleFactConditionTerm(
                            ComplexConditionFact(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  MultipleFactorsTerm(
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         i
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                    ModOperator(
                                    ) [ModOperator]
                                    ConstantFactor(
                                      IntConstantFactor(
                                       2
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [MultipleFactorsTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              EqOperator(
                              ) [EqOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       0
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [SingleFactConditionTerm]
                        ) [SingleTermCondition]
                      ) [IfStatementHeader]
                      DesignatorBasedStatement(
                        AssignmentDesignatorStatement(
                          AssignmentHeader(
                            IdentifierDesignator(
                             local_var_c
                            ) [IdentifierDesignator]
                          ) [AssignmentHeader]
                          AssignmentFooter(
                            AssignOperator(
                            ) [AssignOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    BoolConstantFactor(
                                     true
                                    ) [BoolConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [AssignmentFooter]
                        ) [AssignmentDesignatorStatement]
                      ) [DesignatorBasedStatement]
                      ElseStatement(
                        ElseStatementStart(
                        ) [ElseStatementStart]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               local_var_c
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      BoolConstantFactor(
                                       false
                                      ) [BoolConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [ElseStatement]
                    ) [IfOptElseStatement]
                  ) [MultipleStatements]
                  DesignatorBasedStatement(
                    AssignmentDesignatorStatement(
                      AssignmentHeader(
                        ElementAccessDesignator(
                          IdentifierDesignator(
                           local_var_b
                          ) [IdentifierDesignator]
                          ArrayIndexer(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     i
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ArrayIndexer]
                        ) [ElementAccessDesignator]
                      ) [AssignmentHeader]
                      AssignmentFooter(
                        AssignOperator(
                        ) [AssignOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              MethodCallFactor(
                                MethodCall(
                                  MethodCallHeader(
                                    IdentifierDesignator(
                                     calc
                                    ) [IdentifierDesignator]
                                  ) [MethodCallHeader]
                                  ActualParameters(
                                    MultipleActualParameters(
                                      MultipleActualParameters(
                                        SingleActualParameter(
                                          ActualParameter(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     local_var_a
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ActualParameter]
                                        ) [SingleActualParameter]
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  ElementAccessDesignator(
                                                    IdentifierDesignator(
                                                     local_var_b
                                                    ) [IdentifierDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               i
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [MultipleActualParameters]
                                      ActualParameter(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 local_var_c
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ActualParameter]
                                    ) [MultipleActualParameters]
                                  ) [ActualParameters]
                                ) [MethodCall]
                              ) [MethodCallFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [AssignmentFooter]
                    ) [AssignmentDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                ContinueStatement(
                ) [ContinueStatement]
              ) [MultipleStatements]
            ) [StatementBlock]
          ) [ForStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        MultipleLocalVarDeclarations(
          MultipleLocalVarDeclarations(
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                MultipleLocalVarDeclarations(
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  LocalVarDeclaration(
                    Type(
                     int
                    ) [Type]
                    MultipleLocalVariables(
                      SingleLocalVariable(
                        LocalVariable(
                         i
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [LocalVariable]
                      ) [SingleLocalVariable]
                      LocalVariable(
                       arr
                        ArrayBrackets(
                        ) [ArrayBrackets]
                      ) [LocalVariable]
                    ) [MultipleLocalVariables]
                  ) [LocalVarDeclaration]
                ) [MultipleLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   Point
                  ) [Type]
                  SingleLocalVariable(
                    LocalVariable(
                     p
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 int
                ) [Type]
                MultipleLocalVariables(
                  SingleLocalVariable(
                    LocalVariable(
                     a
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                  LocalVariable(
                   b
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [MultipleLocalVariables]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               char
              ) [Type]
              SingleLocalVariable(
                LocalVariable(
                 c
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             bool
            ) [Type]
            SingleLocalVariable(
              LocalVariable(
               ind
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [SingleLocalVariable]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           abstract_class
          ) [Type]
          SingleLocalVariable(
            LocalVariable(
             var
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [LocalVariable]
          ) [SingleLocalVariable]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            NoStatements(
                                                            ) [NoStatements]
                                                            DesignatorBasedStatement(
                                                              AssignmentDesignatorStatement(
                                                                AssignmentHeader(
                                                                  IdentifierDesignator(
                                                                   a
                                                                  ) [IdentifierDesignator]
                                                                ) [AssignmentHeader]
                                                                AssignmentFooter(
                                                                  AssignOperator(
                                                                  ) [AssignOperator]
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          IntConstantFactor(
                                                                           4
                                                                          ) [IntConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [AssignmentFooter]
                                                              ) [AssignmentDesignatorStatement]
                                                            ) [DesignatorBasedStatement]
                                                          ) [MultipleStatements]
                                                          DesignatorBasedStatement(
                                                            AssignmentDesignatorStatement(
                                                              AssignmentHeader(
                                                                IdentifierDesignator(
                                                                 b
                                                                ) [IdentifierDesignator]
                                                              ) [AssignmentHeader]
                                                              AssignmentFooter(
                                                                AssignOperator(
                                                                ) [AssignOperator]
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         15
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [AssignmentFooter]
                                                            ) [AssignmentDesignatorStatement]
                                                          ) [DesignatorBasedStatement]
                                                        ) [MultipleStatements]
                                                        DesignatorBasedStatement(
                                                          AssignmentDesignatorStatement(
                                                            AssignmentHeader(
                                                              IdentifierDesignator(
                                                               c
                                                              ) [IdentifierDesignator]
                                                            ) [AssignmentHeader]
                                                            AssignmentFooter(
                                                              AssignOperator(
                                                              ) [AssignOperator]
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      CharConstantFactor(
                                                                       b
                                                                      ) [CharConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [AssignmentFooter]
                                                          ) [AssignmentDesignatorStatement]
                                                        ) [DesignatorBasedStatement]
                                                      ) [MultipleStatements]
                                                      DesignatorBasedStatement(
                                                        AssignmentDesignatorStatement(
                                                          AssignmentHeader(
                                                            IdentifierDesignator(
                                                             ind
                                                            ) [IdentifierDesignator]
                                                          ) [AssignmentHeader]
                                                          AssignmentFooter(
                                                            AssignOperator(
                                                            ) [AssignOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    BoolConstantFactor(
                                                                     false
                                                                    ) [BoolConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [AssignmentFooter]
                                                        ) [AssignmentDesignatorStatement]
                                                      ) [DesignatorBasedStatement]
                                                    ) [MultipleStatements]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          IdentifierDesignator(
                                                           var
                                                          ) [IdentifierDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                AllocatorFactor(
                                                                  Type(
                                                                   concrete_class
                                                                  ) [Type]
                                                                  NoArrayIndexer(
                                                                  ) [NoArrayIndexer]
                                                                ) [AllocatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [MultipleStatements]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        MemberAccessDesignator(
                                                          IdentifierDesignator(
                                                           var
                                                          ) [IdentifierDesignator]
                                                         class_var_a
                                                        ) [MemberAccessDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 5
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         var
                                                        ) [IdentifierDesignator]
                                                       abstract_class_public_field
                                                      ) [MemberAccessDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          MinusSign(
                                                          ) [MinusSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               5
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       var
                                                      ) [IdentifierDesignator]
                                                     class_var_c
                                                    ) [MemberAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            CharConstantFactor(
                                                             b
                                                            ) [CharConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     var
                                                    ) [IdentifierDesignator]
                                                   class_var_d
                                                  ) [MemberAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          BoolConstantFactor(
                                                           false
                                                          ) [BoolConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            MethodCallDesignatorStatement(
                                              MethodCall(
                                                MethodCallHeader(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     var
                                                    ) [IdentifierDesignator]
                                                   public_method
                                                  ) [MemberAccessDesignator]
                                                ) [MethodCallHeader]
                                                ActualParameters(
                                                  MultipleActualParameters(
                                                    SingleActualParameter(
                                                      ActualParameter(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 a
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ActualParameter]
                                                    ) [SingleActualParameter]
                                                    ActualParameter(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               b
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ActualParameter]
                                                  ) [MultipleActualParameters]
                                                ) [ActualParameters]
                                              ) [MethodCall]
                                            ) [MethodCallDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          MethodCallDesignatorStatement(
                                            MethodCall(
                                              MethodCallHeader(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   var
                                                  ) [IdentifierDesignator]
                                                 protected_method
                                                ) [MemberAccessDesignator]
                                              ) [MethodCallHeader]
                                              ActualParameters(
                                                SingleActualParameter(
                                                  ActualParameter(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             b
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ActualParameter]
                                                ) [SingleActualParameter]
                                              ) [ActualParameters]
                                            ) [MethodCall]
                                          ) [MethodCallDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        MethodCallDesignatorStatement(
                                          MethodCall(
                                            MethodCallHeader(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 var
                                                ) [IdentifierDesignator]
                                               private_method
                                              ) [MemberAccessDesignator]
                                            ) [MethodCallHeader]
                                            ActualParameters(
                                              SingleActualParameter(
                                                ActualParameter(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           c
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ActualParameter]
                                              ) [SingleActualParameter]
                                            ) [ActualParameters]
                                          ) [MethodCall]
                                        ) [MethodCallDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           y
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   2
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             y
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           eol
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    IdentifierDesignator(
                                     x
                                    ) [IdentifierDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      MultipleTermsExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               y
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                        AddOperator(
                                        ) [AddOperator]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             2
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [MultipleTermsExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       x
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     eol
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               y
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                MultipleTermsExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      MethodCallFactor(
                                        MethodCall(
                                          MethodCallHeader(
                                            IdentifierDesignator(
                                             k
                                            ) [IdentifierDesignator]
                                          ) [MethodCallHeader]
                                          NoActualParameters(
                                          ) [NoActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                  AddOperator(
                                  ) [AddOperator]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       3
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [MultipleTermsExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 y
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           p
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                AllocatorFactor(
                                  Type(
                                   Point
                                  ) [Type]
                                  NoArrayIndexer(
                                  ) [NoArrayIndexer]
                                ) [AllocatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                  DesignatorBasedStatement(
                    AssignmentDesignatorStatement(
                      AssignmentHeader(
                        MemberAccessDesignator(
                          IdentifierDesignator(
                           p
                          ) [IdentifierDesignator]
                         x
                        ) [MemberAccessDesignator]
                      ) [AssignmentHeader]
                      AssignmentFooter(
                        AssignOperator(
                        ) [AssignOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 x
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [AssignmentFooter]
                    ) [AssignmentDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                DesignatorBasedStatement(
                  AssignmentDesignatorStatement(
                    AssignmentHeader(
                      MemberAccessDesignator(
                        IdentifierDesignator(
                         p
                        ) [IdentifierDesignator]
                       y
                      ) [MemberAccessDesignator]
                    ) [AssignmentHeader]
                    AssignmentFooter(
                      AssignOperator(
                      ) [AssignOperator]
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               y
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [AssignmentFooter]
                  ) [AssignmentDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
              DesignatorBasedStatement(
                MethodCallDesignatorStatement(
                  MethodCall(
                    MethodCallHeader(
                      MemberAccessDesignator(
                        IdentifierDesignator(
                         p
                        ) [IdentifierDesignator]
                       printPoint
                      ) [MemberAccessDesignator]
                    ) [MethodCallHeader]
                    NoActualParameters(
                    ) [NoActualParameters]
                  ) [MethodCall]
                ) [MethodCallDesignatorStatement]
              ) [DesignatorBasedStatement]
            ) [MultipleStatements]
            DesignatorBasedStatement(
              AssignmentDesignatorStatement(
                AssignmentHeader(
                  IdentifierDesignator(
                   arr
                  ) [IdentifierDesignator]
                ) [AssignmentHeader]
                AssignmentFooter(
                  AssignOperator(
                  ) [AssignOperator]
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        AllocatorFactor(
                          Type(
                           int
                          ) [Type]
                          SingleArrayIndexer(
                            ArrayIndexer(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       6
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ArrayIndexer]
                          ) [SingleArrayIndexer]
                        ) [AllocatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                ) [AssignmentFooter]
              ) [AssignmentDesignatorStatement]
            ) [DesignatorBasedStatement]
          ) [MultipleStatements]
          ForStatement(
            ForStatementHeader(
              ForStatementHeaderStart(
              ) [ForStatementHeaderStart]
              SingleDesignatorStatement(
                AssignmentDesignatorStatement(
                  AssignmentHeader(
                    IdentifierDesignator(
                     i
                    ) [IdentifierDesignator]
                  ) [AssignmentHeader]
                  AssignmentFooter(
                    AssignOperator(
                    ) [AssignOperator]
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             0
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [AssignmentFooter]
                ) [AssignmentDesignatorStatement]
              ) [SingleDesignatorStatement]
              SingleCondition(
                SingleTermCondition(
                  SingleFactConditionTerm(
                    ComplexConditionFact(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               i
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      LssOperator(
                      ) [LssOperator]
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            MethodCallFactor(
                              MethodCall(
                                MethodCallHeader(
                                  IdentifierDesignator(
                                   len
                                  ) [IdentifierDesignator]
                                ) [MethodCallHeader]
                                ActualParameters(
                                  SingleActualParameter(
                                    ActualParameter(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               arr
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ActualParameter]
                                  ) [SingleActualParameter]
                                ) [ActualParameters]
                              ) [MethodCall]
                            ) [MethodCallFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [ComplexConditionFact]
                  ) [SingleFactConditionTerm]
                ) [SingleTermCondition]
              ) [SingleCondition]
              SingleDesignatorStatement(
                IncrementDesignatorStatement(
                  IdentifierDesignator(
                   i
                  ) [IdentifierDesignator]
                ) [IncrementDesignatorStatement]
              ) [SingleDesignatorStatement]
            ) [ForStatementHeader]
            StatementBlock(
              MultipleStatements(
                NoStatements(
                ) [NoStatements]
                DesignatorBasedStatement(
                  AssignmentDesignatorStatement(
                    AssignmentHeader(
                      ElementAccessDesignator(
                        IdentifierDesignator(
                         arr
                        ) [IdentifierDesignator]
                        ArrayIndexer(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ArrayIndexer]
                      ) [ElementAccessDesignator]
                    ) [AssignmentHeader]
                    AssignmentFooter(
                      AssignOperator(
                      ) [AssignOperator]
                      LeftExpression(
                        MultipleTermsExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            MultipleFactorsTerm(
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                              MulOperator(
                              ) [MulOperator]
                              ConstantFactor(
                                IntConstantFactor(
                                 7
                                ) [IntConstantFactor]
                              ) [ConstantFactor]
                            ) [MultipleFactorsTerm]
                          ) [SingleTermExpression]
                          SubOperator(
                          ) [SubOperator]
                          SingleFactorTerm(
                            ConstantFactor(
                              IntConstantFactor(
                               2
                              ) [IntConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [MultipleTermsExpression]
                      ) [LeftExpression]
                    ) [AssignmentFooter]
                  ) [AssignmentDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
            ) [StatementBlock]
          ) [ForStatement]
        ) [MultipleStatements]
        DesignatorBasedStatement(
          MethodCallDesignatorStatement(
            MethodCall(
              MethodCallHeader(
                IdentifierDesignator(
                 printArray
                ) [IdentifierDesignator]
              ) [MethodCallHeader]
              ActualParameters(
                SingleActualParameter(
                  ActualParameter(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             arr
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [ActualParameter]
                ) [SingleActualParameter]
              ) [ActualParameters]
            ) [MethodCall]
          ) [MethodCallDesignatorStatement]
        ) [DesignatorBasedStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - semantic_errors_C.mj:2: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Defined int constant 'a'. Symbol node: Constant 'a': type = 'int', adr = 20, level = 0
DEBUG - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Defined int constant 'b'. Symbol node: Constant 'b': type = 'int', adr = -1, level = 0
DEBUG - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:4: SEMANTIC ANALYZER: Defined int constant 'c'. Symbol node: Constant 'c': type = 'int', adr = 25, level = 0
DEBUG - semantic_errors_C.mj:5: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:5: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:5: SEMANTIC ANALYZER: Defined char constant 'd'. Symbol node: Constant 'd': type = 'char', adr = 97, level = 0
DEBUG - semantic_errors_C.mj:6: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:6: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:6: SEMANTIC ANALYZER: Defined bool constant 'e'. Symbol node: Constant 'e': type = 'bool', adr = 1, level = 0
DEBUG - semantic_errors_C.mj:6: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:6: SEMANTIC ANALYZER: Defined bool constant 'f'. Symbol node: Constant 'f': type = 'bool', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Defined int constant 'A'. Symbol node: Constant 'A': type = 'int', adr = 1, level = 0
DEBUG - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Defined int constant 'B'. Symbol node: Constant 'B': type = 'int', adr = 2, level = 0
DEBUG - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:7: SEMANTIC ANALYZER: Defined int constant 'C'. Symbol node: Constant 'C': type = 'int', adr = 3, level = 0
DEBUG - semantic_errors_C.mj:8: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:8: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:8: SEMANTIC ANALYZER: Defined char constant 'X'. Symbol node: Constant 'X': type = 'char', adr = 120, level = 0
DEBUG - semantic_errors_C.mj:8: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:8: SEMANTIC ANALYZER: Defined char constant 'Y'. Symbol node: Constant 'Y': type = 'char', adr = 121, level = 0
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Defined bool constant 'VALID'. Symbol node: Constant 'VALID': type = 'bool', adr = 1, level = 0
DEBUG - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Defined int variable 'var_a'. Symbol node: Variable 'var_a': type = 'int', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Defined int array variable 'var_b'. Symbol node: Variable 'var_b': type = 'array of int', adr = 1, level = 0
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Defined char variable 'var_c'. Symbol node: Variable 'var_c': type = 'char', adr = 2, level = 0
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Defined char array variable 'var_d'. Symbol node: Variable 'var_d': type = 'array of char', adr = 3, level = 0
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Defined char variable 'var_e'. Symbol node: Variable 'var_e': type = 'char', adr = 4, level = 0
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Defined bool variable 'var_f'. Symbol node: Variable 'var_f': type = 'bool', adr = 5, level = 0
DEBUG - semantic_errors_C.mj:15: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:15: SEMANTIC ANALYZER: Visited node: 'Variable'.
ERROR - semantic_errors_C.mj:15: SEMANTIC ANALYZER: 'a' is already in use!
DEBUG - semantic_errors_C.mj:15: SEMANTIC ANALYZER: Visited node: 'Variable'.
ERROR - semantic_errors_C.mj:15: SEMANTIC ANALYZER: 'b' is already in use!
DEBUG - semantic_errors_C.mj:15: SEMANTIC ANALYZER: Visited node: 'Variable'.
ERROR - semantic_errors_C.mj:15: SEMANTIC ANALYZER: 'c' is already in use!
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'Type'.
ERROR - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Point is not defined!
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'Variable'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'Variable'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'Type'.
ERROR - semantic_errors_C.mj:19: SEMANTIC ANALYZER: IPoint is not defined!
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
ERROR - semantic_errors_C.mj:19: SEMANTIC ANALYZER: 'none' is not a class!
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Defined int variable 'x'. Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = public
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Defined int variable 'y'. Symbol node: Field 'y': type = 'int', adr = 2, level = 1, parent = 'Point', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Found class 'Point' field usage 'x'! Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = public
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:34: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Defined method 'get_x'. Symbol node: Method 'get_x': type = 'int', adr = 0, level = 1, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'Type'.
ERROR - semantic_errors_C.mj:23: SEMANTIC ANALYZER: IPoint is not defined!
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Found symbolic constant usage 'a'! Symbol node: Constant 'a': type = 'int', adr = 20, level = 0
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Designator 'a' is not a variable, an array element or a class field!
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Found class 'Point' field usage 'x'! Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = public
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
ERROR - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Expression 'none' is not int type!
DEBUG - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
ERROR - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Return expression type incompatible with method type!
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Defined method 'diff_x'. Symbol node: Method 'diff_x': type = 'int', adr = 0, level = 1, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Defined class 'Point'. Symbol node: Type 'Point': type = 'class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'AbstractClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Defined int variable 'd'. Symbol node: Field 'd': type = 'int', adr = 1, level = 1, parent = 'IPoint', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:31: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:31: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:31: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - semantic_errors_C.mj:31: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:31: SEMANTIC ANALYZER: Defined method 'get_x'. Symbol node: Abstract method 'get_x': type = 'int', adr = 0, level = 1, parent = 'IPoint', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Found abstract class usage 'IPoint'! Symbol node: Type 'IPoint': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Defined  formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'class', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:32: SEMANTIC ANALYZER: Defined method 'diff_x'. Symbol node: Abstract method 'diff_x': type = 'int', adr = 0, level = 2, parent = 'IPoint', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'class', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
ERROR - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Abstract method cannot be declared private!
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Defined method 'test'. Symbol node: Abstract method 'test': type = 'void', adr = 0, level = 1, parent = 'IPoint', access modifier = private
  Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'AbstractClassDeclaration'.
INFO  - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Defined class 'IPoint'. Symbol node: Type 'IPoint': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:37: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:37: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - semantic_errors_C.mj:37: SEMANTIC ANALYZER: Defined char constant 'SPACE'. Symbol node: Constant 'SPACE': type = 'char', adr = 32, level = 0
DEBUG - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Defined int variable 'x'. Symbol node: Variable 'x': type = 'int', adr = 6, level = 0
DEBUG - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Defined int variable 'y'. Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:41: SEMANTIC ANALYZER: Visited node: 'AbstractClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:43: SEMANTIC ANALYZER: Defined method 'println'. Symbol node: Abstract method 'println': type = 'void', adr = 0, level = 1, parent = 'Object', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:41: SEMANTIC ANALYZER: Visited node: 'AbstractClassDeclaration'.
INFO  - semantic_errors_C.mj:41: SEMANTIC ANALYZER: Defined class 'Object'. Symbol node: Type 'Object': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:47: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - semantic_errors_C.mj:47: SEMANTIC ANALYZER: Found abstract class usage 'Object'! Symbol node: Type 'Object': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:47: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
ERROR - semantic_errors_C.mj:47: SEMANTIC ANALYZER: 'Point' is already in use!
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - semantic_errors_C.mj:49: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:49: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:49: SEMANTIC ANALYZER: Defined int variable 'x'. Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:49: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:49: SEMANTIC ANALYZER: Defined int variable 'y'. Symbol node: Field 'y': type = 'int', adr = 2, level = 1, parent = 'Point', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Found class 'Point' field usage 'x'! Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Defined method 'getX'. Symbol node: Method 'getX': type = 'int', adr = 0, level = 1, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Defined int formal parameter 'x'. Symbol node: Formal parameter 'x': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Found class 'Point' field usage 'x'! Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Found formal parameter usage 'x'! Symbol node: Formal parameter 'x': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Defined method 'setX'. Symbol node: Method 'setX': type = 'void', adr = 0, level = 2, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'x': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Found class 'Point' field usage 'y'! Symbol node: Field 'y': type = 'int', adr = 2, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:33: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:54: SEMANTIC ANALYZER: Defined method 'getY'. Symbol node: Method 'getY': type = 'int', adr = 0, level = 1, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Defined int formal parameter 'y'. Symbol node: Formal parameter 'y': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Found class 'Point' field usage 'y'! Symbol node: Field 'y': type = 'int', adr = 2, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Found formal parameter usage 'y'! Symbol node: Formal parameter 'y': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:55: SEMANTIC ANALYZER: Defined method 'setY'. Symbol node: Method 'setY': type = 'void', adr = 0, level = 2, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'y': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:57: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:58: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:58: SEMANTIC ANALYZER: Found symbolic constant usage 'd'! Symbol node: Constant 'd': type = 'char', adr = 97, level = 0
DEBUG - semantic_errors_C.mj:58: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:58: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:59: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:59: SEMANTIC ANALYZER: Found class 'Point' field usage 'x'! Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:59: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:59: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:60: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:60: SEMANTIC ANALYZER: Found symbolic constant usage 'SPACE'! Symbol node: Constant 'SPACE': type = 'char', adr = 32, level = 0
DEBUG - semantic_errors_C.mj:60: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:60: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:61: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:61: SEMANTIC ANALYZER: Found class 'Point' field usage 'y'! Symbol node: Field 'y': type = 'int', adr = 2, level = 1, parent = 'Point', access modifier = private
DEBUG - semantic_errors_C.mj:61: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:61: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:57: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:57: SEMANTIC ANALYZER: Defined method 'println'. Symbol node: Method 'println': type = 'void', adr = 0, level = 1, parent = 'Point', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:65: SEMANTIC ANALYZER: Defined method 'test'. Symbol node: Method 'test': type = 'void', adr = 0, level = 1, parent = 'Point', access modifier = private
  Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:47: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - semantic_errors_C.mj:47: SEMANTIC ANALYZER: Defined class 'Point'. Symbol node: Type 'Point': type = 'class', adr = -1, level = -1
DEBUG - semantic_errors_C.mj:69: SEMANTIC ANALYZER: Visited node: 'AbstractClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:70: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:70: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:70: SEMANTIC ANALYZER: Defined int variable 'abstract_class_public_field'. Symbol node: Field 'abstract_class_public_field': type = 'int', adr = 1, level = 1, parent = 'abstract_class', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - semantic_errors_C.mj:71: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:71: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:71: SEMANTIC ANALYZER: Defined char variable 'abstract_class_protected_field'. Symbol node: Field 'abstract_class_protected_field': type = 'char', adr = 2, level = 1, parent = 'abstract_class', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - semantic_errors_C.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:72: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:72: SEMANTIC ANALYZER: Defined bool variable 'abstract_class_private_field'. Symbol node: Field 'abstract_class_private_field': type = 'bool', adr = 3, level = 1, parent = 'abstract_class', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Defined int formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:74: SEMANTIC ANALYZER: Defined method 'public_method'. Symbol node: Abstract method 'public_method': type = 'void', adr = 0, level = 3, parent = 'abstract_class', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:75: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - semantic_errors_C.mj:75: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:75: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:75: SEMANTIC ANALYZER: Defined char formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'char', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:75: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:75: SEMANTIC ANALYZER: Defined method 'protected_method'. Symbol node: Abstract method 'protected_method': type = 'void', adr = 0, level = 2, parent = 'abstract_class', access modifier = protected
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
ERROR - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Abstract method cannot be declared private!
DEBUG - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Defined bool formal parameter 'ind'. Symbol node: Formal parameter 'ind': type = 'bool', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - semantic_errors_C.mj:76: SEMANTIC ANALYZER: Defined method 'private_method'. Symbol node: Abstract method 'private_method': type = 'void', adr = 0, level = 2, parent = 'abstract_class', access modifier = private
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'ind': type = 'bool', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:69: SEMANTIC ANALYZER: Visited node: 'AbstractClassDeclaration'.
INFO  - semantic_errors_C.mj:69: SEMANTIC ANALYZER: Defined class 'abstract_class'. Symbol node: Type 'abstract_class': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:80: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - semantic_errors_C.mj:80: SEMANTIC ANALYZER: Found abstract class usage 'abstract_class'! Symbol node: Type 'abstract_class': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:80: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:82: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:82: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:82: SEMANTIC ANALYZER: Defined int variable 'class_var_a'. Symbol node: Field 'class_var_a': type = 'int', adr = 4, level = 1, parent = 'concrete_class', access modifier = public
DEBUG - semantic_errors_C.mj:82: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:82: SEMANTIC ANALYZER: Defined int array variable 'class_var_b'. Symbol node: Field 'class_var_b': type = 'array of int', adr = 5, level = 1, parent = 'concrete_class', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - semantic_errors_C.mj:83: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:83: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:83: SEMANTIC ANALYZER: Defined char variable 'class_var_c'. Symbol node: Field 'class_var_c': type = 'char', adr = 6, level = 1, parent = 'concrete_class', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - semantic_errors_C.mj:84: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:84: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:84: SEMANTIC ANALYZER: Defined bool variable 'class_var_d'. Symbol node: Field 'class_var_d': type = 'bool', adr = 7, level = 1, parent = 'concrete_class', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Defined int formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:88: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:88: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:88: SEMANTIC ANALYZER: Defined int variable 'c'. Symbol node: Variable 'c': type = 'int', adr = 3, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:90: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:90: SEMANTIC ANALYZER: Found class 'abstract_class' field usage 'abstract_class_public_field'! Symbol node: Field 'abstract_class_public_field': type = 'int', adr = 1, level = 1, parent = 'abstract_class', access modifier = public
DEBUG - semantic_errors_C.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:45: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:90: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:91: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:91: SEMANTIC ANALYZER: Found class 'abstract_class' field usage 'abstract_class_protected_field'! Symbol node: Field 'abstract_class_protected_field': type = 'char', adr = 2, level = 1, parent = 'abstract_class', access modifier = protected
DEBUG - semantic_errors_C.mj:91: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:91: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:48: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:91: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:92: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
ERROR - semantic_errors_C.mj:92: SEMANTIC ANALYZER: Symbol 'abstract_class_private_field' is not accessible in current scope!
DEBUG - semantic_errors_C.mj:92: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:92: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:92: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:93: SEMANTIC ANALYZER: Found class 'concrete_class' field usage 'class_var_a'! Symbol node: Field 'class_var_a': type = 'int', adr = 4, level = 1, parent = 'concrete_class', access modifier = public
DEBUG - semantic_errors_C.mj:93: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:93: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:93: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:94: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:94: SEMANTIC ANALYZER: Found class 'concrete_class' field usage 'class_var_c'! Symbol node: Field 'class_var_c': type = 'char', adr = 6, level = 1, parent = 'concrete_class', access modifier = protected
DEBUG - semantic_errors_C.mj:94: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:94: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:95: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:95: SEMANTIC ANALYZER: Found class 'concrete_class' field usage 'class_var_d'! Symbol node: Field 'class_var_d': type = 'bool', adr = 7, level = 1, parent = 'concrete_class', access modifier = private
DEBUG - semantic_errors_C.mj:95: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:95: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:95: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:87: SEMANTIC ANALYZER: Defined method 'public_method'. Symbol node: Method 'public_method': type = 'void', adr = 0, level = 3, parent = 'concrete_class', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
  Variable 'c': type = 'int', adr = 3, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:98: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:98: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:98: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:98: SEMANTIC ANALYZER: Defined char formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:98: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:98: SEMANTIC ANALYZER: Defined method 'protected_method'. Symbol node: Method 'protected_method': type = 'void', adr = 0, level = 2, parent = 'concrete_class', access modifier = protected
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:100: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:100: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:100: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:100: SEMANTIC ANALYZER: Defined bool formal parameter 'ind'. Symbol node: Formal parameter 'ind': type = 'bool', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:100: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:100: SEMANTIC ANALYZER: Defined method 'private_method'. Symbol node: Method 'private_method': type = 'void', adr = 0, level = 2, parent = 'concrete_class', access modifier = private
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'ind': type = 'bool', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:80: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - semantic_errors_C.mj:80: SEMANTIC ANALYZER: Defined class 'concrete_class'. Symbol node: Type 'concrete_class': type = 'class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:104: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - semantic_errors_C.mj:106: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:106: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:106: SEMANTIC ANALYZER: Defined int variable 'class_var_a'. Symbol node: Field 'class_var_a': type = 'int', adr = 1, level = 1, parent = 'test_class', access modifier = public
DEBUG - semantic_errors_C.mj:106: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:106: SEMANTIC ANALYZER: Defined int array variable 'class_var_b'. Symbol node: Field 'class_var_b': type = 'array of int', adr = 2, level = 1, parent = 'test_class', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - semantic_errors_C.mj:107: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:107: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:107: SEMANTIC ANALYZER: Defined char variable 'class_var_c'. Symbol node: Field 'class_var_c': type = 'char', adr = 3, level = 1, parent = 'test_class', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - semantic_errors_C.mj:108: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:108: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - semantic_errors_C.mj:108: SEMANTIC ANALYZER: Defined bool variable 'class_var_d'. Symbol node: Field 'class_var_d': type = 'bool', adr = 4, level = 1, parent = 'test_class', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:110: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:110: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:110: SEMANTIC ANALYZER: Defined method 'test_method'. Symbol node: Method 'test_method': type = 'void', adr = 0, level = 1, parent = 'test_class', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:104: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - semantic_errors_C.mj:104: SEMANTIC ANALYZER: Defined class 'test_class'. Symbol node: Type 'test_class': type = 'class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:114: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:114: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:114: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:115: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:115: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:115: SEMANTIC ANALYZER: Defined int variable 'c'. Symbol node: Variable 'c': type = 'int', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:117: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:117: SEMANTIC ANALYZER: Found local variable usage 'c'! Symbol node: Variable 'c': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:117: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:117: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:118: SEMANTIC ANALYZER: Found local variable usage 'c'! Symbol node: Variable 'c': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:118: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:118: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_C.mj:114: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:114: SEMANTIC ANALYZER: Defined method 'k'. Symbol node: Method 'k': type = 'int', adr = 0, level = 0
  Variable 'c': type = 'int', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:121: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:121: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:121: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:121: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:122: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:122: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:122: SEMANTIC ANALYZER: Defined int variable 'it'. Symbol node: Variable 'it': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:124: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:124: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:124: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - semantic_errors_C.mj:125: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:125: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:125: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:125: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:126: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:126: SEMANTIC ANALYZER: Found symbolic constant usage 'SPACE'! Symbol node: Constant 'SPACE': type = 'char', adr = 32, level = 0
DEBUG - semantic_errors_C.mj:126: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:126: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:124: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - semantic_errors_C.mj:128: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:128: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - semantic_errors_C.mj:128: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:128: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:121: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:121: SEMANTIC ANALYZER: Defined method 'printArray'. Symbol node: Method 'printArray': type = 'void', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'it': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Defined int formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Defined bool formal parameter 'c'. Symbol node: Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Found formal parameter usage 'c'! Symbol node: Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:12: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_C.mj:132: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:133: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:131: SEMANTIC ANALYZER: Defined method 'calc'. Symbol node: Method 'calc': type = 'int', adr = 0, level = 3
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
  Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:136: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Defined int variable 'local_var_a'. Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Defined int array variable 'local_var_b'. Symbol node: Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:138: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:139: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:139: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:139: SEMANTIC ANALYZER: Defined char variable 'local_var_c'. Symbol node: Variable 'local_var_c': type = 'char', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:140: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:140: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:140: SEMANTIC ANALYZER: Defined bool variable 'local_var_d'. Symbol node: Variable 'local_var_d': type = 'bool', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:140: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:140: SEMANTIC ANALYZER: Defined bool array variable 'local_var_e'. Symbol node: Variable 'local_var_e': type = 'array of bool', adr = 5, level = 1
DEBUG - semantic_errors_C.mj:141: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:141: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:141: SEMANTIC ANALYZER: Defined  variable 'local_var_obj'. Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Found symbolic constant usage 'a'! Symbol node: Constant 'a': type = 'int', adr = 20, level = 0
DEBUG - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:143: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Found local variable usage 'local_var_b'! Symbol node: Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:144: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Found local variable usage 'local_var_c'! Symbol node: Variable 'local_var_c': type = 'char', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Found symbolic constant usage 'd'! Symbol node: Constant 'd': type = 'char', adr = 97, level = 0
DEBUG - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:145: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:146: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:146: SEMANTIC ANALYZER: Found local variable usage 'local_var_obj'! Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:146: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:146: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_C.mj:146: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:146: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Found local variable usage 'local_var_obj'! Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Found class 'test_class' field usage 'class_var_a'! Symbol node: Field 'class_var_a': type = 'int', adr = 1, level = 1, parent = 'test_class', access modifier = public
DEBUG - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:148: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Found local variable usage 'local_var_b'! Symbol node: Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Found array element access 'local_var_b[3]'! Symbol node: Array element 'local_var_b[3]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Found local variable usage 'local_var_obj'! Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Found class 'test_class' field usage 'class_var_b'! Symbol node: Field 'class_var_b': type = 'array of int', adr = 2, level = 1, parent = 'test_class', access modifier = public
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:51: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Found array element access 'local_var_obj.class_var_b[5]'! Symbol node: Array element 'local_var_obj.class_var_b[5]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:149: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Found local variable usage 'local_var_c'! Symbol node: Variable 'local_var_c': type = 'char', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Found local variable usage 'local_var_obj'! Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Symbol 'local_var_obj.class_var_c' is not accessible in current scope!
DEBUG - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:150: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Found local variable usage 'local_var_d'! Symbol node: Variable 'local_var_d': type = 'bool', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Found local variable usage 'local_var_obj'! Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Symbol 'local_var_obj.class_var_d' is not accessible in current scope!
DEBUG - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:151: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:152: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:152: SEMANTIC ANALYZER: Found local variable usage 'local_var_obj'! Symbol node: Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:152: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:152: SEMANTIC ANALYZER: Found class 'test_class' field usage 'test_method'! Symbol node: Method 'test_method': type = 'void', adr = 0, level = 1, parent = 'test_class', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - semantic_errors_C.mj:152: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:152: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Found global method call 'calc'! Symbol node: Method 'calc': type = 'int', adr = 0, level = 3
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
  Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:27: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:39: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Found local variable usage 'local_var_d'! Symbol node: Variable 'local_var_d': type = 'bool', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:52: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:154: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:155: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:155: SEMANTIC ANALYZER: Found global method call 'calc'! Symbol node: Method 'calc': type = 'int', adr = 0, level = 3
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
  Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:155: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:155: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
ERROR - semantic_errors_C.mj:155: SEMANTIC ANALYZER: Wrong number of arguments!
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Found global method call 'calc'! Symbol node: Method 'calc': type = 'int', adr = 0, level = 3
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
  Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Found local variable usage 'local_var_d'! Symbol node: Variable 'local_var_d': type = 'bool', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:38: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
ERROR - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Actual parameter at position 2 is of wrong type!
ERROR - semantic_errors_C.mj:156: SEMANTIC ANALYZER: Actual parameter at position 3 is of wrong type!
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Found local variable usage 'local_var_b'! Symbol node: Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Found symbolic constant usage 'c'! Symbol node: Constant 'c': type = 'int', adr = 25, level = 0
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Found symbolic constant usage 'a'! Symbol node: Constant 'a': type = 'int', adr = 20, level = 0
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:157: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
ERROR - SEMANTIC ANALYZER: Break statement found outside of a loop!
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Found symbolic constant usage 'c'! Symbol node: Constant 'c': type = 'int', adr = 25, level = 0
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Found symbolic constant usage 'a'! Symbol node: Constant 'a': type = 'int', adr = 20, level = 0
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Found local variable usage 'local_var_c'! Symbol node: Variable 'local_var_c': type = 'char', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
ERROR - semantic_errors_C.mj:160: SEMANTIC ANALYZER: bool incompatible with char!
DEBUG - semantic_errors_C.mj:161: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:161: SEMANTIC ANALYZER: Found local variable usage 'local_var_c'! Symbol node: Variable 'local_var_c': type = 'char', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:161: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:161: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:161: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
ERROR - semantic_errors_C.mj:161: SEMANTIC ANALYZER: bool incompatible with char!
DEBUG - semantic_errors_C.mj:160: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found local variable usage 'local_var_b'! Symbol node: Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found global method call 'calc'! Symbol node: Method 'calc': type = 'int', adr = 0, level = 3
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'b': type = 'int', adr = 1, level = 1
  Formal parameter 'c': type = 'bool', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found local variable usage 'local_var_a'! Symbol node: Variable 'local_var_a': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:34: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found local variable usage 'local_var_b'! Symbol node: Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:59: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:59: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:46: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Found local variable usage 'local_var_c'! Symbol node: Variable 'local_var_c': type = 'char', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:62: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
ERROR - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Actual parameter at position 3 is of wrong type!
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:162: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - semantic_errors_C.mj:159: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - semantic_errors_C.mj:136: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:136: SEMANTIC ANALYZER: Defined method 'test'. Symbol node: Method 'test': type = 'void', adr = 0, level = 0
  Variable 'local_var_a': type = 'int', adr = 0, level = 1
  Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'local_var_c': type = 'char', adr = 3, level = 1
  Variable 'local_var_d': type = 'bool', adr = 4, level = 1
  Variable 'local_var_e': type = 'array of bool', adr = 5, level = 1
  Variable 'local_var_obj': type = 'class', adr = 6, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - semantic_errors_C.mj:167: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - semantic_errors_C.mj:168: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:168: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:168: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:168: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:168: SEMANTIC ANALYZER: Defined int array variable 'arr'. Symbol node: Variable 'arr': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:169: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:169: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:169: SEMANTIC ANALYZER: Defined  variable 'p'. Symbol node: Variable 'p': type = 'class', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:170: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:170: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:170: SEMANTIC ANALYZER: Defined int variable 'a'. Symbol node: Variable 'a': type = 'int', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:170: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:170: SEMANTIC ANALYZER: Defined int variable 'b'. Symbol node: Variable 'b': type = 'int', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:171: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:171: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:171: SEMANTIC ANALYZER: Defined char variable 'c'. Symbol node: Variable 'c': type = 'char', adr = 5, level = 1
DEBUG - semantic_errors_C.mj:172: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:172: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:172: SEMANTIC ANALYZER: Defined bool variable 'ind'. Symbol node: Variable 'ind': type = 'bool', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:173: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - semantic_errors_C.mj:173: SEMANTIC ANALYZER: Found abstract class usage 'abstract_class'! Symbol node: Type 'abstract_class': type = 'abstract class', adr = 0, level = 0
DEBUG - semantic_errors_C.mj:173: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - semantic_errors_C.mj:173: SEMANTIC ANALYZER: Defined  variable 'var'. Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - semantic_errors_C.mj:175: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:175: SEMANTIC ANALYZER: Found local variable usage 'a'! Symbol node: Variable 'a': type = 'int', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:175: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:175: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:175: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:176: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:176: SEMANTIC ANALYZER: Found local variable usage 'b'! Symbol node: Variable 'b': type = 'int', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:176: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:176: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:176: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:177: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:177: SEMANTIC ANALYZER: Found local variable usage 'c'! Symbol node: Variable 'c': type = 'char', adr = 5, level = 1
DEBUG - semantic_errors_C.mj:177: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:177: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:177: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:178: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:178: SEMANTIC ANALYZER: Found local variable usage 'ind'! Symbol node: Variable 'ind': type = 'bool', adr = 6, level = 1
DEBUG - semantic_errors_C.mj:178: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:178: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:178: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:179: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:179: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:179: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:179: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_C.mj:179: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:179: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Designator 'var' has no member named 'class_var_a'!
DEBUG - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:180: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Found class 'abstract_class' field usage 'abstract_class_public_field'! Symbol node: Field 'abstract_class_public_field': type = 'int', adr = 1, level = 1, parent = 'abstract_class', access modifier = public
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:181: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Designator 'var' has no member named 'class_var_c'!
DEBUG - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:182: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Designator 'var' has no member named 'class_var_d'!
DEBUG - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:183: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Found class 'abstract_class' field usage 'public_method'! Symbol node: Abstract method 'public_method': type = 'void', adr = 0, level = 3, parent = 'abstract_class', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Found local variable usage 'a'! Symbol node: Variable 'a': type = 'int', adr = 3, level = 1
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Found local variable usage 'b'! Symbol node: Variable 'b': type = 'int', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:184: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Symbol 'var.protected_method' is not accessible in current scope!
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Found local variable usage 'b'! Symbol node: Variable 'b': type = 'int', adr = 4, level = 1
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:185: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Found local variable usage 'var'! Symbol node: Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Symbol 'var.private_method' is not accessible in current scope!
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Found local variable usage 'c'! Symbol node: Variable 'c': type = 'char', adr = 5, level = 1
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:27: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:186: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:187: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:187: SEMANTIC ANALYZER: Found global variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:187: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:187: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:187: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Found global variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:188: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Found global variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 6, level = 0
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Found global variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:189: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Found global variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 6, level = 0
DEBUG - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:190: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Found global variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Found global method call 'k'! Symbol node: Method 'k': type = 'int', adr = 0, level = 0
  Variable 'c': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:191: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:192: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:192: SEMANTIC ANALYZER: Found global variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:192: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:192: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - semantic_errors_C.mj:193: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:193: SEMANTIC ANALYZER: Found local variable usage 'p'! Symbol node: Variable 'p': type = 'class', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:193: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:193: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_C.mj:193: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:193: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Found local variable usage 'p'! Symbol node: Variable 'p': type = 'class', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Found class 'Point' field usage 'x'! Symbol node: Field 'x': type = 'int', adr = 1, level = 1, parent = 'Point', access modifier = public
DEBUG - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Found global variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 6, level = 0
DEBUG - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:194: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Found local variable usage 'p'! Symbol node: Variable 'p': type = 'class', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Found class 'Point' field usage 'y'! Symbol node: Field 'y': type = 'int', adr = 2, level = 1, parent = 'Point', access modifier = public
DEBUG - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Found global variable usage 'y'! Symbol node: Variable 'y': type = 'int', adr = 7, level = 0
DEBUG - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:195: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:196: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:196: SEMANTIC ANALYZER: Found local variable usage 'p'! Symbol node: Variable 'p': type = 'class', adr = 2, level = 1
DEBUG - semantic_errors_C.mj:196: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
ERROR - semantic_errors_C.mj:196: SEMANTIC ANALYZER: Designator 'p' has no member named 'printPoint'!
DEBUG - semantic_errors_C.mj:196: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:196: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:197: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - semantic_errors_C.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:199: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - semantic_errors_C.mj:198: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Found global method call 'printArray'! Symbol node: Method 'printArray': type = 'void', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'it': type = 'int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 1, level = 1
DEBUG - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - semantic_errors_C.mj:19: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - semantic_errors_C.mj:201: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - semantic_errors_C.mj:167: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - semantic_errors_C.mj:167: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = 0, level = 0
  Variable 'i': type = 'int', adr = 0, level = 1
  Variable 'arr': type = 'array of int', adr = 1, level = 1
  Variable 'p': type = 'class', adr = 2, level = 1
  Variable 'a': type = 'int', adr = 3, level = 1
  Variable 'b': type = 'int', adr = 4, level = 1
  Variable 'c': type = 'char', adr = 5, level = 1
  Variable 'ind': type = 'bool', adr = 6, level = 1
  Variable 'var': type = 'class', adr = 7, level = 1
DEBUG - semantic_errors_C.mj:2: SEMANTIC ANALYZER: Visited node: 'Program'.
INFO  - semantic_errors_C.mj:2: SEMANTIC ANALYZER: Defined program 'level_c_semantic_errors'. Symbol node: Program 'level_c_semantic_errors': type = 'none', adr = 0, level = 1
  Constant 'a': type = 'int', adr = 20, level = 0
  Constant 'b': type = 'int', adr = -1, level = 0
  Constant 'c': type = 'int', adr = 25, level = 0
  Constant 'd': type = 'char', adr = 97, level = 0
  Constant 'e': type = 'bool', adr = 1, level = 0
  Constant 'f': type = 'bool', adr = 0, level = 0
  Constant 'A': type = 'int', adr = 1, level = 0
  Constant 'B': type = 'int', adr = 2, level = 0
  Constant 'C': type = 'int', adr = 3, level = 0
  Constant 'X': type = 'char', adr = 120, level = 0
  Constant 'Y': type = 'char', adr = 121, level = 0
  Constant 'VALID': type = 'bool', adr = 1, level = 0
  Variable 'var_a': type = 'int', adr = 0, level = 0
  Variable 'var_b': type = 'array of int', adr = 1, level = 0
  Variable 'var_c': type = 'char', adr = 2, level = 0
  Variable 'var_d': type = 'array of char', adr = 3, level = 0
  Variable 'var_e': type = 'char', adr = 4, level = 0
  Variable 'var_f': type = 'bool', adr = 5, level = 0
  Type 'Point': type = 'class', adr = 0, level = 0
  Type 'IPoint': type = 'abstract class', adr = 0, level = 0
  Constant 'SPACE': type = 'char', adr = 32, level = 0
  Variable 'x': type = 'int', adr = 6, level = 0
  Variable 'y': type = 'int', adr = 7, level = 0
  Type 'Object': type = 'abstract class', adr = 0, level = 0
  Type 'abstract_class': type = 'abstract class', adr = 0, level = 0
  Type 'concrete_class': type = 'class', adr = 0, level = 0
  Type 'test_class': type = 'class', adr = 0, level = 0
  Method 'k': type = 'int', adr = 0, level = 0
    Variable 'c': type = 'int', adr = 0, level = 1
  Method 'printArray': type = 'void', adr = 0, level = 1
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Variable 'it': type = 'int', adr = 1, level = 1
  Method 'calc': type = 'int', adr = 0, level = 3
    Formal parameter 'a': type = 'int', adr = 0, level = 1
    Formal parameter 'b': type = 'int', adr = 1, level = 1
    Formal parameter 'c': type = 'bool', adr = 2, level = 1
  Method 'test': type = 'void', adr = 0, level = 0
    Variable 'local_var_a': type = 'int', adr = 0, level = 1
    Variable 'local_var_b': type = 'array of int', adr = 1, level = 1
    Variable 'i': type = 'int', adr = 2, level = 1
    Variable 'local_var_c': type = 'char', adr = 3, level = 1
    Variable 'local_var_d': type = 'bool', adr = 4, level = 1
    Variable 'local_var_e': type = 'array of bool', adr = 5, level = 1
    Variable 'local_var_obj': type = 'class', adr = 6, level = 1
  Method 'main': type = 'void', adr = 0, level = 0
    Variable 'i': type = 'int', adr = 0, level = 1
    Variable 'arr': type = 'array of int', adr = 1, level = 1
    Variable 'p': type = 'class', adr = 2, level = 1
    Variable 'a': type = 'int', adr = 3, level = 1
    Variable 'b': type = 'int', adr = 4, level = 1
    Variable 'c': type = 'char', adr = 5, level = 1
    Variable 'ind': type = 'bool', adr = 6, level = 1
    Variable 'var': type = 'class', adr = 7, level = 1
