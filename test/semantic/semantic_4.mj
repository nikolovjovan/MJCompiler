// random test
program test
    // const declarations
    const int a = 20, b = -1, c = +25;
    const char d = 'a';
    const bool e = true, f = false;

    // const char a = 'c'; // symbol a already in use
    // const invalid_type d = 3; // type not defined
    // const a e = 5; // 'a' is not a type
    // const int e = 'a'; // wrong type for init value
    // const bool m = 25; // wrong type for init value for m

    // global variables
    int var_a, var_b[];
    char var_c, var_d[], var_e;
    bool var_f;

    // type_x var_g; // type 'type_x' not defined
    // var_a var_g; // 'var_a' is not a type

    class test_class {
        // class variables
        public int class_var_a, class_var_b[];
        protected char class_var_c;
        private bool class_var_d;
        {
            public void test_method() {}
        }
    }
{
    int calc(int a, int b, bool c) {
        if (c) return a + b;
        return a * b;
    }

    void main()
        // local variables
        int local_var_a, local_var_b[], i;
        char local_var_c;
        bool local_var_d, local_var_e[];
    {
        local_var_a = a; // const usage
        local_var_a = calc(local_var_a, local_var_a, local_var_d); // test method call
// TODO: Uncomment all this code after expressions are all implemented...
//        local_var_b = new int[c - a]; // const expr
//        // break; // semantic error
//        for (i = 0; i < c - a; i++) {
//            if (i % 2 == 0) local_var_c = true;
//            else local_var_c = false;
//            local_var_b[i] = calc(local_var_a, local_var_b[i], local_var_c);
//            continue;
//        }
    }
}