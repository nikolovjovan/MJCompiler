// level C symbol detection:
// - abstract inner class
// - access to inner class field
// - inner class method call
program level_c_symbol_detection
    abstract class abstract_class { // abstract inner class
        public int abstract_class_public_field;
        protected char abstract_class_protected_field;
        private bool abstract_class_private_field;
        {
            public abstract void public_method(int a, int b);
            protected abstract void protected_method(char a);
            private abstract void private_method(bool ind);
        }
    }

    class concrete_class extends abstract_class {
        // class variables
        public int class_var_a, class_var_b[];
        protected char class_var_c;
        private bool class_var_d;
        {
            public void public_method(int a, int b) {
                abstract_class_public_field = 12; // super class public field access
                abstract_class_protected_field = 'c'; // super class protected field access
                abstract_class_private_field = false; // error: super class private field access forbidden
                class_var_a = 15; // this class public field access
                class_var_c = 12; // this class protected field access
                class_var_d = false; // this class private field access
            }
            protected void protected_method(char a) {}
            private void private_method(bool ind) {}
        }
    }
{
    void main()
        int a, b;
        char c;
        bool ind;
        abstract_class var;
    {
        a = 4;
        b = 15;
        c = 'b';
        ind = false;
        var = new concrete_class; // concrete class instantiation
        var.class_var_a = 5; // public field access
        var.abstract_class_public_field = -5; // super class public field access
        var.class_var_c = 'b'; // error: protected field access forbidden
        var.class_var_d = false; // error: private field access forbidden
        var.public_method(a, b); // public method call
        var.protected_method(b); // error: protected method call forbidden
        var.private_method(c); // error: private method call forbidden
    }
}