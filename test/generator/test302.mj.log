DEBUG - test302.mj:3:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - test302.mj:3:9: LEXER: Found symbol: '#55' with value: 'test302'
DEBUG - test302.mj:5:1: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - test302.mj:5:7: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:5:11: LEXER: Found symbol: '#55' with value: 'jedan'
DEBUG - test302.mj:5:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:5:19: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:5:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:7:1: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:7:5: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:7:6: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:8:1: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - test302.mj:8:6: LEXER: Found symbol: '#55' with value: 'ibool'
DEBUG - test302.mj:8:11: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:10:1: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:10:5: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:10:8: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:10:9: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:10:10: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:11:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:13:2: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:13:6: LEXER: Found symbol: '#55' with value: 'sum'
DEBUG - test302.mj:13:9: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:13:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:13:14: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test302.mj:13:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:13:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:13:21: LEXER: Found symbol: '#55' with value: 'd'
DEBUG - test302.mj:13:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:14:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:15:3: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test302.mj:15:10: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test302.mj:15:12: LEXER: Found symbol: '#22' with value: '+'
DEBUG - test302.mj:15:14: LEXER: Found symbol: '#55' with value: 'd'
DEBUG - test302.mj:15:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:16:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:18:2: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:18:6: LEXER: Found symbol: '#55' with value: 'inkrement'
DEBUG - test302.mj:18:15: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:18:16: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:18:20: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test302.mj:18:21: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:18:23: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:18:27: LEXER: Found symbol: '#55' with value: 'inc'
DEBUG - test302.mj:18:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:18:32: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:18:36: LEXER: Found symbol: '#55' with value: 'pom'
DEBUG - test302.mj:18:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:19:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:20:3: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:20:5: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:20:6: LEXER: Found symbol: '#55' with value: 'inc'
DEBUG - test302.mj:20:10: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:20:13: LEXER: Found symbol: '#55' with value: 'jedan'
DEBUG - test302.mj:20:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:20:20: LEXER: Found symbol: '#55' with value: 'pom'
DEBUG - test302.mj:20:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:20:26: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:20:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:21:3: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - test302.mj:21:8: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:21:10: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:21:11: LEXER: Found symbol: '#55' with value: 'inc'
DEBUG - test302.mj:21:15: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:21:18: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:21:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:21:21: LEXER: Found symbol: '#55' with value: 'pom'
DEBUG - test302.mj:21:25: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:21:27: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test302.mj:21:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:23:3: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test302.mj:23:10: LEXER: Found symbol: '#55' with value: 'sum'
DEBUG - test302.mj:23:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:23:14: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test302.mj:23:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:23:16: LEXER: Found symbol: '#55' with value: 'pom'
DEBUG - test302.mj:23:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:23:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:24:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:26:2: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - test302.mj:26:7: LEXER: Found symbol: '#55' with value: 'verify'
DEBUG - test302.mj:26:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:26:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:26:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:27:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:27:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:27:9: LEXER: Found symbol: '#53' with value: 'v'
DEBUG - test302.mj:27:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:27:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:28:3: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test302.mj:28:10: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - test302.mj:28:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:29:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:31:2: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test302.mj:31:7: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - test302.mj:31:11: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:31:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:32:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:33:3: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:33:5: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:33:6: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:33:7: LEXER: Found symbol: '#30' with value: '!='
DEBUG - test302.mj:33:9: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:33:10: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:33:12: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:33:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:33:18: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test302.mj:33:19: LEXER: Found symbol: '#52' with value: '6'
DEBUG - test302.mj:33:20: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:33:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:34:3: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - test302.mj:34:8: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:34:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:34:14: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:34:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:34:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:36:3: LEXER: Found symbol: '#55' with value: 'ibool'
DEBUG - test302.mj:36:9: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:36:11: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - test302.mj:36:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:37:3: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:37:5: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:37:7: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:37:8: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:38:3: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - test302.mj:38:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:38:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:38:8: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:38:9: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:38:10: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:38:11: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:38:12: LEXER: Found symbol: '#33' with value: '<'
DEBUG - test302.mj:38:13: LEXER: Found symbol: '#52' with value: '5'
DEBUG - test302.mj:38:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:38:15: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:38:16: LEXER: Found symbol: '#27' with value: '++'
DEBUG - test302.mj:38:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:39:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:40:4: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:40:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:40:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:40:9: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:40:12: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:40:13: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:40:15: LEXER: Found symbol: '#55' with value: 'ibool'
DEBUG - test302.mj:40:21: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:40:23: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - test302.mj:40:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:41:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:43:3: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:43:5: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:43:6: LEXER: Found symbol: '#55' with value: 'ibool'
DEBUG - test302.mj:43:11: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:44:4: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:44:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:44:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:44:9: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:44:12: LEXER: Found symbol: '#52' with value: '5'
DEBUG - test302.mj:44:13: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:44:15: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:44:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:44:21: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:44:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:44:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:45:4: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - test302.mj:45:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:45:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:45:15: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test302.mj:45:16: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:45:17: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:45:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:47:3: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:47:7: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:47:9: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test302.mj:47:13: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test302.mj:47:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:47:17: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test302.mj:47:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:47:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:48:3: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:48:6: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:48:7: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:48:8: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:48:10: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:48:12: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:48:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:49:3: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:49:6: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:49:7: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:49:8: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:49:10: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:49:12: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:49:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:50:3: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:50:6: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:50:7: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:50:8: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:50:10: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:50:12: LEXER: Found symbol: '#55' with value: 'sum'
DEBUG - test302.mj:50:15: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:50:16: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:50:19: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:50:20: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:50:21: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:50:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:50:24: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:50:27: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:50:28: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:50:29: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:50:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:50:32: LEXER: Found symbol: '#22' with value: '+'
DEBUG - test302.mj:50:34: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:50:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:51:3: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:51:5: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:51:6: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:51:9: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:51:10: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:51:11: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:51:13: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:51:16: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test302.mj:51:18: LEXER: Found symbol: '#36' with value: '||'
DEBUG - test302.mj:51:21: LEXER: Found symbol: '#55' with value: 'verify'
DEBUG - test302.mj:51:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:51:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:51:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:51:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:51:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:51:37: LEXER: Found symbol: '#55' with value: 'ord'
DEBUG - test302.mj:51:40: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:51:41: LEXER: Found symbol: '#53' with value: 'A'
DEBUG - test302.mj:51:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:51:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:51:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:52:3: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - test302.mj:52:8: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:52:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:52:14: LEXER: Found symbol: '#55' with value: 'ord'
DEBUG - test302.mj:52:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:52:18: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - test302.mj:52:21: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:52:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:52:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:54:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:54:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:54:9: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test302.mj:54:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:54:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:55:3: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:55:5: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:55:7: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:55:8: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:56:3: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - test302.mj:56:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:56:7: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:56:8: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:56:9: LEXER: Found symbol: '#33' with value: '<'
DEBUG - test302.mj:56:10: LEXER: Found symbol: '#52' with value: '10'
DEBUG - test302.mj:56:12: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:56:13: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:57:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:58:4: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:58:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:58:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:58:9: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:58:12: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test302.mj:58:13: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:59:4: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:60:5: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:60:6: LEXER: Found symbol: '#27' with value: '++'
DEBUG - test302.mj:60:8: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:61:5: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - test302.mj:61:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:62:4: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:63:4: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:63:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:63:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:63:9: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:63:12: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test302.mj:63:13: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:63:15: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - test302.mj:63:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:64:4: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:64:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test302.mj:64:8: LEXER: Found symbol: '#55' with value: 'inkrement'
DEBUG - test302.mj:64:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:64:18: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:64:19: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:64:21: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:64:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:64:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:65:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:67:3: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test302.mj:67:5: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:67:6: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:67:8: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test302.mj:67:11: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test302.mj:67:13: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - test302.mj:67:16: LEXER: Found symbol: '#55' with value: 'verify'
DEBUG - test302.mj:67:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:67:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:67:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:67:26: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:67:31: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:67:32: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test302.mj:67:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:67:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:68:3: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - test302.mj:68:8: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:68:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:68:14: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test302.mj:68:15: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test302.mj:68:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:68:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:70:3: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - test302.mj:70:7: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:70:8: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:70:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:70:12: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:70:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:70:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:70:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:71:3: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - test302.mj:71:7: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:71:8: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:71:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:71:12: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:71:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:71:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:71:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:72:3: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - test302.mj:72:7: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:72:8: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:72:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:72:12: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:72:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:72:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:72:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:73:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:73:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:73:9: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test302.mj:73:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:73:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:75:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:75:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:75:9: LEXER: Found symbol: '#55' with value: 'sum'
DEBUG - test302.mj:75:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:75:14: LEXER: Found symbol: '#55' with value: 'sum'
DEBUG - test302.mj:75:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:75:18: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:75:21: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:75:22: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test302.mj:75:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:75:24: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:75:26: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:75:29: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:75:30: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test302.mj:75:31: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:75:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:75:33: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:75:35: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:75:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:75:39: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:75:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:75:41: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:75:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:75:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:77:3: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - test302.mj:77:10: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:77:11: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:77:12: LEXER: Found symbol: '#48' with value: ':'
DEBUG - test302.mj:77:14: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:77:17: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:77:18: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test302.mj:78:4: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:78:9: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:78:10: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test302.mj:78:11: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:78:12: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:79:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:81:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:81:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:81:9: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test302.mj:81:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:81:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:82:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test302.mj:82:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:82:9: LEXER: Found symbol: '#55' with value: 'inkrement'
DEBUG - test302.mj:82:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - test302.mj:82:19: LEXER: Found symbol: '#55' with value: 'niz'
DEBUG - test302.mj:82:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - test302.mj:82:23: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:82:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test302.mj:82:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - test302.mj:82:27: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test302.mj:82:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:82:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test302.mj:82:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test302.mj:83:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:84:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test302.mj:86:1: LEXER: Found symbol: '#0' with value: ''
DEBUG - test302.mj:86:1: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree: Program(
  ProgramHeader(
   test302
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    MultipleProgramDeclarations(
      MultipleProgramDeclarations(
        MultipleProgramDeclarations(
          NoProgramDeclarations(
          ) [NoProgramDeclarations]
          ConstProgramDeclaration(
            ConstDeclaration(
              Type(
               int
              ) [Type]
              SingleConstAssignment(
                ConstAssignment(
                 jedan
                  IntConst(
                    NoSign(
                    ) [NoSign]
                   1
                  ) [IntConst]
                ) [ConstAssignment]
              ) [SingleConstAssignment]
            ) [ConstDeclaration]
          ) [ConstProgramDeclaration]
        ) [MultipleProgramDeclarations]
        VarProgramDeclaration(
          VarDeclaration(
            Type(
             int
            ) [Type]
            SingleVariable(
              Variable(
               i
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [Variable]
            ) [SingleVariable]
          ) [VarDeclaration]
        ) [VarProgramDeclaration]
      ) [MultipleProgramDeclarations]
      VarProgramDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          SingleVariable(
            Variable(
             ibool
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [Variable]
          ) [SingleVariable]
        ) [VarDeclaration]
      ) [VarProgramDeclaration]
    ) [MultipleProgramDeclarations]
    VarProgramDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        SingleVariable(
          Variable(
           niz
            ArrayBrackets(
            ) [ArrayBrackets]
          ) [Variable]
        ) [SingleVariable]
      ) [VarDeclaration]
    ) [VarProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      MultipleMethodDeclarations(
        MultipleMethodDeclarations(
          NoMethodDeclarations(
          ) [NoMethodDeclarations]
          MethodDeclaration(
            MethodHeader(
              ReturnType(
                Type(
                 int
                ) [Type]
              ) [ReturnType]
             sum
            ) [MethodHeader]
            FormalParameters(
              MultipleFormalParameters(
                SingleFormalParameter(
                  FormalParameter(
                    Type(
                     int
                    ) [Type]
                   z
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [FormalParameter]
                ) [SingleFormalParameter]
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 d
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [MultipleFormalParameters]
            ) [FormalParameters]
            NoLocalVarDeclarations(
            ) [NoLocalVarDeclarations]
            MethodStatementListStart(
            ) [MethodStatementListStart]
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              ReturnStatement(
                ReturnValue(
                  LeftExpression(
                    MultipleTermsExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             z
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                      AddOperator(
                      ) [AddOperator]
                      SingleFactorTerm(
                        DesignatorFactor(
                          IdentifierDesignator(
                           d
                          ) [IdentifierDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                    ) [MultipleTermsExpression]
                  ) [LeftExpression]
                ) [ReturnValue]
              ) [ReturnStatement]
            ) [MultipleStatements]
          ) [MethodDeclaration]
        ) [MultipleMethodDeclarations]
        MethodDeclaration(
          MethodHeader(
            ReturnType(
              Type(
               int
              ) [Type]
            ) [ReturnType]
           inkrement
          ) [MethodHeader]
          FormalParameters(
            MultipleFormalParameters(
              SingleFormalParameter(
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 a
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [SingleFormalParameter]
              FormalParameter(
                Type(
                 int
                ) [Type]
               inc
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [FormalParameter]
            ) [MultipleFormalParameters]
          ) [FormalParameters]
          MultipleLocalVarDeclarations(
            NoLocalVarDeclarations(
            ) [NoLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               int
              ) [Type]
              SingleLocalVariable(
                LocalVariable(
                 pom
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          MethodStatementListStart(
          ) [MethodStatementListStart]
          MultipleStatements(
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              IfOptElseStatement(
                IfStatementHeader(
                  IfStatementHeaderStart(
                  ) [IfStatementHeaderStart]
                  SingleTermCondition(
                    SingleFactConditionTerm(
                      ComplexConditionFact(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 inc
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        EqOperator(
                        ) [EqOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 jedan
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [ComplexConditionFact]
                    ) [SingleFactConditionTerm]
                  ) [SingleTermCondition]
                ) [IfStatementHeader]
                DesignatorBasedStatement(
                  AssignmentDesignatorStatement(
                    AssignmentHeader(
                      IdentifierDesignator(
                       pom
                      ) [IdentifierDesignator]
                    ) [AssignmentHeader]
                    AssignmentFooter(
                      AssignOperator(
                      ) [AssignOperator]
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              IntConstantFactor(
                               1
                              ) [IntConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [AssignmentFooter]
                  ) [AssignmentDesignatorStatement]
                ) [DesignatorBasedStatement]
                ElseStatement(
                  ElseStatementStart(
                  ) [ElseStatementStart]
                  IfOptElseStatement(
                    IfStatementHeader(
                      IfStatementHeaderStart(
                      ) [IfStatementHeaderStart]
                      SingleTermCondition(
                        SingleFactConditionTerm(
                          ComplexConditionFact(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     inc
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            EqOperator(
                            ) [EqOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    IntConstantFactor(
                                     2
                                    ) [IntConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ComplexConditionFact]
                        ) [SingleFactConditionTerm]
                      ) [SingleTermCondition]
                    ) [IfStatementHeader]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           pom
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   a
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                    NoElseStatment(
                    ) [NoElseStatment]
                  ) [IfOptElseStatement]
                ) [ElseStatement]
              ) [IfOptElseStatement]
            ) [MultipleStatements]
            ReturnStatement(
              ReturnValue(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      MethodCallFactor(
                        MethodCall(
                          MethodCallHeader(
                            IdentifierDesignator(
                             sum
                            ) [IdentifierDesignator]
                          ) [MethodCallHeader]
                          ActualParameters(
                            MultipleActualParameters(
                              SingleActualParameter(
                                ActualParameter(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           a
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ActualParameter]
                              ) [SingleActualParameter]
                              ActualParameter(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         pom
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ActualParameter]
                            ) [MultipleActualParameters]
                          ) [ActualParameters]
                        ) [MethodCall]
                      ) [MethodCallFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
              ) [ReturnValue]
            ) [ReturnStatement]
          ) [MultipleStatements]
        ) [MethodDeclaration]
      ) [MultipleMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnType(
            Type(
             bool
            ) [Type]
          ) [ReturnType]
         verify
        ) [MethodHeader]
        NoFormalParameters(
        ) [NoFormalParameters]
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          MultipleStatements(
            NoStatements(
            ) [NoStatements]
            PrintStatement(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    ConstantFactor(
                      CharConstantFactor(
                       v
                      ) [CharConstantFactor]
                    ) [ConstantFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
              NoPrintWidth(
              ) [NoPrintWidth]
            ) [PrintStatement]
          ) [MultipleStatements]
          ReturnStatement(
            ReturnValue(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    ConstantFactor(
                      BoolConstantFactor(
                       false
                      ) [BoolConstantFactor]
                    ) [ConstantFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
            ) [ReturnValue]
          ) [ReturnStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      NoLocalVarDeclarations(
      ) [NoLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  NoStatements(
                                                  ) [NoStatements]
                                                  IfOptElseStatement(
                                                    IfStatementHeader(
                                                      IfStatementHeaderStart(
                                                      ) [IfStatementHeaderStart]
                                                      SingleTermCondition(
                                                        SingleFactConditionTerm(
                                                          ComplexConditionFact(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     1
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            NeqOperator(
                                                            ) [NeqOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     1
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ComplexConditionFact]
                                                        ) [SingleFactConditionTerm]
                                                      ) [SingleTermCondition]
                                                    ) [IfStatementHeader]
                                                    PrintStatement(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          MinusSign(
                                                          ) [MinusSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               6
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                      NoPrintWidth(
                                                      ) [NoPrintWidth]
                                                    ) [PrintStatement]
                                                    ElseStatement(
                                                      ElseStatementStart(
                                                      ) [ElseStatementStart]
                                                      PrintStatement(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 0
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                        NoPrintWidth(
                                                        ) [NoPrintWidth]
                                                      ) [PrintStatement]
                                                    ) [ElseStatement]
                                                  ) [IfOptElseStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      IdentifierDesignator(
                                                       ibool
                                                      ) [IdentifierDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              BoolConstantFactor(
                                                               false
                                                              ) [BoolConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    IdentifierDesignator(
                                                     i
                                                    ) [IdentifierDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             0
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            ForStatement(
                                              ForStatementHeader(
                                                ForStatementHeaderStart(
                                                ) [ForStatementHeaderStart]
                                                SingleDesignatorStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               0
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [SingleDesignatorStatement]
                                                SingleCondition(
                                                  SingleTermCondition(
                                                    SingleFactConditionTerm(
                                                      ComplexConditionFact(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 i
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                        LssOperator(
                                                        ) [LssOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 5
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ComplexConditionFact]
                                                    ) [SingleFactConditionTerm]
                                                  ) [SingleTermCondition]
                                                ) [SingleCondition]
                                                SingleDesignatorStatement(
                                                  IncrementDesignatorStatement(
                                                    IdentifierDesignator(
                                                     i
                                                    ) [IdentifierDesignator]
                                                  ) [IncrementDesignatorStatement]
                                                ) [SingleDesignatorStatement]
                                              ) [ForStatementHeader]
                                              StatementBlock(
                                                MultipleStatements(
                                                  NoStatements(
                                                  ) [NoStatements]
                                                  IfOptElseStatement(
                                                    IfStatementHeader(
                                                      IfStatementHeaderStart(
                                                      ) [IfStatementHeaderStart]
                                                      SingleTermCondition(
                                                        SingleFactConditionTerm(
                                                          ComplexConditionFact(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            EqOperator(
                                                            ) [EqOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     2
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ComplexConditionFact]
                                                        ) [SingleFactConditionTerm]
                                                      ) [SingleTermCondition]
                                                    ) [IfStatementHeader]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          IdentifierDesignator(
                                                           ibool
                                                          ) [IdentifierDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  BoolConstantFactor(
                                                                   true
                                                                  ) [BoolConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                    NoElseStatment(
                                                    ) [NoElseStatment]
                                                  ) [IfOptElseStatement]
                                                ) [MultipleStatements]
                                              ) [StatementBlock]
                                            ) [ForStatement]
                                          ) [MultipleStatements]
                                          IfOptElseStatement(
                                            IfStatementHeader(
                                              IfStatementHeaderStart(
                                              ) [IfStatementHeaderStart]
                                              SingleTermCondition(
                                                SingleFactConditionTerm(
                                                  SimpleConditionFact(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             ibool
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [SimpleConditionFact]
                                                ) [SingleFactConditionTerm]
                                              ) [SingleTermCondition]
                                            ) [IfStatementHeader]
                                            IfOptElseStatement(
                                              IfStatementHeader(
                                                IfStatementHeaderStart(
                                                ) [IfStatementHeaderStart]
                                                SingleTermCondition(
                                                  SingleFactConditionTerm(
                                                    ComplexConditionFact(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               i
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                      EqOperator(
                                                      ) [EqOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               5
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ComplexConditionFact]
                                                  ) [SingleFactConditionTerm]
                                                ) [SingleTermCondition]
                                              ) [IfStatementHeader]
                                              PrintStatement(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         1
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                NoPrintWidth(
                                                ) [NoPrintWidth]
                                              ) [PrintStatement]
                                              ElseStatement(
                                                ElseStatementStart(
                                                ) [ElseStatementStart]
                                                PrintStatement(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      MinusSign(
                                                      ) [MinusSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           1
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  NoPrintWidth(
                                                  ) [NoPrintWidth]
                                                ) [PrintStatement]
                                              ) [ElseStatement]
                                            ) [IfOptElseStatement]
                                            NoElseStatment(
                                            ) [NoElseStatment]
                                          ) [IfOptElseStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              IdentifierDesignator(
                                               niz
                                              ) [IdentifierDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    AllocatorFactor(
                                                      Type(
                                                       int
                                                      ) [Type]
                                                      SingleArrayIndexer(
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   3
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [SingleArrayIndexer]
                                                    ) [AllocatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              IdentifierDesignator(
                                               niz
                                              ) [IdentifierDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         0
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     1
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          ElementAccessDesignator(
                                            IdentifierDesignator(
                                             niz
                                            ) [IdentifierDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       1
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   2
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        ElementAccessDesignator(
                                          IdentifierDesignator(
                                           niz
                                          ) [IdentifierDesignator]
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     2
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [ElementAccessDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          MultipleTermsExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                MethodCallFactor(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      IdentifierDesignator(
                                                       sum
                                                      ) [IdentifierDesignator]
                                                    ) [MethodCallHeader]
                                                    ActualParameters(
                                                      MultipleActualParameters(
                                                        SingleActualParameter(
                                                          ActualParameter(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    ElementAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       niz
                                                                      ) [IdentifierDesignator]
                                                                      ArrayIndexer(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 1
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ArrayIndexer]
                                                                    ) [ElementAccessDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ActualParameter]
                                                        ) [SingleActualParameter]
                                                        ActualParameter(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  ElementAccessDesignator(
                                                                    IdentifierDesignator(
                                                                     niz
                                                                    ) [IdentifierDesignator]
                                                                    ArrayIndexer(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               0
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ArrayIndexer]
                                                                  ) [ElementAccessDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ActualParameter]
                                                      ) [MultipleActualParameters]
                                                    ) [ActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                            AddOperator(
                                            ) [AddOperator]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 1
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [MultipleTermsExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                IfOptElseStatement(
                                  IfStatementHeader(
                                    IfStatementHeaderStart(
                                    ) [IfStatementHeaderStart]
                                    MultipleTermsCondition(
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    ElementAccessDesignator(
                                                      IdentifierDesignator(
                                                       niz
                                                      ) [IdentifierDesignator]
                                                      ArrayIndexer(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 2
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ArrayIndexer]
                                                    ) [ElementAccessDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            EqOperator(
                                            ) [EqOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     4
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                      SingleFactConditionTerm(
                                        SimpleConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                MethodCallFactor(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      IdentifierDesignator(
                                                       verify
                                                      ) [IdentifierDesignator]
                                                    ) [MethodCallHeader]
                                                    NoActualParameters(
                                                    ) [NoActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [SimpleConditionFact]
                                      ) [SingleFactConditionTerm]
                                    ) [MultipleTermsCondition]
                                  ) [IfStatementHeader]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          MethodCallFactor(
                                            MethodCall(
                                              MethodCallHeader(
                                                IdentifierDesignator(
                                                 ord
                                                ) [IdentifierDesignator]
                                              ) [MethodCallHeader]
                                              ActualParameters(
                                                SingleActualParameter(
                                                  ActualParameter(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            CharConstantFactor(
                                                             A
                                                            ) [CharConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ActualParameter]
                                                ) [SingleActualParameter]
                                              ) [ActualParameters]
                                            ) [MethodCall]
                                          ) [MethodCallFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                  ElseStatement(
                                    ElseStatementStart(
                                    ) [ElseStatementStart]
                                    PrintStatement(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            MethodCallFactor(
                                              MethodCall(
                                                MethodCallHeader(
                                                  IdentifierDesignator(
                                                   ord
                                                  ) [IdentifierDesignator]
                                                ) [MethodCallHeader]
                                                ActualParameters(
                                                  SingleActualParameter(
                                                    ActualParameter(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              CharConstantFactor(
                                                               a
                                                              ) [CharConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ActualParameter]
                                                  ) [SingleActualParameter]
                                                ) [ActualParameters]
                                              ) [MethodCall]
                                            ) [MethodCallFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      NoPrintWidth(
                                      ) [NoPrintWidth]
                                    ) [PrintStatement]
                                  ) [ElseStatement]
                                ) [IfOptElseStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         eol
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           0
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          ForStatement(
                            ForStatementHeader(
                              ForStatementHeaderStart(
                              ) [ForStatementHeaderStart]
                              NoDesignatorStatement(
                              ) [NoDesignatorStatement]
                              SingleCondition(
                                SingleTermCondition(
                                  SingleFactConditionTerm(
                                    ComplexConditionFact(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               i
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      LssOperator(
                                      ) [LssOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               10
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ComplexConditionFact]
                                  ) [SingleFactConditionTerm]
                                ) [SingleTermCondition]
                              ) [SingleCondition]
                              NoDesignatorStatement(
                              ) [NoDesignatorStatement]
                            ) [ForStatementHeader]
                            StatementBlock(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    IfOptElseStatement(
                                      IfStatementHeader(
                                        IfStatementHeaderStart(
                                        ) [IfStatementHeaderStart]
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              EqOperator(
                                              ) [EqOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       3
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [IfStatementHeader]
                                      StatementBlock(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              IncrementDesignatorStatement(
                                                IdentifierDesignator(
                                                 i
                                                ) [IdentifierDesignator]
                                              ) [IncrementDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          ContinueStatement(
                                          ) [ContinueStatement]
                                        ) [MultipleStatements]
                                      ) [StatementBlock]
                                      NoElseStatment(
                                      ) [NoElseStatment]
                                    ) [IfOptElseStatement]
                                  ) [MultipleStatements]
                                  IfOptElseStatement(
                                    IfStatementHeader(
                                      IfStatementHeaderStart(
                                      ) [IfStatementHeaderStart]
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     i
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            EqOperator(
                                            ) [EqOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     4
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                    ) [IfStatementHeader]
                                    BreakStatement(
                                    ) [BreakStatement]
                                    NoElseStatment(
                                    ) [NoElseStatment]
                                  ) [IfOptElseStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       i
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            MethodCallFactor(
                                              MethodCall(
                                                MethodCallHeader(
                                                  IdentifierDesignator(
                                                   inkrement
                                                  ) [IdentifierDesignator]
                                                ) [MethodCallHeader]
                                                ActualParameters(
                                                  MultipleActualParameters(
                                                    SingleActualParameter(
                                                      ActualParameter(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 i
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ActualParameter]
                                                    ) [SingleActualParameter]
                                                    ActualParameter(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               1
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ActualParameter]
                                                  ) [MultipleActualParameters]
                                                ) [ActualParameters]
                                              ) [MethodCall]
                                            ) [MethodCallFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                            ) [StatementBlock]
                          ) [ForStatement]
                        ) [MultipleStatements]
                        IfOptElseStatement(
                          IfStatementHeader(
                            IfStatementHeaderStart(
                            ) [IfStatementHeaderStart]
                            SingleTermCondition(
                              MultipleFactsConditionTerm(
                                SingleFactConditionTerm(
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    EqOperator(
                                    ) [EqOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             3
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [SingleFactConditionTerm]
                                SimpleConditionFact(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        MethodCallFactor(
                                          MethodCall(
                                            MethodCallHeader(
                                              IdentifierDesignator(
                                               verify
                                              ) [IdentifierDesignator]
                                            ) [MethodCallHeader]
                                            NoActualParameters(
                                            ) [NoActualParameters]
                                          ) [MethodCall]
                                        ) [MethodCallFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [SimpleConditionFact]
                              ) [MultipleFactsConditionTerm]
                            ) [SingleTermCondition]
                          ) [IfStatementHeader]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    IntConstantFactor(
                                     4
                                    ) [IntConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                          ElseStatement(
                            ElseStatementStart(
                            ) [ElseStatementStart]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  MinusSign(
                                  ) [MinusSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       4
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [ElseStatement]
                        ) [IfOptElseStatement]
                      ) [MultipleStatements]
                      ReadStatement(
                        ElementAccessDesignator(
                          IdentifierDesignator(
                           niz
                          ) [IdentifierDesignator]
                          ArrayIndexer(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    IntConstantFactor(
                                     0
                                    ) [IntConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ArrayIndexer]
                        ) [ElementAccessDesignator]
                      ) [ReadStatement]
                    ) [MultipleStatements]
                    ReadStatement(
                      ElementAccessDesignator(
                        IdentifierDesignator(
                         niz
                        ) [IdentifierDesignator]
                        ArrayIndexer(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   1
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ArrayIndexer]
                      ) [ElementAccessDesignator]
                    ) [ReadStatement]
                  ) [MultipleStatements]
                  ReadStatement(
                    ElementAccessDesignator(
                      IdentifierDesignator(
                       niz
                      ) [IdentifierDesignator]
                      ArrayIndexer(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                IntConstantFactor(
                                 2
                                ) [IntConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [ArrayIndexer]
                    ) [ElementAccessDesignator]
                  ) [ReadStatement]
                ) [MultipleStatements]
                PrintStatement(
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        DesignatorFactor(
                          IdentifierDesignator(
                           eol
                          ) [IdentifierDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                  NoPrintWidth(
                  ) [NoPrintWidth]
                ) [PrintStatement]
              ) [MultipleStatements]
              PrintStatement(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      MethodCallFactor(
                        MethodCall(
                          MethodCallHeader(
                            IdentifierDesignator(
                             sum
                            ) [IdentifierDesignator]
                          ) [MethodCallHeader]
                          ActualParameters(
                            MultipleActualParameters(
                              SingleActualParameter(
                                ActualParameter(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        MethodCallFactor(
                                          MethodCall(
                                            MethodCallHeader(
                                              IdentifierDesignator(
                                               sum
                                              ) [IdentifierDesignator]
                                            ) [MethodCallHeader]
                                            ActualParameters(
                                              MultipleActualParameters(
                                                SingleActualParameter(
                                                  ActualParameter(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            ElementAccessDesignator(
                                                              IdentifierDesignator(
                                                               niz
                                                              ) [IdentifierDesignator]
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         0
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [ElementAccessDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ActualParameter]
                                                ) [SingleActualParameter]
                                                ActualParameter(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          ElementAccessDesignator(
                                                            IdentifierDesignator(
                                                             niz
                                                            ) [IdentifierDesignator]
                                                            ArrayIndexer(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      IntConstantFactor(
                                                                       1
                                                                      ) [IntConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ArrayIndexer]
                                                          ) [ElementAccessDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ActualParameter]
                                              ) [MultipleActualParameters]
                                            ) [ActualParameters]
                                          ) [MethodCall]
                                        ) [MethodCallFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ActualParameter]
                              ) [SingleActualParameter]
                              ActualParameter(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        ElementAccessDesignator(
                                          IdentifierDesignator(
                                           niz
                                          ) [IdentifierDesignator]
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     2
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [ElementAccessDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ActualParameter]
                            ) [MultipleActualParameters]
                          ) [ActualParameters]
                        ) [MethodCall]
                      ) [MethodCallFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
                NoPrintWidth(
                ) [NoPrintWidth]
              ) [PrintStatement]
            ) [MultipleStatements]
            ForEachStatement(
              ForEachStatementHeader(
                ForEachStatementHeaderStart(
                ) [ForEachStatementHeaderStart]
               i
                IdentifierDesignator(
                 niz
                ) [IdentifierDesignator]
              ) [ForEachStatementHeader]
              StatementBlock(
                MultipleStatements(
                  NoStatements(
                  ) [NoStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             i
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
              ) [StatementBlock]
            ) [ForEachStatement]
          ) [MultipleStatements]
          PrintStatement(
            LeftExpression(
              SingleTermExpression(
                NoSign(
                ) [NoSign]
                SingleFactorTerm(
                  DesignatorFactor(
                    IdentifierDesignator(
                     eol
                    ) [IdentifierDesignator]
                  ) [DesignatorFactor]
                ) [SingleFactorTerm]
              ) [SingleTermExpression]
            ) [LeftExpression]
            NoPrintWidth(
            ) [NoPrintWidth]
          ) [PrintStatement]
        ) [MultipleStatements]
        PrintStatement(
          LeftExpression(
            SingleTermExpression(
              NoSign(
              ) [NoSign]
              SingleFactorTerm(
                MethodCallFactor(
                  MethodCall(
                    MethodCallHeader(
                      IdentifierDesignator(
                       inkrement
                      ) [IdentifierDesignator]
                    ) [MethodCallHeader]
                    ActualParameters(
                      MultipleActualParameters(
                        SingleActualParameter(
                          ActualParameter(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    ElementAccessDesignator(
                                      IdentifierDesignator(
                                       niz
                                      ) [IdentifierDesignator]
                                      ArrayIndexer(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 2
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ArrayIndexer]
                                    ) [ElementAccessDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ActualParameter]
                        ) [SingleActualParameter]
                        ActualParameter(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   2
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ActualParameter]
                      ) [MultipleActualParameters]
                    ) [ActualParameters]
                  ) [MethodCall]
                ) [MethodCallFactor]
              ) [SingleFactorTerm]
            ) [SingleTermExpression]
          ) [LeftExpression]
          NoPrintWidth(
          ) [NoPrintWidth]
        ) [PrintStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - test302.mj:5: SEMANTIC ANALYZER: Defined int constant 'jedan'. Symbol node: Constant 'jedan': type = 'int', adr = 1, level = 0
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test302.mj:7: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test302.mj:8: SEMANTIC ANALYZER: Defined bool variable 'ibool'. Symbol node: Variable 'ibool': type = 'bool', adr = 1, level = 0
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test302.mj:10: SEMANTIC ANALYZER: Defined int array variable 'niz'. Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test302.mj:13: SEMANTIC ANALYZER: Defined int formal parameter 'z'. Symbol node: Formal parameter 'z': type = 'int', adr = 0, level = 1
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test302.mj:13: SEMANTIC ANALYZER: Defined int formal parameter 'd'. Symbol node: Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:15: SEMANTIC ANALYZER: Found formal parameter usage 'z'! Symbol node: Formal parameter 'z': type = 'int', adr = 0, level = 1
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:15: SEMANTIC ANALYZER: Found formal parameter usage 'd'! Symbol node: Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test302.mj:13: SEMANTIC ANALYZER: Defined method 'sum'. Symbol node: Method 'sum': type = 'int', adr = 0, level = 2
  Formal parameter 'z': type = 'int', adr = 0, level = 1
  Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test302.mj:18: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test302.mj:18: SEMANTIC ANALYZER: Defined int formal parameter 'inc'. Symbol node: Formal parameter 'inc': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test302.mj:18: SEMANTIC ANALYZER: Defined int variable 'pom'. Symbol node: Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:20: SEMANTIC ANALYZER: Found formal parameter usage 'inc'! Symbol node: Formal parameter 'inc': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:20: SEMANTIC ANALYZER: Found symbolic constant usage 'jedan'! Symbol node: Constant 'jedan': type = 'int', adr = 1, level = 0
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:20: SEMANTIC ANALYZER: Found local variable usage 'pom'! Symbol node: Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:21: SEMANTIC ANALYZER: Found formal parameter usage 'inc'! Symbol node: Formal parameter 'inc': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:21: SEMANTIC ANALYZER: Found local variable usage 'pom'! Symbol node: Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:21: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:23: SEMANTIC ANALYZER: Found global method call 'sum'! Symbol node: Method 'sum': type = 'int', adr = 0, level = 2
  Formal parameter 'z': type = 'int', adr = 0, level = 1
  Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:23: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 0, level = 1
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:23: SEMANTIC ANALYZER: Found local variable usage 'pom'! Symbol node: Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test302.mj:18: SEMANTIC ANALYZER: Defined method 'inkrement'. Symbol node: Method 'inkrement': type = 'int', adr = 0, level = 2
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'inc': type = 'int', adr = 1, level = 1
  Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - test302.mj:26: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:26: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test302.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test302.mj:27: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:28: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test302.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test302.mj:26: SEMANTIC ANALYZER: Defined method 'verify'. Symbol node: Method 'verify': type = 'bool', adr = 0, level = 0
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test302.mj:31: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:34: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:36: SEMANTIC ANALYZER: Found global variable usage 'ibool'! Symbol node: Variable 'ibool': type = 'bool', adr = 1, level = 0
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:37: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:37: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:37: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:37: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:38: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:38: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:38: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - test302.mj:38: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:40: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:40: SEMANTIC ANALYZER: Found global variable usage 'ibool'! Symbol node: Variable 'ibool': type = 'bool', adr = 1, level = 0
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - test302.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:43: SEMANTIC ANALYZER: Found global variable usage 'ibool'! Symbol node: Variable 'ibool': type = 'bool', adr = 1, level = 0
DEBUG - test302.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - test302.mj:43: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:44: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:20: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:45: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:45: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:45: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:44: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:43: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:47: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:47: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:48: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:48: SEMANTIC ANALYZER: Found array element access 'niz[0]'! Symbol node: Array element 'niz[0]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:48: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:49: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:49: SEMANTIC ANALYZER: Found array element access 'niz[1]'! Symbol node: Array element 'niz[1]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:49: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found array element access 'niz[2]'! Symbol node: Array element 'niz[2]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found global method call 'sum'! Symbol node: Method 'sum': type = 'int', adr = 0, level = 2
  Formal parameter 'z': type = 'int', adr = 0, level = 1
  Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found array element access 'niz[1]'! Symbol node: Array element 'niz[1]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:15: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:50: SEMANTIC ANALYZER: Found array element access 'niz[0]'! Symbol node: Array element 'niz[0]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:22: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test302.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:50: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:51: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:51: SEMANTIC ANALYZER: Found array element access 'niz[2]'! Symbol node: Array element 'niz[2]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:51: SEMANTIC ANALYZER: Found global method call 'verify'! Symbol node: Method 'verify': type = 'bool', adr = 0, level = 0
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:51: SEMANTIC ANALYZER: Found global method call 'ord'! Symbol node: Method 'ord': type = 'int', adr = 0, level = 1
  Formal parameter 'ch': type = 'char', adr = 0, level = 1
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:40: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:52: SEMANTIC ANALYZER: Found global method call 'ord'! Symbol node: Method 'ord': type = 'int', adr = 0, level = 1
  Formal parameter 'ch': type = 'char', adr = 0, level = 1
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:51: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:54: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test302.mj:54: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:55: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:55: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:55: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:56: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:7: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - test302.mj:56: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:58: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:60: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:60: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:60: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - test302.mj:58: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:63: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - test302.mj:63: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:64: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:64: SEMANTIC ANALYZER: Found global method call 'inkrement'! Symbol node: Method 'inkrement': type = 'int', adr = 0, level = 2
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'inc': type = 'int', adr = 1, level = 1
  Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:64: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:19: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:64: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:56: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:67: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:5: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:67: SEMANTIC ANALYZER: Found global method call 'verify'! Symbol node: Method 'verify': type = 'bool', adr = 0, level = 0
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:31: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:68: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:68: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:68: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:68: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:68: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:67: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:70: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:70: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:70: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:70: SEMANTIC ANALYZER: Found array element access 'niz[0]'! Symbol node: Array element 'niz[0]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:70: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - test302.mj:71: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:71: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:71: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:71: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:71: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:71: SEMANTIC ANALYZER: Found array element access 'niz[1]'! Symbol node: Array element 'niz[1]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:71: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - test302.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:72: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:72: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:72: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:72: SEMANTIC ANALYZER: Found array element access 'niz[2]'! Symbol node: Array element 'niz[2]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:72: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - test302.mj:73: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:73: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test302.mj:73: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:73: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found global method call 'sum'! Symbol node: Method 'sum': type = 'int', adr = 0, level = 2
  Formal parameter 'z': type = 'int', adr = 0, level = 1
  Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found global method call 'sum'! Symbol node: Method 'sum': type = 'int', adr = 0, level = 2
  Formal parameter 'z': type = 'int', adr = 0, level = 1
  Formal parameter 'd': type = 'int', adr = 1, level = 1
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found array element access 'niz[0]'! Symbol node: Array element 'niz[0]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:17: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found array element access 'niz[1]'! Symbol node: Array element 'niz[1]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:24: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:13: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:75: SEMANTIC ANALYZER: Found array element access 'niz[2]'! Symbol node: Array element 'niz[2]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:33: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:77: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:77: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:77: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - test302.mj:78: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:78: SEMANTIC ANALYZER: Found global variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 0
DEBUG - test302.mj:78: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:9: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:77: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - test302.mj:81: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:81: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test302.mj:81: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:81: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:82: SEMANTIC ANALYZER: Found global method call 'inkrement'! Symbol node: Method 'inkrement': type = 'int', adr = 0, level = 2
  Formal parameter 'a': type = 'int', adr = 0, level = 1
  Formal parameter 'inc': type = 'int', adr = 1, level = 1
  Variable 'pom': type = 'int', adr = 2, level = 1
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test302.mj:82: SEMANTIC ANALYZER: Found global variable usage 'niz'! Symbol node: Variable 'niz': type = 'array of int', adr = 2, level = 0
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test302.mj:82: SEMANTIC ANALYZER: Found array element access 'niz[2]'! Symbol node: Array element 'niz[2]': type = 'int', adr = -1, level = -1
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test302.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test302.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test302.mj:31: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test302.mj:31: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = 0, level = 0
DEBUG - test302.mj:3: SEMANTIC ANALYZER: Visited node: 'Program'.
INFO  - test302.mj:3: SEMANTIC ANALYZER: Defined program 'test302'. Symbol node: Program 'test302': type = 'none', adr = 0, level = 1
  Constant 'jedan': type = 'int', adr = 1, level = 0
  Variable 'i': type = 'int', adr = 0, level = 0
  Variable 'ibool': type = 'bool', adr = 1, level = 0
  Variable 'niz': type = 'array of int', adr = 2, level = 0
  Method 'sum': type = 'int', adr = 0, level = 2
    Formal parameter 'z': type = 'int', adr = 0, level = 1
    Formal parameter 'd': type = 'int', adr = 1, level = 1
  Method 'inkrement': type = 'int', adr = 0, level = 2
    Formal parameter 'a': type = 'int', adr = 0, level = 1
    Formal parameter 'inc': type = 'int', adr = 1, level = 1
    Variable 'pom': type = 'int', adr = 2, level = 1
  Method 'verify': type = 'bool', adr = 0, level = 0
  Method 'main': type = 'void', adr = 0, level = 0
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'ProgramHeader'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test302.mj:18: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:23: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:23: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:23: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:23: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:23: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:23: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test302.mj:18: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test302.mj:26: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test302.mj:27: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:28: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test302.mj:26: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test302.mj:31: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - test302.mj:34: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:36: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:36: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:36: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:36: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:37: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:37: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:37: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:37: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:43: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:44: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:44: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:44: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:20: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - test302.mj:45: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:45: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:45: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:44: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:43: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:47: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:47: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:47: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:47: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:48: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:48: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:48: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:48: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:48: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:49: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:49: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:49: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:49: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:49: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:10: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test302.mj:50: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:18: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - test302.mj:18: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - test302.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:52: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:52: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:51: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:54: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:55: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:55: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:55: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - CODE GENERATOR: Visited node: 'NoDesignatorStatement'.
DEBUG - test302.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:56: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:7: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - CODE GENERATOR: Visited node: 'NoDesignatorStatement'.
DEBUG - test302.mj:56: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:58: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:58: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:58: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:58: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:60: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:60: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - test302.mj:58: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:63: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:63: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:63: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:63: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - test302.mj:63: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:64: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test302.mj:56: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - test302.mj:5: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:31: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - test302.mj:68: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:68: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:68: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:67: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test302.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:70: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:70: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:70: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - test302.mj:71: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:71: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:71: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:71: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - test302.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:72: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:72: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:72: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - test302.mj:73: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:73: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:75: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:78: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:78: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:9: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:81: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:81: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test302.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test302.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:82: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test302.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test302.mj:31: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test302.mj:3: CODE GENERATOR: Visited node: 'Program'.
