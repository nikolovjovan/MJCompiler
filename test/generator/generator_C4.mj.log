DEBUG - generator_C4.mj:2:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - generator_C4.mj:2:9: LEXER: Found symbol: '#55' with value: 'P'
DEBUG - generator_C4.mj:3:5: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - generator_C4.mj:3:11: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:3:15: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:3:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:3:22: LEXER: Found symbol: '#52' with value: '10'
DEBUG - generator_C4.mj:3:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:5:5: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - generator_C4.mj:5:14: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C4.mj:5:20: LEXER: Found symbol: '#55' with value: 'Tab'
DEBUG - generator_C4.mj:5:24: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:6:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - generator_C4.mj:6:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:6:21: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:6:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:7:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:8:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:8:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - generator_C4.mj:8:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:8:33: LEXER: Found symbol: '#55' with value: 'getp'
DEBUG - generator_C4.mj:8:37: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:8:38: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:8:42: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:8:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:8:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:9:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:9:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - generator_C4.mj:9:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:9:33: LEXER: Found symbol: '#55' with value: 'getn'
DEBUG - generator_C4.mj:9:37: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:9:38: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:9:42: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:9:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:9:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:10:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:10:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:10:24: LEXER: Found symbol: '#55' with value: 'getSize'
DEBUG - generator_C4.mj:10:31: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:10:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:10:34: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:10:36: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C4.mj:10:43: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:10:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:10:48: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:11:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:12:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:14:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C4.mj:14:11: LEXER: Found symbol: '#55' with value: 'Table'
DEBUG - generator_C4.mj:14:17: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - generator_C4.mj:14:25: LEXER: Found symbol: '#55' with value: 'Tab'
DEBUG - generator_C4.mj:14:29: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:15:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:15:16: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:15:20: LEXER: Found symbol: '#55' with value: 'pos'
DEBUG - generator_C4.mj:15:23: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:15:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:15:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:15:27: LEXER: Found symbol: '#55' with value: 'neg'
DEBUG - generator_C4.mj:15:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:15:31: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:15:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:16:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:17:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:17:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C4.mj:17:25: LEXER: Found symbol: '#55' with value: 'putp'
DEBUG - generator_C4.mj:17:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:17:31: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:17:35: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_C4.mj:17:36: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:17:38: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:17:42: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:17:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:17:47: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:17:49: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C4.mj:17:53: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:17:54: LEXER: Found symbol: '#55' with value: 'pos'
DEBUG - generator_C4.mj:17:57: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:17:58: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:17:61: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:17:62: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:17:63: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_C4.mj:17:64: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:17:66: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:18:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:18:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C4.mj:18:25: LEXER: Found symbol: '#55' with value: 'putn'
DEBUG - generator_C4.mj:18:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:18:31: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:18:35: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_C4.mj:18:36: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:18:38: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:18:42: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:18:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:18:47: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:18:49: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C4.mj:18:53: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:18:54: LEXER: Found symbol: '#55' with value: 'neg'
DEBUG - generator_C4.mj:18:57: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:18:58: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:18:61: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:18:62: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:18:63: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_C4.mj:18:64: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:18:66: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:19:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:19:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:19:24: LEXER: Found symbol: '#55' with value: 'getp'
DEBUG - generator_C4.mj:19:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:19:30: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:19:34: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:19:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:19:39: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:19:41: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C4.mj:19:48: LEXER: Found symbol: '#55' with value: 'pos'
DEBUG - generator_C4.mj:19:51: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:19:52: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:19:55: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:19:56: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:19:58: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:20:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C4.mj:20:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:20:24: LEXER: Found symbol: '#55' with value: 'getn'
DEBUG - generator_C4.mj:20:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:20:30: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:20:34: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:20:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:20:39: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:20:41: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C4.mj:20:48: LEXER: Found symbol: '#55' with value: 'neg'
DEBUG - generator_C4.mj:20:51: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:20:52: LEXER: Found symbol: '#55' with value: 'idx'
DEBUG - generator_C4.mj:20:55: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:20:56: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:20:58: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:21:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:22:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:24:5: LEXER: Found symbol: '#55' with value: 'Table'
DEBUG - generator_C4.mj:24:11: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:24:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:25:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:26:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C4.mj:26:10: LEXER: Found symbol: '#55' with value: 'f'
DEBUG - generator_C4.mj:26:11: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:26:12: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C4.mj:26:17: LEXER: Found symbol: '#55' with value: 'ch'
DEBUG - generator_C4.mj:26:19: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:26:21: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:26:25: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_C4.mj:26:26: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:26:28: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:26:32: LEXER: Found symbol: '#55' with value: 'arg'
DEBUG - generator_C4.mj:26:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:26:37: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:26:41: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:26:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:26:44: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:27:9: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:27:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:27:13: LEXER: Found symbol: '#55' with value: 'arg'
DEBUG - generator_C4.mj:27:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:28:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:30:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C4.mj:30:10: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - generator_C4.mj:30:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:30:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:30:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:30:21: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:30:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:30:24: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:30:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:30:27: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C4.mj:30:32: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - generator_C4.mj:30:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:30:35: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:32:9: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:32:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:32:15: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C4.mj:32:19: LEXER: Found symbol: '#55' with value: 'Table'
DEBUG - generator_C4.mj:32:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:33:9: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:33:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:33:13: LEXER: Found symbol: '#55' with value: 'pos'
DEBUG - generator_C4.mj:33:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:33:19: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C4.mj:33:23: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:33:27: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:33:28: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:33:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:33:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:34:9: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:34:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:34:13: LEXER: Found symbol: '#55' with value: 'neg'
DEBUG - generator_C4.mj:34:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:34:19: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C4.mj:34:23: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C4.mj:34:27: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C4.mj:34:28: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:34:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C4.mj:34:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:35:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_C4.mj:35:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:35:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:35:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:35:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C4.mj:35:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:35:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:35:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:35:25: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:35:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:35:31: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:35:32: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_C4.mj:35:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:36:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:37:13: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:37:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:37:17: LEXER: Found symbol: '#55' with value: 'putp'
DEBUG - generator_C4.mj:37:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:37:22: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C4.mj:37:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:37:25: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:37:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:37:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:38:13: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:38:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:38:17: LEXER: Found symbol: '#55' with value: 'putn'
DEBUG - generator_C4.mj:38:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:38:22: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C4.mj:38:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:38:25: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:38:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:38:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:39:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:40:9: LEXER: Found symbol: '#55' with value: 'f'
DEBUG - generator_C4.mj:40:10: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:40:11: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - generator_C4.mj:40:12: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:40:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:40:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:40:17: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:40:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:40:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:42:9: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_C4.mj:42:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:42:14: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:42:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:42:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:43:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_C4.mj:43:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:43:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:43:15: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_C4.mj:43:16: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:43:21: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:43:23: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:43:25: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_C4.mj:43:28: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:43:30: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:43:32: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:43:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:43:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:43:39: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:44:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C4.mj:44:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:44:17: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C4.mj:44:19: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_C4.mj:44:22: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:44:24: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_C4.mj:44:27: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:44:29: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:44:31: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:44:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:44:37: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:45:17: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:45:20: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:45:21: LEXER: Found symbol: '#55' with value: 'putp'
DEBUG - generator_C4.mj:45:25: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:45:26: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:45:29: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:45:30: LEXER: Found symbol: '#55' with value: 'getp'
DEBUG - generator_C4.mj:45:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:45:35: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:45:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:45:38: LEXER: Found symbol: '#22' with value: '+'
DEBUG - generator_C4.mj:45:40: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C4.mj:45:41: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:45:43: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:45:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:45:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:46:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:46:15: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_C4.mj:46:20: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C4.mj:46:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:46:24: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_C4.mj:46:25: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:46:30: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:46:32: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:46:34: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_C4.mj:46:37: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:46:39: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:46:41: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C4.mj:46:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:46:44: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:47:17: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:47:20: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:47:21: LEXER: Found symbol: '#55' with value: 'putn'
DEBUG - generator_C4.mj:47:25: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:47:26: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:47:29: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:47:30: LEXER: Found symbol: '#55' with value: 'getn'
DEBUG - generator_C4.mj:47:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:47:35: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_C4.mj:47:36: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:47:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:47:39: LEXER: Found symbol: '#22' with value: '+'
DEBUG - generator_C4.mj:47:41: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C4.mj:47:42: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:47:44: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_C4.mj:47:45: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:47:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:47:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:48:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:49:13: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_C4.mj:49:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:49:18: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:49:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:49:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:50:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:52:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_C4.mj:52:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:52:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:52:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:52:18: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_C4.mj:52:19: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:52:24: LEXER: Found symbol: '#22' with value: '+'
DEBUG - generator_C4.mj:52:26: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C4.mj:52:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:52:29: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:52:31: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C4.mj:52:33: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:52:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:52:39: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:52:40: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_C4.mj:52:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:52:44: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:53:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_C4.mj:53:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:53:19: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:53:20: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:53:22: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C4.mj:53:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:53:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:54:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:55:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_C4.mj:55:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:55:15: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_C4.mj:55:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:55:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:56:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_C4.mj:56:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:56:17: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:56:19: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_C4.mj:56:21: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:56:24: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:56:25: LEXER: Found symbol: '#55' with value: 'neg'
DEBUG - generator_C4.mj:56:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:56:30: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:57:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_C4.mj:57:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:57:19: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:57:20: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:57:22: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C4.mj:57:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:57:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:58:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:59:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:59:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C4.mj:59:13: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C4.mj:59:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:60:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_C4.mj:60:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:60:17: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:60:19: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_C4.mj:60:21: LEXER: Found symbol: '#55' with value: 'val'
DEBUG - generator_C4.mj:60:24: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C4.mj:60:25: LEXER: Found symbol: '#55' with value: 'pos'
DEBUG - generator_C4.mj:60:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:60:30: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C4.mj:61:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:61:14: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_C4.mj:61:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:62:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C4.mj:62:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:62:17: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C4.mj:62:19: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C4.mj:62:22: LEXER: Found symbol: '#55' with value: 'size'
DEBUG - generator_C4.mj:62:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:62:28: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_C4.mj:62:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:63:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_C4.mj:63:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C4.mj:63:19: LEXER: Found symbol: '#55' with value: 'x'
DEBUG - generator_C4.mj:63:20: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C4.mj:63:22: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C4.mj:63:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C4.mj:63:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C4.mj:64:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:65:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:66:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C4.mj:66:2: LEXER: Found symbol: '#0' with value: ''
DEBUG - generator_C4.mj:66:2: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree: Program(
  ProgramHeader(
   P
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    MultipleProgramDeclarations(
      MultipleProgramDeclarations(
        MultipleProgramDeclarations(
          NoProgramDeclarations(
          ) [NoProgramDeclarations]
          ConstProgramDeclaration(
            ConstDeclaration(
              Type(
               int
              ) [Type]
              SingleConstAssignment(
                ConstAssignment(
                 size
                  IntConst(
                    NoSign(
                    ) [NoSign]
                   10
                  ) [IntConst]
                ) [ConstAssignment]
              ) [SingleConstAssignment]
            ) [ConstDeclaration]
          ) [ConstProgramDeclaration]
        ) [MultipleProgramDeclarations]
        AbstractClassProgramDeclaration(
          AbstractClassDeclaration(
            AbstractClassHeader(
             Tab
              NoClassBaseType(
              ) [NoClassBaseType]
            ) [AbstractClassHeader]
            MultipleClassVarDeclarations(
              NoClassVarDeclarations(
              ) [NoClassVarDeclarations]
              ClassVarDeclaration(
                PrivateAccessModifier(
                ) [PrivateAccessModifier]
                Type(
                 int
                ) [Type]
                SingleClassVariable(
                  ClassVariable(
                   size
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [ClassVariable]
                ) [SingleClassVariable]
              ) [ClassVarDeclaration]
            ) [MultipleClassVarDeclarations]
            AbstractClassMethods(
              MultipleAbstractClassMethods(
                MultipleAbstractClassMethods(
                  SingleAbstractClassMethod(
                    AbstractClassAbstractMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      AbstractMethodDeclaration(
                        AbstractMethodHeader(
                          ReturnType(
                            Type(
                             int
                            ) [Type]
                          ) [ReturnType]
                         getp
                        ) [AbstractMethodHeader]
                        FormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             i
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                        ) [FormalParameters]
                      ) [AbstractMethodDeclaration]
                    ) [AbstractClassAbstractMethodDeclaration]
                  ) [SingleAbstractClassMethod]
                  AbstractClassAbstractMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    AbstractMethodDeclaration(
                      AbstractMethodHeader(
                        ReturnType(
                          Type(
                           int
                          ) [Type]
                        ) [ReturnType]
                       getn
                      ) [AbstractMethodHeader]
                      FormalParameters(
                        SingleFormalParameter(
                          FormalParameter(
                            Type(
                             int
                            ) [Type]
                           i
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [FormalParameter]
                        ) [SingleFormalParameter]
                      ) [FormalParameters]
                    ) [AbstractMethodDeclaration]
                  ) [AbstractClassAbstractMethodDeclaration]
                ) [MultipleAbstractClassMethods]
                AbstractClassMethodDeclaration(
                  PublicAccessModifier(
                  ) [PublicAccessModifier]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnType(
                        Type(
                         int
                        ) [Type]
                      ) [ReturnType]
                     getSize
                    ) [MethodHeader]
                    NoFormalParameters(
                    ) [NoFormalParameters]
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      ReturnStatement(
                        ReturnValue(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   size
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ReturnValue]
                      ) [ReturnStatement]
                    ) [MultipleStatements]
                  ) [MethodDeclaration]
                ) [AbstractClassMethodDeclaration]
              ) [MultipleAbstractClassMethods]
            ) [AbstractClassMethods]
          ) [AbstractClassDeclaration]
        ) [AbstractClassProgramDeclaration]
      ) [MultipleProgramDeclarations]
      ClassProgramDeclaration(
        ClassDeclaration(
          ClassHeader(
           Table
            ClassBaseType(
              Type(
               Tab
              ) [Type]
            ) [ClassBaseType]
          ) [ClassHeader]
          MultipleClassVarDeclarations(
            NoClassVarDeclarations(
            ) [NoClassVarDeclarations]
            ClassVarDeclaration(
              PublicAccessModifier(
              ) [PublicAccessModifier]
              Type(
               int
              ) [Type]
              MultipleClassVariables(
                SingleClassVariable(
                  ClassVariable(
                   pos
                    ArrayBrackets(
                    ) [ArrayBrackets]
                  ) [ClassVariable]
                ) [SingleClassVariable]
                ClassVariable(
                 neg
                  ArrayBrackets(
                  ) [ArrayBrackets]
                ) [ClassVariable]
              ) [MultipleClassVariables]
            ) [ClassVarDeclaration]
          ) [MultipleClassVarDeclarations]
          ClassMethodDeclarations(
            MultipleClassMethodDeclarations(
              MultipleClassMethodDeclarations(
                MultipleClassMethodDeclarations(
                  SingleClassMethodDeclaration(
                    ClassMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         putp
                        ) [MethodHeader]
                        FormalParameters(
                          MultipleFormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               a
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             idx
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [MultipleFormalParameters]
                        ) [FormalParameters]
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          NoStatements(
                          ) [NoStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                ElementAccessDesignator(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     this
                                    ) [IdentifierDesignator]
                                   pos
                                  ) [MemberAccessDesignator]
                                  ArrayIndexer(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             idx
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ArrayIndexer]
                                ) [ElementAccessDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         a
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [ClassMethodDeclaration]
                  ) [SingleClassMethodDeclaration]
                  ClassMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnVoid(
                        ) [ReturnVoid]
                       putn
                      ) [MethodHeader]
                      FormalParameters(
                        MultipleFormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             a
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                          FormalParameter(
                            Type(
                             int
                            ) [Type]
                           idx
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [FormalParameter]
                        ) [MultipleFormalParameters]
                      ) [FormalParameters]
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        NoStatements(
                        ) [NoStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              ElementAccessDesignator(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   this
                                  ) [IdentifierDesignator]
                                 neg
                                ) [MemberAccessDesignator]
                                ArrayIndexer(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           idx
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ArrayIndexer]
                              ) [ElementAccessDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       a
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [MultipleClassMethodDeclarations]
                ClassMethodDeclaration(
                  PublicAccessModifier(
                  ) [PublicAccessModifier]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnType(
                        Type(
                         int
                        ) [Type]
                      ) [ReturnType]
                     getp
                    ) [MethodHeader]
                    FormalParameters(
                      SingleFormalParameter(
                        FormalParameter(
                          Type(
                           int
                          ) [Type]
                         idx
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [FormalParameter]
                      ) [SingleFormalParameter]
                    ) [FormalParameters]
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      ReturnStatement(
                        ReturnValue(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  ElementAccessDesignator(
                                    IdentifierDesignator(
                                     pos
                                    ) [IdentifierDesignator]
                                    ArrayIndexer(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               idx
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ArrayIndexer]
                                  ) [ElementAccessDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ReturnValue]
                      ) [ReturnStatement]
                    ) [MultipleStatements]
                  ) [MethodDeclaration]
                ) [ClassMethodDeclaration]
              ) [MultipleClassMethodDeclarations]
              ClassMethodDeclaration(
                PublicAccessModifier(
                ) [PublicAccessModifier]
                MethodDeclaration(
                  MethodHeader(
                    ReturnType(
                      Type(
                       int
                      ) [Type]
                    ) [ReturnType]
                   getn
                  ) [MethodHeader]
                  FormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         int
                        ) [Type]
                       idx
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                  ) [FormalParameters]
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  MethodStatementListStart(
                  ) [MethodStatementListStart]
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    ReturnStatement(
                      ReturnValue(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                ElementAccessDesignator(
                                  IdentifierDesignator(
                                   neg
                                  ) [IdentifierDesignator]
                                  ArrayIndexer(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             idx
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ArrayIndexer]
                                ) [ElementAccessDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [ReturnValue]
                    ) [ReturnStatement]
                  ) [MultipleStatements]
                ) [MethodDeclaration]
              ) [ClassMethodDeclaration]
            ) [MultipleClassMethodDeclarations]
          ) [ClassMethodDeclarations]
        ) [ClassDeclaration]
      ) [ClassProgramDeclaration]
    ) [MultipleProgramDeclarations]
    VarProgramDeclaration(
      VarDeclaration(
        Type(
         Table
        ) [Type]
        SingleVariable(
          Variable(
           val
            NoArrayBrackets(
            ) [NoArrayBrackets]
          ) [Variable]
        ) [SingleVariable]
      ) [VarDeclaration]
    ) [VarProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      NoMethodDeclarations(
      ) [NoMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnVoid(
          ) [ReturnVoid]
         f
        ) [MethodHeader]
        FormalParameters(
          MultipleFormalParameters(
            MultipleFormalParameters(
              SingleFormalParameter(
                FormalParameter(
                  Type(
                   char
                  ) [Type]
                 ch
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [SingleFormalParameter]
              FormalParameter(
                Type(
                 int
                ) [Type]
               a
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [FormalParameter]
            ) [MultipleFormalParameters]
            FormalParameter(
              Type(
               int
              ) [Type]
             arg
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [FormalParameter]
          ) [MultipleFormalParameters]
        ) [FormalParameters]
        MultipleLocalVarDeclarations(
          NoLocalVarDeclarations(
          ) [NoLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             int
            ) [Type]
            SingleLocalVariable(
              LocalVariable(
               x
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [SingleLocalVariable]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          NoStatements(
          ) [NoStatements]
          DesignatorBasedStatement(
            AssignmentDesignatorStatement(
              AssignmentHeader(
                IdentifierDesignator(
                 x
                ) [IdentifierDesignator]
              ) [AssignmentHeader]
              AssignmentFooter(
                AssignOperator(
                ) [AssignOperator]
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         arg
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
              ) [AssignmentFooter]
            ) [AssignmentDesignatorStatement]
          ) [DesignatorBasedStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        MultipleLocalVarDeclarations(
          NoLocalVarDeclarations(
          ) [NoLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             int
            ) [Type]
            MultipleLocalVariables(
              SingleLocalVariable(
                LocalVariable(
                 x
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
              LocalVariable(
               i
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [MultipleLocalVariables]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           char
          ) [Type]
          SingleLocalVariable(
            LocalVariable(
             c
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [LocalVariable]
          ) [SingleLocalVariable]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    IdentifierDesignator(
                                     val
                                    ) [IdentifierDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          AllocatorFactor(
                                            Type(
                                             Table
                                            ) [Type]
                                            NoArrayIndexer(
                                            ) [NoArrayIndexer]
                                          ) [AllocatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     val
                                    ) [IdentifierDesignator]
                                   pos
                                  ) [MemberAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        AllocatorFactor(
                                          Type(
                                           int
                                          ) [Type]
                                          SingleArrayIndexer(
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       size
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [SingleArrayIndexer]
                                        ) [AllocatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   val
                                  ) [IdentifierDesignator]
                                 neg
                                ) [MemberAccessDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      AllocatorFactor(
                                        Type(
                                         int
                                        ) [Type]
                                        SingleArrayIndexer(
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     size
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [SingleArrayIndexer]
                                      ) [AllocatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        ForStatement(
                          ForStatementHeader(
                            ForStatementHeaderStart(
                            ) [ForStatementHeaderStart]
                            SingleDesignatorStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           0
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [SingleDesignatorStatement]
                            SingleCondition(
                              SingleTermCondition(
                                SingleFactConditionTerm(
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    LssOperator(
                                    ) [LssOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             size
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [SingleFactConditionTerm]
                              ) [SingleTermCondition]
                            ) [SingleCondition]
                            SingleDesignatorStatement(
                              IncrementDesignatorStatement(
                                IdentifierDesignator(
                                 i
                                ) [IdentifierDesignator]
                              ) [IncrementDesignatorStatement]
                            ) [SingleDesignatorStatement]
                          ) [ForStatementHeader]
                          StatementBlock(
                            MultipleStatements(
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                DesignatorBasedStatement(
                                  MethodCallDesignatorStatement(
                                    MethodCall(
                                      MethodCallHeader(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           val
                                          ) [IdentifierDesignator]
                                         putp
                                        ) [MemberAccessDesignator]
                                      ) [MethodCallHeader]
                                      ActualParameters(
                                        MultipleActualParameters(
                                          SingleActualParameter(
                                            ActualParameter(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       0
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ActualParameter]
                                          ) [SingleActualParameter]
                                          ActualParameter(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     i
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ActualParameter]
                                        ) [MultipleActualParameters]
                                      ) [ActualParameters]
                                    ) [MethodCall]
                                  ) [MethodCallDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                MethodCallDesignatorStatement(
                                  MethodCall(
                                    MethodCallHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         val
                                        ) [IdentifierDesignator]
                                       putn
                                      ) [MemberAccessDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      MultipleActualParameters(
                                        SingleActualParameter(
                                          ActualParameter(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     0
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ActualParameter]
                                        ) [SingleActualParameter]
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   i
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [MultipleActualParameters]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                          ) [StatementBlock]
                        ) [ForStatement]
                      ) [MultipleStatements]
                      DesignatorBasedStatement(
                        MethodCallDesignatorStatement(
                          MethodCall(
                            MethodCallHeader(
                              IdentifierDesignator(
                               f
                              ) [IdentifierDesignator]
                            ) [MethodCallHeader]
                            ActualParameters(
                              MultipleActualParameters(
                                MultipleActualParameters(
                                  SingleActualParameter(
                                    ActualParameter(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               c
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ActualParameter]
                                  ) [SingleActualParameter]
                                  ActualParameter(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             x
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ActualParameter]
                                ) [MultipleActualParameters]
                                ActualParameter(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           i
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ActualParameter]
                              ) [MultipleActualParameters]
                            ) [ActualParameters]
                          ) [MethodCall]
                        ) [MethodCallDesignatorStatement]
                      ) [DesignatorBasedStatement]
                    ) [MultipleStatements]
                    ReadStatement(
                      IdentifierDesignator(
                       x
                      ) [IdentifierDesignator]
                    ) [ReadStatement]
                  ) [MultipleStatements]
                  ForStatement(
                    ForStatementHeader(
                      ForStatementHeaderStart(
                      ) [ForStatementHeaderStart]
                      NoDesignatorStatement(
                      ) [NoDesignatorStatement]
                      SingleCondition(
                        SingleTermCondition(
                          MultipleFactsConditionTerm(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    MinusSign(
                                    ) [MinusSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         size
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                LssOperator(
                                ) [LssOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         x
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                            ComplexConditionFact(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       x
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              LssOperator(
                              ) [LssOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       size
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [MultipleFactsConditionTerm]
                        ) [SingleTermCondition]
                      ) [SingleCondition]
                      NoDesignatorStatement(
                      ) [NoDesignatorStatement]
                    ) [ForStatementHeader]
                    StatementBlock(
                      MultipleStatements(
                        MultipleStatements(
                          NoStatements(
                          ) [NoStatements]
                          IfOptElseStatement(
                            IfStatementHeader(
                              IfStatementHeaderStart(
                              ) [IfStatementHeaderStart]
                              SingleTermCondition(
                                MultipleFactsConditionTerm(
                                  SingleFactConditionTerm(
                                    ComplexConditionFact(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               0
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      LeqOperator(
                                      ) [LeqOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               x
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ComplexConditionFact]
                                  ) [SingleFactConditionTerm]
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             x
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    LssOperator(
                                    ) [LssOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             size
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [MultipleFactsConditionTerm]
                              ) [SingleTermCondition]
                            ) [IfStatementHeader]
                            StatementBlock(
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                DesignatorBasedStatement(
                                  MethodCallDesignatorStatement(
                                    MethodCall(
                                      MethodCallHeader(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           val
                                          ) [IdentifierDesignator]
                                         putp
                                        ) [MemberAccessDesignator]
                                      ) [MethodCallHeader]
                                      ActualParameters(
                                        MultipleActualParameters(
                                          SingleActualParameter(
                                            ActualParameter(
                                              LeftExpression(
                                                MultipleTermsExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      MethodCallFactor(
                                                        MethodCall(
                                                          MethodCallHeader(
                                                            MemberAccessDesignator(
                                                              IdentifierDesignator(
                                                               val
                                                              ) [IdentifierDesignator]
                                                             getp
                                                            ) [MemberAccessDesignator]
                                                          ) [MethodCallHeader]
                                                          ActualParameters(
                                                            SingleActualParameter(
                                                              ActualParameter(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      DesignatorFactor(
                                                                        IdentifierDesignator(
                                                                         x
                                                                        ) [IdentifierDesignator]
                                                                      ) [DesignatorFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ActualParameter]
                                                            ) [SingleActualParameter]
                                                          ) [ActualParameters]
                                                        ) [MethodCall]
                                                      ) [MethodCallFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                  AddOperator(
                                                  ) [AddOperator]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       1
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [MultipleTermsExpression]
                                              ) [LeftExpression]
                                            ) [ActualParameter]
                                          ) [SingleActualParameter]
                                          ActualParameter(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     x
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ActualParameter]
                                        ) [MultipleActualParameters]
                                      ) [ActualParameters]
                                    ) [MethodCall]
                                  ) [MethodCallDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                            ) [StatementBlock]
                            ElseStatement(
                              ElseStatementStart(
                              ) [ElseStatementStart]
                              IfOptElseStatement(
                                IfStatementHeader(
                                  IfStatementHeaderStart(
                                  ) [IfStatementHeaderStart]
                                  SingleTermCondition(
                                    MultipleFactsConditionTerm(
                                      SingleFactConditionTerm(
                                        ComplexConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              MinusSign(
                                              ) [MinusSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   size
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          LssOperator(
                                          ) [LssOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   x
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ComplexConditionFact]
                                      ) [SingleFactConditionTerm]
                                      ComplexConditionFact(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 x
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        LssOperator(
                                        ) [LssOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 0
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ComplexConditionFact]
                                    ) [MultipleFactsConditionTerm]
                                  ) [SingleTermCondition]
                                ) [IfStatementHeader]
                                StatementBlock(
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    DesignatorBasedStatement(
                                      MethodCallDesignatorStatement(
                                        MethodCall(
                                          MethodCallHeader(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               val
                                              ) [IdentifierDesignator]
                                             putn
                                            ) [MemberAccessDesignator]
                                          ) [MethodCallHeader]
                                          ActualParameters(
                                            MultipleActualParameters(
                                              SingleActualParameter(
                                                ActualParameter(
                                                  LeftExpression(
                                                    MultipleTermsExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          MethodCallFactor(
                                                            MethodCall(
                                                              MethodCallHeader(
                                                                MemberAccessDesignator(
                                                                  IdentifierDesignator(
                                                                   val
                                                                  ) [IdentifierDesignator]
                                                                 getn
                                                                ) [MemberAccessDesignator]
                                                              ) [MethodCallHeader]
                                                              ActualParameters(
                                                                SingleActualParameter(
                                                                  ActualParameter(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        MinusSign(
                                                                        ) [MinusSign]
                                                                        SingleFactorTerm(
                                                                          DesignatorFactor(
                                                                            IdentifierDesignator(
                                                                             x
                                                                            ) [IdentifierDesignator]
                                                                          ) [DesignatorFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ActualParameter]
                                                                ) [SingleActualParameter]
                                                              ) [ActualParameters]
                                                            ) [MethodCall]
                                                          ) [MethodCallFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                      AddOperator(
                                                      ) [AddOperator]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           1
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [MultipleTermsExpression]
                                                  ) [LeftExpression]
                                                ) [ActualParameter]
                                              ) [SingleActualParameter]
                                              ActualParameter(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    MinusSign(
                                                    ) [MinusSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         x
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ActualParameter]
                                            ) [MultipleActualParameters]
                                          ) [ActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                ) [StatementBlock]
                                NoElseStatment(
                                ) [NoElseStatment]
                              ) [IfOptElseStatement]
                            ) [ElseStatement]
                          ) [IfOptElseStatement]
                        ) [MultipleStatements]
                        ReadStatement(
                          IdentifierDesignator(
                           x
                          ) [IdentifierDesignator]
                        ) [ReadStatement]
                      ) [MultipleStatements]
                    ) [StatementBlock]
                  ) [ForStatement]
                ) [MultipleStatements]
                ForStatement(
                  ForStatementHeader(
                    ForStatementHeaderStart(
                    ) [ForStatementHeaderStart]
                    SingleDesignatorStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           i
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            MultipleTermsExpression(
                              SingleTermExpression(
                                MinusSign(
                                ) [MinusSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     size
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                              AddOperator(
                              ) [AddOperator]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   1
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [MultipleTermsExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [SingleDesignatorStatement]
                    SingleCondition(
                      SingleTermCondition(
                        SingleFactConditionTerm(
                          ComplexConditionFact(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     i
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            LssOperator(
                            ) [LssOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     size
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ComplexConditionFact]
                        ) [SingleFactConditionTerm]
                      ) [SingleTermCondition]
                    ) [SingleCondition]
                    SingleDesignatorStatement(
                      IncrementDesignatorStatement(
                        IdentifierDesignator(
                         i
                        ) [IdentifierDesignator]
                      ) [IncrementDesignatorStatement]
                    ) [SingleDesignatorStatement]
                  ) [ForStatementHeader]
                  StatementBlock(
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 i
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        PrintWidth(
                         5
                        ) [PrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                  ) [StatementBlock]
                ) [ForStatement]
              ) [MultipleStatements]
              PrintStatement(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         eol
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
                NoPrintWidth(
                ) [NoPrintWidth]
              ) [PrintStatement]
            ) [MultipleStatements]
            ForEachStatement(
              ForEachStatementHeader(
                ForEachStatementHeaderStart(
                ) [ForEachStatementHeaderStart]
               x
                MemberAccessDesignator(
                  IdentifierDesignator(
                   val
                  ) [IdentifierDesignator]
                 neg
                ) [MemberAccessDesignator]
              ) [ForEachStatementHeader]
              StatementBlock(
                MultipleStatements(
                  NoStatements(
                  ) [NoStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             x
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    PrintWidth(
                     5
                    ) [PrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
              ) [StatementBlock]
            ) [ForEachStatement]
          ) [MultipleStatements]
          DesignatorBasedStatement(
            AssignmentDesignatorStatement(
              AssignmentHeader(
                IdentifierDesignator(
                 i
                ) [IdentifierDesignator]
              ) [AssignmentHeader]
              AssignmentFooter(
                AssignOperator(
                ) [AssignOperator]
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      ConstantFactor(
                        IntConstantFactor(
                         0
                        ) [IntConstantFactor]
                      ) [ConstantFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
              ) [AssignmentFooter]
            ) [AssignmentDesignatorStatement]
          ) [DesignatorBasedStatement]
        ) [MultipleStatements]
        ForEachStatement(
          ForEachStatementHeader(
            ForEachStatementHeaderStart(
            ) [ForEachStatementHeaderStart]
           x
            MemberAccessDesignator(
              IdentifierDesignator(
               val
              ) [IdentifierDesignator]
             pos
            ) [MemberAccessDesignator]
          ) [ForEachStatementHeader]
          StatementBlock(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  NoStatements(
                  ) [NoStatements]
                  DesignatorBasedStatement(
                    IncrementDesignatorStatement(
                      IdentifierDesignator(
                       i
                      ) [IdentifierDesignator]
                    ) [IncrementDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                IfOptElseStatement(
                  IfStatementHeader(
                    IfStatementHeaderStart(
                    ) [IfStatementHeaderStart]
                    SingleTermCondition(
                      SingleFactConditionTerm(
                        ComplexConditionFact(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          EqOperator(
                          ) [EqOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   size
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ComplexConditionFact]
                      ) [SingleFactConditionTerm]
                    ) [SingleTermCondition]
                  ) [IfStatementHeader]
                  BreakStatement(
                  ) [BreakStatement]
                  NoElseStatment(
                  ) [NoElseStatment]
                ) [IfOptElseStatement]
              ) [MultipleStatements]
              PrintStatement(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         x
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
                PrintWidth(
                 5
                ) [PrintWidth]
              ) [PrintStatement]
            ) [MultipleStatements]
          ) [StatementBlock]
        ) [ForEachStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - generator_C4.mj:2: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - generator_C4.mj:3: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:3: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - generator_C4.mj:3: SEMANTIC ANALYZER: Defined int constant 'size'. Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:5: SEMANTIC ANALYZER: Visited node: 'AbstractClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - generator_C4.mj:6: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:6: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C4.mj:6: SEMANTIC ANALYZER: Defined int variable 'size'. Symbol node: Field 'size': type = 'int', adr = 1, level = 1, parent = 'Tab', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C4.mj:8: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:8: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C4.mj:8: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - generator_C4.mj:8: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:8: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:8: SEMANTIC ANALYZER: Defined int formal parameter 'i'. Symbol node: Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:8: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - generator_C4.mj:8: SEMANTIC ANALYZER: Defined method 'getp'. Symbol node: Abstract method 'getp': type = 'int', adr = 0, level = 2, parent = 'Tab', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C4.mj:9: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C4.mj:9: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - generator_C4.mj:9: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:9: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:9: SEMANTIC ANALYZER: Defined int formal parameter 'i'. Symbol node: Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:9: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - generator_C4.mj:9: SEMANTIC ANALYZER: Defined method 'getn'. Symbol node: Abstract method 'getn': type = 'int', adr = 0, level = 2, parent = 'Tab', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:10: SEMANTIC ANALYZER: Found class 'Tab' field usage 'size'! Symbol node: Field 'size': type = 'int', adr = 1, level = 1, parent = 'Tab', access modifier = private
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:36: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:10: SEMANTIC ANALYZER: Defined method 'getSize'. Symbol node: Method 'getSize': type = 'int', adr = 0, level = 1, parent = 'Tab', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C4.mj:5: SEMANTIC ANALYZER: Visited node: 'AbstractClassDeclaration'.
INFO  - generator_C4.mj:5: SEMANTIC ANALYZER: Defined class 'Tab'. Symbol node: Type 'Tab': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C4.mj:14: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - generator_C4.mj:14: SEMANTIC ANALYZER: Found abstract class usage 'Tab'! Symbol node: Type 'Tab': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C4.mj:14: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C4.mj:15: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:15: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C4.mj:15: SEMANTIC ANALYZER: Defined int array variable 'pos'. Symbol node: Field 'pos': type = 'array of int', adr = 2, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:15: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C4.mj:15: SEMANTIC ANALYZER: Defined int array variable 'neg'. Symbol node: Field 'neg': type = 'array of int', adr = 3, level = 1, parent = 'Table', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Defined int formal parameter 'idx'. Symbol node: Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Found class 'Table' field usage 'pos'! Symbol node: Field 'pos': type = 'array of int', adr = 2, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Found formal parameter usage 'idx'! Symbol node: Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Found array element access 'idx[idx]'! Symbol node: Array element 'idx[idx]': type = 'int', adr = -1, level = -1
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:17: SEMANTIC ANALYZER: Defined method 'putp'. Symbol node: Method 'putp': type = 'void', adr = 0, level = 3, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Defined int formal parameter 'idx'. Symbol node: Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Found class 'Table' field usage 'neg'! Symbol node: Field 'neg': type = 'array of int', adr = 3, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Found formal parameter usage 'idx'! Symbol node: Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Found array element access 'idx[idx]'! Symbol node: Array element 'idx[idx]': type = 'int', adr = -1, level = -1
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:18: SEMANTIC ANALYZER: Defined method 'putn'. Symbol node: Method 'putn': type = 'void', adr = 0, level = 3, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:19: SEMANTIC ANALYZER: Defined int formal parameter 'idx'. Symbol node: Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:19: SEMANTIC ANALYZER: Found class 'Table' field usage 'pos'! Symbol node: Field 'pos': type = 'array of int', adr = 2, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:19: SEMANTIC ANALYZER: Found formal parameter usage 'idx'! Symbol node: Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:51: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C4.mj:19: SEMANTIC ANALYZER: Found array element access 'idx[idx]'! Symbol node: Array element 'idx[idx]': type = 'int', adr = -1, level = -1
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:19: SEMANTIC ANALYZER: Defined method 'getp'. Symbol node: Method 'getp': type = 'int', adr = 0, level = 2, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:20: SEMANTIC ANALYZER: Defined int formal parameter 'idx'. Symbol node: Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:20: SEMANTIC ANALYZER: Found class 'Table' field usage 'neg'! Symbol node: Field 'neg': type = 'array of int', adr = 3, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:20: SEMANTIC ANALYZER: Found formal parameter usage 'idx'! Symbol node: Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:51: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C4.mj:20: SEMANTIC ANALYZER: Found array element access 'idx[idx]'! Symbol node: Array element 'idx[idx]': type = 'int', adr = -1, level = -1
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C4.mj:20: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:20: SEMANTIC ANALYZER: Defined method 'getn'. Symbol node: Method 'getn': type = 'int', adr = 0, level = 2, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:14: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - generator_C4.mj:14: SEMANTIC ANALYZER: Defined class 'Table'. Symbol node: Type 'Table': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:24: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:24: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_C4.mj:24: SEMANTIC ANALYZER: Defined  variable 'val'. Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:26: SEMANTIC ANALYZER: Defined char formal parameter 'ch'. Symbol node: Formal parameter 'ch': type = 'char', adr = 0, level = 1
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:26: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C4.mj:26: SEMANTIC ANALYZER: Defined int formal parameter 'arg'. Symbol node: Formal parameter 'arg': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C4.mj:26: SEMANTIC ANALYZER: Defined int variable 'x'. Symbol node: Variable 'x': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:27: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 3, level = 1
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:27: SEMANTIC ANALYZER: Found formal parameter usage 'arg'! Symbol node: Formal parameter 'arg': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:26: SEMANTIC ANALYZER: Defined method 'f'. Symbol node: Method 'f': type = 'void', adr = 0, level = 3
  Formal parameter 'ch': type = 'char', adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'arg': type = 'int', adr = 2, level = 1
  Variable 'x': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C4.mj:30: SEMANTIC ANALYZER: Defined int variable 'x'. Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C4.mj:30: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C4.mj:30: SEMANTIC ANALYZER: Defined char variable 'c'. Symbol node: Variable 'c': type = 'char', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C4.mj:32: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:32: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:32: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:32: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C4.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:32: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:33: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:33: SEMANTIC ANALYZER: Found class 'Table' field usage 'pos'! Symbol node: Field 'pos': type = 'array of int', adr = 2, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:33: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:33: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:34: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:34: SEMANTIC ANALYZER: Found class 'Table' field usage 'neg'! Symbol node: Field 'neg': type = 'array of int', adr = 3, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:34: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:35: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:35: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:35: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:35: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_C4.mj:35: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:37: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:37: SEMANTIC ANALYZER: Found class 'Table' field usage 'putp'! Symbol node: Method 'putp': type = 'void', adr = 0, level = 3, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:37: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:37: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:38: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:38: SEMANTIC ANALYZER: Found class 'Table' field usage 'putn'! Symbol node: Method 'putn': type = 'void', adr = 0, level = 3, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:38: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:38: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:35: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:40: SEMANTIC ANALYZER: Found global method call 'f'! Symbol node: Method 'f': type = 'void', adr = 0, level = 3
  Formal parameter 'ch': type = 'char', adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'arg': type = 'int', adr = 2, level = 1
  Variable 'x': type = 'int', adr = 3, level = 1
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:40: SEMANTIC ANALYZER: Found local variable usage 'c'! Symbol node: Variable 'c': type = 'char', adr = 2, level = 1
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:10: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:40: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:12: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:40: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:15: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:40: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:42: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:42: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:42: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:43: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:43: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:43: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:43: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_C4.mj:43: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:44: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:44: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:44: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:24: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:45: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:45: SEMANTIC ANALYZER: Found class 'Table' field usage 'putp'! Symbol node: Method 'putp': type = 'void', adr = 0, level = 3, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:45: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:45: SEMANTIC ANALYZER: Found class 'Table' field usage 'getp'! Symbol node: Method 'getp': type = 'int', adr = 0, level = 2, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:45: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:45: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:41: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:46: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:46: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:46: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:34: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:47: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:47: SEMANTIC ANALYZER: Found class 'Table' field usage 'putn'! Symbol node: Method 'putn': type = 'void', adr = 0, level = 3, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'idx': type = 'int', adr = 2, level = 1
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:47: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:47: SEMANTIC ANALYZER: Found class 'Table' field usage 'getn'! Symbol node: Method 'getn': type = 'int', adr = 0, level = 2, parent = 'Table', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'idx': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:47: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:47: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C4.mj:47: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:46: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C4.mj:44: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C4.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:49: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:49: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_C4.mj:43: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:52: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:52: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:52: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:52: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:27: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:52: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_C4.mj:52: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_C4.mj:53: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:53: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:53: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:53: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:52: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_C4.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:55: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_C4.mj:55: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:56: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:56: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:56: SEMANTIC ANALYZER: Found class 'Table' field usage 'neg'! Symbol node: Field 'neg': type = 'array of int', adr = 3, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:56: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:57: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:56: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_C4.mj:59: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:59: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:59: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:59: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:59: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:60: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:60: SEMANTIC ANALYZER: Found global variable usage 'val'! Symbol node: Variable 'val': type = 'class', adr = 0, level = 0
DEBUG - generator_C4.mj:60: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C4.mj:60: SEMANTIC ANALYZER: Found class 'Table' field usage 'pos'! Symbol node: Field 'pos': type = 'array of int', adr = 2, level = 1, parent = 'Table', access modifier = public
DEBUG - generator_C4.mj:60: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C4.mj:61: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:61: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:61: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:62: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:62: SEMANTIC ANALYZER: Found symbolic constant usage 'size'! Symbol node: Constant 'size': type = 'int', adr = 10, level = 0
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_C4.mj:62: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C4.mj:63: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C4.mj:63: SEMANTIC ANALYZER: Found local variable usage 'x'! Symbol node: Variable 'x': type = 'int', adr = 0, level = 1
DEBUG - generator_C4.mj:63: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:63: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C4.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:60: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_C4.mj:30: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C4.mj:30: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = 0, level = 0
  Variable 'x': type = 'int', adr = 0, level = 1
  Variable 'i': type = 'int', adr = 1, level = 1
  Variable 'c': type = 'char', adr = 2, level = 1
DEBUG - generator_C4.mj:2: SEMANTIC ANALYZER: Visited node: 'Program'.
INFO  - generator_C4.mj:2: SEMANTIC ANALYZER: Defined program 'P'. Symbol node: Program 'P': type = 'none', adr = 0, level = 1
  Constant 'size': type = 'int', adr = 10, level = 0
  Type 'Tab': type = 'abstract class', adr = 0, level = 0
  Type 'Table': type = 'class', adr = 0, level = 0
  Variable 'val': type = 'class', adr = 0, level = 0
  Method 'f': type = 'void', adr = 0, level = 3
    Formal parameter 'ch': type = 'char', adr = 0, level = 1
    Formal parameter 'a': type = 'int', adr = 1, level = 1
    Formal parameter 'arg': type = 'int', adr = 2, level = 1
    Variable 'x': type = 'int', adr = 3, level = 1
  Method 'main': type = 'void', adr = 0, level = 0
    Variable 'x': type = 'int', adr = 0, level = 1
    Variable 'i': type = 'int', adr = 1, level = 1
    Variable 'c': type = 'char', adr = 2, level = 1
DEBUG - generator_C4.mj:2: CODE GENERATOR: Visited node: 'ProgramHeader'.
DEBUG - generator_C4.mj:10: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:10: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:10: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:36: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C4.mj:10: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:14: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:57: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:57: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:51: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:41: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:51: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:41: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C4.mj:20: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:14: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - generator_C4.mj:24: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_C4.mj:26: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:26: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:30: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C4.mj:32: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:32: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:32: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C4.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:32: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:33: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C4.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:37: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:38: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:35: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:40: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:42: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:42: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - CODE GENERATOR: Visited node: 'NoDesignatorStatement'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:25: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - CODE GENERATOR: Visited node: 'NoDesignatorStatement'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:24: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:25: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:45: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:34: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:25: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:47: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:46: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C4.mj:44: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C4.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:49: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - generator_C4.mj:43: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C4.mj:27: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - generator_C4.mj:53: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:53: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:52: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C4.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:55: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:57: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:57: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:56: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:59: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:59: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C4.mj:59: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C4.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:59: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:61: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:61: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C4.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_C4.mj:62: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C4.mj:63: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:63: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C4.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C4.mj:60: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C4.mj:30: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C4.mj:2: CODE GENERATOR: Visited node: 'Program'.
