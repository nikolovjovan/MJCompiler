DEBUG - test303.mj:3:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - test303.mj:3:9: LEXER: Found symbol: '#55' with value: 'test_303'
DEBUG - test303.mj:5:1: LEXER: Found symbol: '#7' with value: 'const'
DEBUG - test303.mj:5:7: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:5:11: LEXER: Found symbol: '#55' with value: 'cinilac'
DEBUG - test303.mj:5:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:5:21: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test303.mj:5:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:5:24: LEXER: Found symbol: '#55' with value: 'delilac'
DEBUG - test303.mj:5:32: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:5:34: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test303.mj:5:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:6:1: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - test303.mj:6:10: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - test303.mj:6:16: LEXER: Found symbol: '#55' with value: 'AbsPredmet'
DEBUG - test303.mj:7:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:8:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:9:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:9:10: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - test303.mj:9:19: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:9:23: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:9:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:9:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:9:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:10:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:10:10: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - test303.mj:10:19: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:10:23: LEXER: Found symbol: '#55' with value: 'Q'
DEBUG - test303.mj:10:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:10:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:10:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:11:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:12:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:13:1: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - test303.mj:13:7: LEXER: Found symbol: '#55' with value: 'Predmet'
DEBUG - test303.mj:13:15: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - test303.mj:13:23: LEXER: Found symbol: '#55' with value: 'AbsPredmet'
DEBUG - test303.mj:14:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:15:2: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - test303.mj:15:12: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:15:16: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:15:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:16:2: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - test303.mj:16:12: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - test303.mj:16:17: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:16:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:18:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:19:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:19:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:19:15: LEXER: Found symbol: '#55' with value: 'postaviTezinu'
DEBUG - test303.mj:19:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:19:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:19:33: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:19:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:19:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:19:42: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:19:46: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:19:47: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:19:54: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:19:56: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:19:62: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:19:63: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:20:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:20:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:20:15: LEXER: Found symbol: '#55' with value: 'ucitajTezinu'
DEBUG - test303.mj:20:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:20:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:20:30: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:20:32: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - test303.mj:20:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:20:37: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:20:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:20:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:20:46: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:21:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:21:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:21:14: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:21:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:21:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:21:26: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:21:28: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test303.mj:21:35: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:21:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:21:37: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:22:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:22:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:22:14: LEXER: Found symbol: '#55' with value: 'Q'
DEBUG - test303.mj:22:15: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:22:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:22:18: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:22:19: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test303.mj:22:26: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:22:35: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:22:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:22:38: LEXER: Found symbol: '#24' with value: '*'
DEBUG - test303.mj:22:40: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:22:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:22:47: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:23:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:23:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:23:15: LEXER: Found symbol: '#55' with value: 'postaviVrstu'
DEBUG - test303.mj:23:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:23:28: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - test303.mj:23:33: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:23:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:23:40: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:23:41: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:23:45: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:23:46: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:23:52: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:23:54: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:23:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:23:60: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:24:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:24:10: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - test303.mj:24:15: LEXER: Found symbol: '#55' with value: 'dohvVrstu'
DEBUG - test303.mj:24:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:24:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:24:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:24:29: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test303.mj:24:36: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:24:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:24:43: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:25:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:25:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:25:14: LEXER: Found symbol: '#55' with value: 'dohvTezinu'
DEBUG - test303.mj:25:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:25:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:25:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:25:29: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test303.mj:25:36: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:25:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:25:44: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:26:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:27:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:29:1: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - test303.mj:29:7: LEXER: Found symbol: '#55' with value: 'Sfera'
DEBUG - test303.mj:29:13: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - test303.mj:29:21: LEXER: Found symbol: '#55' with value: 'Predmet'
DEBUG - test303.mj:30:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:31:2: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - test303.mj:31:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:31:14: LEXER: Found symbol: '#55' with value: 'r'
DEBUG - test303.mj:31:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:32:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:33:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:33:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:33:15: LEXER: Found symbol: '#55' with value: 'postaviTezinu'
DEBUG - test303.mj:33:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:33:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:33:33: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:33:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:33:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:33:42: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:33:46: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:33:47: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:33:54: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:33:56: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:33:62: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:33:64: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:33:70: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:33:72: LEXER: Found symbol: '#53' with value: 's'
DEBUG - test303.mj:33:75: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:33:76: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:34:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:34:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:34:15: LEXER: Found symbol: '#55' with value: 'postaviPoluprecnik'
DEBUG - test303.mj:34:33: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:34:34: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:34:38: LEXER: Found symbol: '#55' with value: 'r'
DEBUG - test303.mj:34:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:34:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:34:42: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:34:46: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:34:47: LEXER: Found symbol: '#55' with value: 'r'
DEBUG - test303.mj:34:49: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:34:51: LEXER: Found symbol: '#55' with value: 'r'
DEBUG - test303.mj:34:52: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:34:54: LEXER: Found symbol: '#55' with value: 'postaviVrstu'
DEBUG - test303.mj:34:66: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:34:67: LEXER: Found symbol: '#53' with value: 's'
DEBUG - test303.mj:34:70: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:34:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:34:72: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:35:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:35:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:35:14: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:35:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:35:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:36:4: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:36:8: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test303.mj:36:9: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:37:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:38:4: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test303.mj:38:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:38:8: LEXER: Found symbol: '#55' with value: 'cinilac'
DEBUG - test303.mj:38:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:39:4: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test303.mj:39:11: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test303.mj:39:13: LEXER: Found symbol: '#24' with value: '*'
DEBUG - test303.mj:39:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:39:15: LEXER: Found symbol: '#55' with value: 'r'
DEBUG - test303.mj:39:16: LEXER: Found symbol: '#25' with value: '/'
DEBUG - test303.mj:39:17: LEXER: Found symbol: '#55' with value: 'delilac'
DEBUG - test303.mj:39:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:39:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:40:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:41:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:42:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:44:1: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - test303.mj:44:7: LEXER: Found symbol: '#55' with value: 'Kvadar'
DEBUG - test303.mj:44:14: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - test303.mj:44:22: LEXER: Found symbol: '#55' with value: 'Predmet'
DEBUG - test303.mj:45:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:46:2: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - test303.mj:46:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:46:14: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test303.mj:46:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:46:17: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - test303.mj:46:18: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:46:20: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - test303.mj:46:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:47:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:48:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:48:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:48:15: LEXER: Found symbol: '#55' with value: 'postaviTezinu'
DEBUG - test303.mj:48:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:48:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:48:33: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:48:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:48:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:48:42: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:48:46: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:48:47: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:48:54: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:48:56: LEXER: Found symbol: '#55' with value: 'tezina'
DEBUG - test303.mj:48:62: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:48:64: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:48:70: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:48:72: LEXER: Found symbol: '#53' with value: 'k'
DEBUG - test303.mj:48:75: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:48:76: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:49:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:49:10: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:49:15: LEXER: Found symbol: '#55' with value: 'postaviStranice'
DEBUG - test303.mj:49:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:49:31: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:49:35: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test303.mj:49:36: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:49:38: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:49:42: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - test303.mj:49:43: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:49:45: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:49:49: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - test303.mj:49:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:49:52: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:49:53: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:49:57: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:49:58: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test303.mj:49:60: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:49:62: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test303.mj:49:63: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:49:65: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:49:69: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:49:70: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - test303.mj:49:72: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:49:74: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - test303.mj:49:75: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:49:77: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - test303.mj:49:81: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:49:82: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - test303.mj:49:84: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:49:86: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - test303.mj:49:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:49:89: LEXER: Found symbol: '#55' with value: 'vrsta'
DEBUG - test303.mj:49:95: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:49:97: LEXER: Found symbol: '#53' with value: 'k'
DEBUG - test303.mj:49:100: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:49:101: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:50:3: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - test303.mj:50:10: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:50:14: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:50:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:50:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:51:4: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:51:8: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test303.mj:51:9: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:52:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:53:4: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test303.mj:53:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:53:8: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - test303.mj:53:10: LEXER: Found symbol: '#24' with value: '*'
DEBUG - test303.mj:53:12: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - test303.mj:53:14: LEXER: Found symbol: '#24' with value: '*'
DEBUG - test303.mj:53:16: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - test303.mj:53:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:54:4: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - test303.mj:54:11: LEXER: Found symbol: '#55' with value: 'z'
DEBUG - test303.mj:54:12: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:55:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:56:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:57:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:59:1: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:59:5: LEXER: Found symbol: '#55' with value: 'zapreminaK'
DEBUG - test303.mj:59:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:59:17: LEXER: Found symbol: '#55' with value: 'zapreminaS'
DEBUG - test303.mj:59:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:60:1: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:60:5: LEXER: Found symbol: '#55' with value: 'tezinaK'
DEBUG - test303.mj:60:12: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:60:14: LEXER: Found symbol: '#55' with value: 'tezinaS'
DEBUG - test303.mj:60:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:61:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:63:2: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:63:7: LEXER: Found symbol: '#55' with value: 'ispis'
DEBUG - test303.mj:63:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:63:14: LEXER: Found symbol: '#55' with value: 'Predmet'
DEBUG - test303.mj:63:22: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - test303.mj:63:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:64:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:65:3: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test303.mj:65:5: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:65:6: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - test303.mj:65:7: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:65:8: LEXER: Found symbol: '#55' with value: 'dohvVrstu'
DEBUG - test303.mj:65:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:65:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:65:20: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test303.mj:65:23: LEXER: Found symbol: '#53' with value: 's'
DEBUG - test303.mj:65:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:65:28: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:65:33: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:65:34: LEXER: Found symbol: '#53' with value: 'S'
DEBUG - test303.mj:65:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:65:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:66:3: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - test303.mj:66:8: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test303.mj:66:10: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:66:11: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - test303.mj:66:12: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:66:13: LEXER: Found symbol: '#55' with value: 'dohvVrstu'
DEBUG - test303.mj:66:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:66:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:66:25: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test303.mj:66:28: LEXER: Found symbol: '#53' with value: 'k'
DEBUG - test303.mj:66:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:66:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:66:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:66:39: LEXER: Found symbol: '#53' with value: 'K'
DEBUG - test303.mj:66:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:66:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:68:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:68:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:68:9: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test303.mj:68:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:68:13: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:69:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:69:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:69:9: LEXER: Found symbol: '#55' with value: 'p'
DEBUG - test303.mj:69:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:69:11: LEXER: Found symbol: '#55' with value: 'dohvTezinu'
DEBUG - test303.mj:69:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:69:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:69:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:69:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:70:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:72:2: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - test303.mj:72:7: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - test303.mj:72:11: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:72:12: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:72:14: LEXER: Found symbol: '#55' with value: 'Predmet'
DEBUG - test303.mj:72:22: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:72:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:72:31: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:72:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:72:34: LEXER: Found symbol: '#55' with value: 'AbsPredmet'
DEBUG - test303.mj:72:45: LEXER: Found symbol: '#55' with value: 'absPredmeti'
DEBUG - test303.mj:72:56: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:72:57: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:72:58: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:72:60: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:72:64: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:72:65: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:72:67: LEXER: Found symbol: '#55' with value: 'Sfera'
DEBUG - test303.mj:72:73: LEXER: Found symbol: '#55' with value: 's1'
DEBUG - test303.mj:72:75: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:72:77: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - test303.mj:72:79: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:72:81: LEXER: Found symbol: '#55' with value: 's3'
DEBUG - test303.mj:72:83: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:72:85: LEXER: Found symbol: '#55' with value: 'Kvadar'
DEBUG - test303.mj:72:92: LEXER: Found symbol: '#55' with value: 'k1'
DEBUG - test303.mj:72:94: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:72:96: LEXER: Found symbol: '#55' with value: 'k2'
DEBUG - test303.mj:72:98: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:72:100: LEXER: Found symbol: '#55' with value: 'k3'
DEBUG - test303.mj:72:102: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:72:104: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - test303.mj:72:108: LEXER: Found symbol: '#55' with value: 't'
DEBUG - test303.mj:72:109: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:73:2: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:74:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:74:12: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:74:14: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:74:18: LEXER: Found symbol: '#55' with value: 'Predmet'
DEBUG - test303.mj:74:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:74:26: LEXER: Found symbol: '#52' with value: '6'
DEBUG - test303.mj:74:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:74:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:75:3: LEXER: Found symbol: '#55' with value: 'absPredmeti'
DEBUG - test303.mj:75:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:75:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:75:21: LEXER: Found symbol: '#55' with value: 'AbsPredmet'
DEBUG - test303.mj:75:31: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:75:32: LEXER: Found symbol: '#52' with value: '6'
DEBUG - test303.mj:75:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:75:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:76:3: LEXER: Found symbol: '#55' with value: 's1'
DEBUG - test303.mj:76:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:76:8: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:76:12: LEXER: Found symbol: '#55' with value: 'Sfera'
DEBUG - test303.mj:76:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:77:3: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - test303.mj:77:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:77:8: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:77:12: LEXER: Found symbol: '#55' with value: 'Sfera'
DEBUG - test303.mj:77:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:78:3: LEXER: Found symbol: '#55' with value: 's3'
DEBUG - test303.mj:78:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:78:8: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:78:12: LEXER: Found symbol: '#55' with value: 'Sfera'
DEBUG - test303.mj:78:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:80:3: LEXER: Found symbol: '#55' with value: 'k1'
DEBUG - test303.mj:80:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:80:8: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:80:12: LEXER: Found symbol: '#55' with value: 'Kvadar'
DEBUG - test303.mj:80:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:81:3: LEXER: Found symbol: '#55' with value: 'k2'
DEBUG - test303.mj:81:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:81:8: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:81:12: LEXER: Found symbol: '#55' with value: 'Kvadar'
DEBUG - test303.mj:81:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:82:3: LEXER: Found symbol: '#55' with value: 'k3'
DEBUG - test303.mj:82:6: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:82:8: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - test303.mj:82:12: LEXER: Found symbol: '#55' with value: 'Kvadar'
DEBUG - test303.mj:82:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:84:3: LEXER: Found symbol: '#55' with value: 's1'
DEBUG - test303.mj:84:5: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:84:6: LEXER: Found symbol: '#55' with value: 'postaviPoluprecnik'
DEBUG - test303.mj:84:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:84:25: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:84:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:84:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:85:3: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - test303.mj:85:5: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:85:6: LEXER: Found symbol: '#55' with value: 'postaviPoluprecnik'
DEBUG - test303.mj:85:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:85:25: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test303.mj:85:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:85:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:86:3: LEXER: Found symbol: '#55' with value: 's3'
DEBUG - test303.mj:86:5: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:86:6: LEXER: Found symbol: '#55' with value: 'postaviPoluprecnik'
DEBUG - test303.mj:86:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:86:25: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test303.mj:86:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:86:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:88:3: LEXER: Found symbol: '#55' with value: 'k1'
DEBUG - test303.mj:88:5: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:88:6: LEXER: Found symbol: '#55' with value: 'postaviStranice'
DEBUG - test303.mj:88:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:88:22: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:88:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:88:24: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test303.mj:88:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:88:26: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test303.mj:88:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:88:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:89:3: LEXER: Found symbol: '#55' with value: 'k2'
DEBUG - test303.mj:89:5: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:89:6: LEXER: Found symbol: '#55' with value: 'postaviStranice'
DEBUG - test303.mj:89:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:89:22: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test303.mj:89:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:89:24: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test303.mj:89:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:89:26: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test303.mj:89:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:89:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:90:3: LEXER: Found symbol: '#55' with value: 'k3'
DEBUG - test303.mj:90:5: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:90:6: LEXER: Found symbol: '#55' with value: 'postaviStranice'
DEBUG - test303.mj:90:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:90:22: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test303.mj:90:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:90:24: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test303.mj:90:25: LEXER: Found symbol: '#50' with value: ','
DEBUG - test303.mj:90:26: LEXER: Found symbol: '#52' with value: '5'
DEBUG - test303.mj:90:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:90:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:92:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:92:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:92:12: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:92:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:92:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:92:17: LEXER: Found symbol: '#55' with value: 's1'
DEBUG - test303.mj:92:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:93:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:93:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:93:12: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test303.mj:93:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:93:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:93:17: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - test303.mj:93:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:94:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:94:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:94:12: LEXER: Found symbol: '#52' with value: '4'
DEBUG - test303.mj:94:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:94:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:94:17: LEXER: Found symbol: '#55' with value: 's3'
DEBUG - test303.mj:94:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:95:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:95:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:95:12: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:95:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:95:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:95:17: LEXER: Found symbol: '#55' with value: 'k1'
DEBUG - test303.mj:95:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:96:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:96:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:96:12: LEXER: Found symbol: '#52' with value: '3'
DEBUG - test303.mj:96:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:96:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:96:17: LEXER: Found symbol: '#55' with value: 'k2'
DEBUG - test303.mj:96:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:97:3: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:97:11: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:97:12: LEXER: Found symbol: '#52' with value: '5'
DEBUG - test303.mj:97:13: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:97:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:97:17: LEXER: Found symbol: '#55' with value: 'k3'
DEBUG - test303.mj:97:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:99:3: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - test303.mj:99:7: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:99:8: LEXER: Found symbol: '#55' with value: 't'
DEBUG - test303.mj:99:9: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:99:10: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:100:3: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - test303.mj:100:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:100:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:100:8: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:100:9: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:100:10: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:100:11: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:100:12: LEXER: Found symbol: '#33' with value: '<'
DEBUG - test303.mj:100:13: LEXER: Found symbol: '#52' with value: '6'
DEBUG - test303.mj:100:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:100:15: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:100:16: LEXER: Found symbol: '#27' with value: '++'
DEBUG - test303.mj:100:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:101:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:102:4: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:102:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:102:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:102:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:102:15: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:102:16: LEXER: Found symbol: '#55' with value: 'postaviTezinu'
DEBUG - test303.mj:102:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:102:30: LEXER: Found symbol: '#55' with value: 't'
DEBUG - test303.mj:102:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:102:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:103:4: LEXER: Found symbol: '#55' with value: 'absPredmeti'
DEBUG - test303.mj:103:15: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:103:16: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:103:17: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:103:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:103:21: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:103:29: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:103:30: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:103:31: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:103:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:104:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:106:3: LEXER: Found symbol: '#55' with value: 'zapreminaS'
DEBUG - test303.mj:106:14: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:106:16: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:106:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:107:3: LEXER: Found symbol: '#55' with value: 'tezinaS'
DEBUG - test303.mj:107:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:107:13: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:107:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:108:3: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - test303.mj:108:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:108:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:108:8: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:108:9: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:108:10: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:108:11: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:108:12: LEXER: Found symbol: '#34' with value: '<='
DEBUG - test303.mj:108:14: LEXER: Found symbol: '#52' with value: '6'
DEBUG - test303.mj:108:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:108:16: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:108:17: LEXER: Found symbol: '#27' with value: '++'
DEBUG - test303.mj:108:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:109:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:110:4: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test303.mj:110:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:110:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:110:9: LEXER: Found symbol: '#26' with value: '%'
DEBUG - test303.mj:110:11: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test303.mj:110:13: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test303.mj:110:16: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:110:17: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:110:19: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - test303.mj:110:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:111:4: LEXER: Found symbol: '#55' with value: 'zapreminaS'
DEBUG - test303.mj:111:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:111:17: LEXER: Found symbol: '#55' with value: 'zapreminaS'
DEBUG - test303.mj:111:28: LEXER: Found symbol: '#22' with value: '+'
DEBUG - test303.mj:111:30: LEXER: Found symbol: '#55' with value: 'absPredmeti'
DEBUG - test303.mj:111:41: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:111:42: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:111:44: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test303.mj:111:46: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:111:47: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:111:48: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:111:49: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:111:58: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:111:59: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:111:60: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:112:4: LEXER: Found symbol: '#55' with value: 'tezinaS'
DEBUG - test303.mj:112:12: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:112:14: LEXER: Found symbol: '#55' with value: 'tezinaS'
DEBUG - test303.mj:112:22: LEXER: Found symbol: '#22' with value: '+'
DEBUG - test303.mj:112:24: LEXER: Found symbol: '#55' with value: 'absPredmeti'
DEBUG - test303.mj:112:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:112:36: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:112:38: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test303.mj:112:40: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:112:41: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:112:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:112:43: LEXER: Found symbol: '#55' with value: 'Q'
DEBUG - test303.mj:112:44: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:112:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:112:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:113:4: LEXER: Found symbol: '#55' with value: 'ispis'
DEBUG - test303.mj:113:9: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:113:10: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:113:18: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:113:19: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:113:21: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test303.mj:113:23: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:113:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:113:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:113:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:114:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:116:3: LEXER: Found symbol: '#55' with value: 'zapreminaK'
DEBUG - test303.mj:116:14: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:116:16: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:116:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:117:3: LEXER: Found symbol: '#55' with value: 'tezinaK'
DEBUG - test303.mj:117:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:117:13: LEXER: Found symbol: '#52' with value: '0'
DEBUG - test303.mj:117:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:118:3: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - test303.mj:118:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:118:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:118:8: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:118:9: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:118:10: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:118:11: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:118:12: LEXER: Found symbol: '#34' with value: '<='
DEBUG - test303.mj:118:14: LEXER: Found symbol: '#52' with value: '6'
DEBUG - test303.mj:118:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:118:16: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:118:17: LEXER: Found symbol: '#27' with value: '++'
DEBUG - test303.mj:118:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:119:3: LEXER: Found symbol: '#46' with value: '{'
DEBUG - test303.mj:120:4: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - test303.mj:120:6: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:120:7: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:120:9: LEXER: Found symbol: '#26' with value: '%'
DEBUG - test303.mj:120:11: LEXER: Found symbol: '#52' with value: '2'
DEBUG - test303.mj:120:13: LEXER: Found symbol: '#29' with value: '=='
DEBUG - test303.mj:120:16: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:120:17: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:120:19: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - test303.mj:120:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:121:4: LEXER: Found symbol: '#55' with value: 'zapreminaK'
DEBUG - test303.mj:121:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:121:17: LEXER: Found symbol: '#55' with value: 'zapreminaK'
DEBUG - test303.mj:121:28: LEXER: Found symbol: '#22' with value: '+'
DEBUG - test303.mj:121:30: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:121:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:121:39: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:121:41: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test303.mj:121:43: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:121:44: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:121:45: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:121:46: LEXER: Found symbol: '#55' with value: 'zapremina'
DEBUG - test303.mj:121:55: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:121:56: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:121:57: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:122:4: LEXER: Found symbol: '#55' with value: 'tezinaK'
DEBUG - test303.mj:122:12: LEXER: Found symbol: '#21' with value: '='
DEBUG - test303.mj:122:14: LEXER: Found symbol: '#55' with value: 'tezinaK'
DEBUG - test303.mj:122:22: LEXER: Found symbol: '#22' with value: '+'
DEBUG - test303.mj:122:24: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:122:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:122:33: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:122:35: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test303.mj:122:37: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:122:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:122:39: LEXER: Found symbol: '#51' with value: '.'
DEBUG - test303.mj:122:40: LEXER: Found symbol: '#55' with value: 'Q'
DEBUG - test303.mj:122:41: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:122:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:122:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:123:4: LEXER: Found symbol: '#55' with value: 'ispis'
DEBUG - test303.mj:123:9: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:123:10: LEXER: Found symbol: '#55' with value: 'predmeti'
DEBUG - test303.mj:123:18: LEXER: Found symbol: '#44' with value: '['
DEBUG - test303.mj:123:19: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - test303.mj:123:21: LEXER: Found symbol: '#23' with value: '-'
DEBUG - test303.mj:123:23: LEXER: Found symbol: '#52' with value: '1'
DEBUG - test303.mj:123:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - test303.mj:123:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:123:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:124:3: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:126:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:126:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:126:9: LEXER: Found symbol: '#55' with value: 'zapreminaS'
DEBUG - test303.mj:126:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:126:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:126:22: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:126:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:126:28: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test303.mj:126:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:126:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:127:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:127:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:127:9: LEXER: Found symbol: '#55' with value: 'zapreminaK'
DEBUG - test303.mj:127:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:127:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:127:22: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:127:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:127:28: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test303.mj:127:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:127:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:128:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:128:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:128:9: LEXER: Found symbol: '#55' with value: 'tezinaS'
DEBUG - test303.mj:128:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:128:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:128:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:128:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:128:25: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test303.mj:128:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:128:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:129:3: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:129:8: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:129:9: LEXER: Found symbol: '#55' with value: 'tezinaK'
DEBUG - test303.mj:129:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:129:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:129:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - test303.mj:129:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - test303.mj:129:25: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - test303.mj:129:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - test303.mj:129:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - test303.mj:130:2: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:131:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - test303.mj:133:1: LEXER: Found symbol: '#0' with value: ''
DEBUG - test303.mj:133:1: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree: Program(
  ProgramHeader(
   test_303
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    MultipleProgramDeclarations(
      MultipleProgramDeclarations(
        MultipleProgramDeclarations(
          MultipleProgramDeclarations(
            MultipleProgramDeclarations(
              MultipleProgramDeclarations(
                NoProgramDeclarations(
                ) [NoProgramDeclarations]
                ConstProgramDeclaration(
                  ConstDeclaration(
                    Type(
                     int
                    ) [Type]
                    MultipleConstAssignments(
                      SingleConstAssignment(
                        ConstAssignment(
                         cinilac
                          IntConst(
                            NoSign(
                            ) [NoSign]
                           4
                          ) [IntConst]
                        ) [ConstAssignment]
                      ) [SingleConstAssignment]
                      ConstAssignment(
                       delilac
                        IntConst(
                          NoSign(
                          ) [NoSign]
                         3
                        ) [IntConst]
                      ) [ConstAssignment]
                    ) [MultipleConstAssignments]
                  ) [ConstDeclaration]
                ) [ConstProgramDeclaration]
              ) [MultipleProgramDeclarations]
              AbstractClassProgramDeclaration(
                AbstractClassDeclaration(
                  AbstractClassHeader(
                   AbsPredmet
                    NoClassBaseType(
                    ) [NoClassBaseType]
                  ) [AbstractClassHeader]
                  NoClassVarDeclarations(
                  ) [NoClassVarDeclarations]
                  AbstractClassMethods(
                    MultipleAbstractClassMethods(
                      SingleAbstractClassMethod(
                        AbstractClassAbstractMethodDeclaration(
                          PublicAccessModifier(
                          ) [PublicAccessModifier]
                          AbstractMethodDeclaration(
                            AbstractMethodHeader(
                              ReturnType(
                                Type(
                                 int
                                ) [Type]
                              ) [ReturnType]
                             zapremina
                            ) [AbstractMethodHeader]
                            NoFormalParameters(
                            ) [NoFormalParameters]
                          ) [AbstractMethodDeclaration]
                        ) [AbstractClassAbstractMethodDeclaration]
                      ) [SingleAbstractClassMethod]
                      AbstractClassAbstractMethodDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        AbstractMethodDeclaration(
                          AbstractMethodHeader(
                            ReturnType(
                              Type(
                               int
                              ) [Type]
                            ) [ReturnType]
                           Q
                          ) [AbstractMethodHeader]
                          NoFormalParameters(
                          ) [NoFormalParameters]
                        ) [AbstractMethodDeclaration]
                      ) [AbstractClassAbstractMethodDeclaration]
                    ) [MultipleAbstractClassMethods]
                  ) [AbstractClassMethods]
                ) [AbstractClassDeclaration]
              ) [AbstractClassProgramDeclaration]
            ) [MultipleProgramDeclarations]
            ClassProgramDeclaration(
              ClassDeclaration(
                ClassHeader(
                 Predmet
                  ClassBaseType(
                    Type(
                     AbsPredmet
                    ) [Type]
                  ) [ClassBaseType]
                ) [ClassHeader]
                MultipleClassVarDeclarations(
                  MultipleClassVarDeclarations(
                    NoClassVarDeclarations(
                    ) [NoClassVarDeclarations]
                    ClassVarDeclaration(
                      ProtectedAccessModifier(
                      ) [ProtectedAccessModifier]
                      Type(
                       int
                      ) [Type]
                      SingleClassVariable(
                        ClassVariable(
                         tezina
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [ClassVariable]
                      ) [SingleClassVariable]
                    ) [ClassVarDeclaration]
                  ) [MultipleClassVarDeclarations]
                  ClassVarDeclaration(
                    ProtectedAccessModifier(
                    ) [ProtectedAccessModifier]
                    Type(
                     char
                    ) [Type]
                    SingleClassVariable(
                      ClassVariable(
                       vrsta
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [ClassVariable]
                    ) [SingleClassVariable]
                  ) [ClassVarDeclaration]
                ) [MultipleClassVarDeclarations]
                ClassMethodDeclarations(
                  MultipleClassMethodDeclarations(
                    MultipleClassMethodDeclarations(
                      MultipleClassMethodDeclarations(
                        MultipleClassMethodDeclarations(
                          MultipleClassMethodDeclarations(
                            MultipleClassMethodDeclarations(
                              SingleClassMethodDeclaration(
                                ClassMethodDeclaration(
                                  PublicAccessModifier(
                                  ) [PublicAccessModifier]
                                  MethodDeclaration(
                                    MethodHeader(
                                      ReturnVoid(
                                      ) [ReturnVoid]
                                     postaviTezinu
                                    ) [MethodHeader]
                                    FormalParameters(
                                      SingleFormalParameter(
                                        FormalParameter(
                                          Type(
                                           int
                                          ) [Type]
                                         tezina
                                          NoArrayBrackets(
                                          ) [NoArrayBrackets]
                                        ) [FormalParameter]
                                      ) [SingleFormalParameter]
                                    ) [FormalParameters]
                                    NoLocalVarDeclarations(
                                    ) [NoLocalVarDeclarations]
                                    MethodStatementListStart(
                                    ) [MethodStatementListStart]
                                    MultipleStatements(
                                      NoStatements(
                                      ) [NoStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               this
                                              ) [IdentifierDesignator]
                                             tezina
                                            ) [MemberAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     tezina
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                  ) [MethodDeclaration]
                                ) [ClassMethodDeclaration]
                              ) [SingleClassMethodDeclaration]
                              ClassMethodDeclaration(
                                PublicAccessModifier(
                                ) [PublicAccessModifier]
                                MethodDeclaration(
                                  MethodHeader(
                                    ReturnVoid(
                                    ) [ReturnVoid]
                                   ucitajTezinu
                                  ) [MethodHeader]
                                  NoFormalParameters(
                                  ) [NoFormalParameters]
                                  NoLocalVarDeclarations(
                                  ) [NoLocalVarDeclarations]
                                  MethodStatementListStart(
                                  ) [MethodStatementListStart]
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    ReadStatement(
                                      IdentifierDesignator(
                                       tezina
                                      ) [IdentifierDesignator]
                                    ) [ReadStatement]
                                  ) [MultipleStatements]
                                ) [MethodDeclaration]
                              ) [ClassMethodDeclaration]
                            ) [MultipleClassMethodDeclarations]
                            ClassMethodDeclaration(
                              PublicAccessModifier(
                              ) [PublicAccessModifier]
                              MethodDeclaration(
                                MethodHeader(
                                  ReturnType(
                                    Type(
                                     int
                                    ) [Type]
                                  ) [ReturnType]
                                 zapremina
                                ) [MethodHeader]
                                NoFormalParameters(
                                ) [NoFormalParameters]
                                NoLocalVarDeclarations(
                                ) [NoLocalVarDeclarations]
                                MethodStatementListStart(
                                ) [MethodStatementListStart]
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  ReturnStatement(
                                    ReturnValue(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               0
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ReturnValue]
                                  ) [ReturnStatement]
                                ) [MultipleStatements]
                              ) [MethodDeclaration]
                            ) [ClassMethodDeclaration]
                          ) [MultipleClassMethodDeclarations]
                          ClassMethodDeclaration(
                            PublicAccessModifier(
                            ) [PublicAccessModifier]
                            MethodDeclaration(
                              MethodHeader(
                                ReturnType(
                                  Type(
                                   int
                                  ) [Type]
                                ) [ReturnType]
                               Q
                              ) [MethodHeader]
                              NoFormalParameters(
                              ) [NoFormalParameters]
                              NoLocalVarDeclarations(
                              ) [NoLocalVarDeclarations]
                              MethodStatementListStart(
                              ) [MethodStatementListStart]
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                ReturnStatement(
                                  ReturnValue(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        MultipleFactorsTerm(
                                          SingleFactorTerm(
                                            MethodCallFactor(
                                              MethodCall(
                                                MethodCallHeader(
                                                  IdentifierDesignator(
                                                   zapremina
                                                  ) [IdentifierDesignator]
                                                ) [MethodCallHeader]
                                                NoActualParameters(
                                                ) [NoActualParameters]
                                              ) [MethodCall]
                                            ) [MethodCallFactor]
                                          ) [SingleFactorTerm]
                                          MulOperator(
                                          ) [MulOperator]
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             tezina
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [MultipleFactorsTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ReturnValue]
                                ) [ReturnStatement]
                              ) [MultipleStatements]
                            ) [MethodDeclaration]
                          ) [ClassMethodDeclaration]
                        ) [MultipleClassMethodDeclarations]
                        ClassMethodDeclaration(
                          PublicAccessModifier(
                          ) [PublicAccessModifier]
                          MethodDeclaration(
                            MethodHeader(
                              ReturnVoid(
                              ) [ReturnVoid]
                             postaviVrstu
                            ) [MethodHeader]
                            FormalParameters(
                              SingleFormalParameter(
                                FormalParameter(
                                  Type(
                                   char
                                  ) [Type]
                                 vrsta
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [FormalParameter]
                              ) [SingleFormalParameter]
                            ) [FormalParameters]
                            NoLocalVarDeclarations(
                            ) [NoLocalVarDeclarations]
                            MethodStatementListStart(
                            ) [MethodStatementListStart]
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       this
                                      ) [IdentifierDesignator]
                                     vrsta
                                    ) [MemberAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             vrsta
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                          ) [MethodDeclaration]
                        ) [ClassMethodDeclaration]
                      ) [MultipleClassMethodDeclarations]
                      ClassMethodDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        MethodDeclaration(
                          MethodHeader(
                            ReturnType(
                              Type(
                               char
                              ) [Type]
                            ) [ReturnType]
                           dohvVrstu
                          ) [MethodHeader]
                          NoFormalParameters(
                          ) [NoFormalParameters]
                          NoLocalVarDeclarations(
                          ) [NoLocalVarDeclarations]
                          MethodStatementListStart(
                          ) [MethodStatementListStart]
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            ReturnStatement(
                              ReturnValue(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         vrsta
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ReturnValue]
                            ) [ReturnStatement]
                          ) [MultipleStatements]
                        ) [MethodDeclaration]
                      ) [ClassMethodDeclaration]
                    ) [MultipleClassMethodDeclarations]
                    ClassMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnType(
                            Type(
                             int
                            ) [Type]
                          ) [ReturnType]
                         dohvTezinu
                        ) [MethodHeader]
                        NoFormalParameters(
                        ) [NoFormalParameters]
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          NoStatements(
                          ) [NoStatements]
                          ReturnStatement(
                            ReturnValue(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       tezina
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ReturnValue]
                          ) [ReturnStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [ClassMethodDeclaration]
                  ) [MultipleClassMethodDeclarations]
                ) [ClassMethodDeclarations]
              ) [ClassDeclaration]
            ) [ClassProgramDeclaration]
          ) [MultipleProgramDeclarations]
          ClassProgramDeclaration(
            ClassDeclaration(
              ClassHeader(
               Sfera
                ClassBaseType(
                  Type(
                   Predmet
                  ) [Type]
                ) [ClassBaseType]
              ) [ClassHeader]
              MultipleClassVarDeclarations(
                NoClassVarDeclarations(
                ) [NoClassVarDeclarations]
                ClassVarDeclaration(
                  PrivateAccessModifier(
                  ) [PrivateAccessModifier]
                  Type(
                   int
                  ) [Type]
                  SingleClassVariable(
                    ClassVariable(
                     r
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [ClassVariable]
                  ) [SingleClassVariable]
                ) [ClassVarDeclaration]
              ) [MultipleClassVarDeclarations]
              ClassMethodDeclarations(
                MultipleClassMethodDeclarations(
                  MultipleClassMethodDeclarations(
                    SingleClassMethodDeclaration(
                      ClassMethodDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        MethodDeclaration(
                          MethodHeader(
                            ReturnVoid(
                            ) [ReturnVoid]
                           postaviTezinu
                          ) [MethodHeader]
                          FormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               tezina
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                          ) [FormalParameters]
                          NoLocalVarDeclarations(
                          ) [NoLocalVarDeclarations]
                          MethodStatementListStart(
                          ) [MethodStatementListStart]
                          MultipleStatements(
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       this
                                      ) [IdentifierDesignator]
                                     tezina
                                    ) [MemberAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             tezina
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   vrsta
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                           s
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                        ) [MethodDeclaration]
                      ) [ClassMethodDeclaration]
                    ) [SingleClassMethodDeclaration]
                    ClassMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         postaviPoluprecnik
                        ) [MethodHeader]
                        FormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             r
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                        ) [FormalParameters]
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     this
                                    ) [IdentifierDesignator]
                                   r
                                  ) [MemberAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           r
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            MethodCallDesignatorStatement(
                              MethodCall(
                                MethodCallHeader(
                                  IdentifierDesignator(
                                   postaviVrstu
                                  ) [IdentifierDesignator]
                                ) [MethodCallHeader]
                                ActualParameters(
                                  SingleActualParameter(
                                    ActualParameter(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               s
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ActualParameter]
                                  ) [SingleActualParameter]
                                ) [ActualParameters]
                              ) [MethodCall]
                            ) [MethodCallDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [ClassMethodDeclaration]
                  ) [MultipleClassMethodDeclarations]
                  ClassMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnType(
                          Type(
                           int
                          ) [Type]
                        ) [ReturnType]
                       zapremina
                      ) [MethodHeader]
                      NoFormalParameters(
                      ) [NoFormalParameters]
                      MultipleLocalVarDeclarations(
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        LocalVarDeclaration(
                          Type(
                           int
                          ) [Type]
                          SingleLocalVariable(
                            LocalVariable(
                             z
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [LocalVariable]
                          ) [SingleLocalVariable]
                        ) [LocalVarDeclaration]
                      ) [MultipleLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        MultipleStatements(
                          NoStatements(
                          ) [NoStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 z
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         cinilac
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        ReturnStatement(
                          ReturnValue(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                MultipleFactorsTerm(
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       z
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                  MulOperator(
                                  ) [MulOperator]
                                  InnerExpressionFactor(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        MultipleFactorsTerm(
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               r
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                          DivOperator(
                                          ) [DivOperator]
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             delilac
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [MultipleFactorsTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [InnerExpressionFactor]
                                ) [MultipleFactorsTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ReturnValue]
                        ) [ReturnStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [MultipleClassMethodDeclarations]
              ) [ClassMethodDeclarations]
            ) [ClassDeclaration]
          ) [ClassProgramDeclaration]
        ) [MultipleProgramDeclarations]
        ClassProgramDeclaration(
          ClassDeclaration(
            ClassHeader(
             Kvadar
              ClassBaseType(
                Type(
                 Predmet
                ) [Type]
              ) [ClassBaseType]
            ) [ClassHeader]
            MultipleClassVarDeclarations(
              NoClassVarDeclarations(
              ) [NoClassVarDeclarations]
              ClassVarDeclaration(
                PrivateAccessModifier(
                ) [PrivateAccessModifier]
                Type(
                 int
                ) [Type]
                MultipleClassVariables(
                  MultipleClassVariables(
                    SingleClassVariable(
                      ClassVariable(
                       a
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [ClassVariable]
                    ) [SingleClassVariable]
                    ClassVariable(
                     b
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [ClassVariable]
                  ) [MultipleClassVariables]
                  ClassVariable(
                   c
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [ClassVariable]
                ) [MultipleClassVariables]
              ) [ClassVarDeclaration]
            ) [MultipleClassVarDeclarations]
            ClassMethodDeclarations(
              MultipleClassMethodDeclarations(
                MultipleClassMethodDeclarations(
                  SingleClassMethodDeclaration(
                    ClassMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         postaviTezinu
                        ) [MethodHeader]
                        FormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             tezina
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                        ) [FormalParameters]
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     this
                                    ) [IdentifierDesignator]
                                   tezina
                                  ) [MemberAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           tezina
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 vrsta
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        CharConstantFactor(
                                         k
                                        ) [CharConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [ClassMethodDeclaration]
                  ) [SingleClassMethodDeclaration]
                  ClassMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnVoid(
                        ) [ReturnVoid]
                       postaviStranice
                      ) [MethodHeader]
                      FormalParameters(
                        MultipleFormalParameters(
                          MultipleFormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               a
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             b
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [MultipleFormalParameters]
                          FormalParameter(
                            Type(
                             int
                            ) [Type]
                           c
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [FormalParameter]
                        ) [MultipleFormalParameters]
                      ) [FormalParameters]
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       this
                                      ) [IdentifierDesignator]
                                     a
                                    ) [MemberAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             a
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     this
                                    ) [IdentifierDesignator]
                                   b
                                  ) [MemberAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           b
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   this
                                  ) [IdentifierDesignator]
                                 c
                                ) [MemberAccessDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         c
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               vrsta
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                       k
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [MultipleClassMethodDeclarations]
                ClassMethodDeclaration(
                  PublicAccessModifier(
                  ) [PublicAccessModifier]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnType(
                        Type(
                         int
                        ) [Type]
                      ) [ReturnType]
                     zapremina
                    ) [MethodHeader]
                    NoFormalParameters(
                    ) [NoFormalParameters]
                    MultipleLocalVarDeclarations(
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      LocalVarDeclaration(
                        Type(
                         int
                        ) [Type]
                        SingleLocalVariable(
                          LocalVariable(
                           z
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [LocalVariable]
                        ) [SingleLocalVariable]
                      ) [LocalVarDeclaration]
                    ) [MultipleLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    MultipleStatements(
                      MultipleStatements(
                        NoStatements(
                        ) [NoStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               z
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  MultipleFactorsTerm(
                                    MultipleFactorsTerm(
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           a
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                      MulOperator(
                                      ) [MulOperator]
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         b
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [MultipleFactorsTerm]
                                    MulOperator(
                                    ) [MulOperator]
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       c
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [MultipleFactorsTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                      ReturnStatement(
                        ReturnValue(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   z
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ReturnValue]
                      ) [ReturnStatement]
                    ) [MultipleStatements]
                  ) [MethodDeclaration]
                ) [ClassMethodDeclaration]
              ) [MultipleClassMethodDeclarations]
            ) [ClassMethodDeclarations]
          ) [ClassDeclaration]
        ) [ClassProgramDeclaration]
      ) [MultipleProgramDeclarations]
      VarProgramDeclaration(
        VarDeclaration(
          Type(
           int
          ) [Type]
          MultipleVariables(
            SingleVariable(
              Variable(
               zapreminaK
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [Variable]
            ) [SingleVariable]
            Variable(
             zapreminaS
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [Variable]
          ) [MultipleVariables]
        ) [VarDeclaration]
      ) [VarProgramDeclaration]
    ) [MultipleProgramDeclarations]
    VarProgramDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        MultipleVariables(
          SingleVariable(
            Variable(
             tezinaK
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [Variable]
          ) [SingleVariable]
          Variable(
           tezinaS
            NoArrayBrackets(
            ) [NoArrayBrackets]
          ) [Variable]
        ) [MultipleVariables]
      ) [VarDeclaration]
    ) [VarProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      NoMethodDeclarations(
      ) [NoMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnVoid(
          ) [ReturnVoid]
         ispis
        ) [MethodHeader]
        FormalParameters(
          SingleFormalParameter(
            FormalParameter(
              Type(
               Predmet
              ) [Type]
             p
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [FormalParameter]
          ) [SingleFormalParameter]
        ) [FormalParameters]
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              IfOptElseStatement(
                IfStatementHeader(
                  IfStatementHeaderStart(
                  ) [IfStatementHeaderStart]
                  SingleTermCondition(
                    SingleFactConditionTerm(
                      ComplexConditionFact(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              MethodCallFactor(
                                MethodCall(
                                  MethodCallHeader(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       p
                                      ) [IdentifierDesignator]
                                     dohvVrstu
                                    ) [MemberAccessDesignator]
                                  ) [MethodCallHeader]
                                  NoActualParameters(
                                  ) [NoActualParameters]
                                ) [MethodCall]
                              ) [MethodCallFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        EqOperator(
                        ) [EqOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                CharConstantFactor(
                                 s
                                ) [CharConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [ComplexConditionFact]
                    ) [SingleFactConditionTerm]
                  ) [SingleTermCondition]
                ) [IfStatementHeader]
                PrintStatement(
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        ConstantFactor(
                          CharConstantFactor(
                           S
                          ) [CharConstantFactor]
                        ) [ConstantFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                  NoPrintWidth(
                  ) [NoPrintWidth]
                ) [PrintStatement]
                ElseStatement(
                  ElseStatementStart(
                  ) [ElseStatementStart]
                  IfOptElseStatement(
                    IfStatementHeader(
                      IfStatementHeaderStart(
                      ) [IfStatementHeaderStart]
                      SingleTermCondition(
                        SingleFactConditionTerm(
                          ComplexConditionFact(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  MethodCallFactor(
                                    MethodCall(
                                      MethodCallHeader(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           p
                                          ) [IdentifierDesignator]
                                         dohvVrstu
                                        ) [MemberAccessDesignator]
                                      ) [MethodCallHeader]
                                      NoActualParameters(
                                      ) [NoActualParameters]
                                    ) [MethodCall]
                                  ) [MethodCallFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            EqOperator(
                            ) [EqOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    CharConstantFactor(
                                     k
                                    ) [CharConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ComplexConditionFact]
                        ) [SingleFactConditionTerm]
                      ) [SingleTermCondition]
                    ) [IfStatementHeader]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              CharConstantFactor(
                               K
                              ) [CharConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                    NoElseStatment(
                    ) [NoElseStatment]
                  ) [IfOptElseStatement]
                ) [ElseStatement]
              ) [IfOptElseStatement]
            ) [MultipleStatements]
            PrintStatement(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    DesignatorFactor(
                      IdentifierDesignator(
                       eol
                      ) [IdentifierDesignator]
                    ) [DesignatorFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
              NoPrintWidth(
              ) [NoPrintWidth]
            ) [PrintStatement]
          ) [MultipleStatements]
          PrintStatement(
            LeftExpression(
              SingleTermExpression(
                NoSign(
                ) [NoSign]
                SingleFactorTerm(
                  MethodCallFactor(
                    MethodCall(
                      MethodCallHeader(
                        MemberAccessDesignator(
                          IdentifierDesignator(
                           p
                          ) [IdentifierDesignator]
                         dohvTezinu
                        ) [MemberAccessDesignator]
                      ) [MethodCallHeader]
                      NoActualParameters(
                      ) [NoActualParameters]
                    ) [MethodCall]
                  ) [MethodCallFactor]
                ) [SingleFactorTerm]
              ) [SingleTermExpression]
            ) [LeftExpression]
            NoPrintWidth(
            ) [NoPrintWidth]
          ) [PrintStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        MultipleLocalVarDeclarations(
          MultipleLocalVarDeclarations(
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                MultipleLocalVarDeclarations(
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  LocalVarDeclaration(
                    Type(
                     Predmet
                    ) [Type]
                    SingleLocalVariable(
                      LocalVariable(
                       predmeti
                        ArrayBrackets(
                        ) [ArrayBrackets]
                      ) [LocalVariable]
                    ) [SingleLocalVariable]
                  ) [LocalVarDeclaration]
                ) [MultipleLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   AbsPredmet
                  ) [Type]
                  SingleLocalVariable(
                    LocalVariable(
                     absPredmeti
                      ArrayBrackets(
                      ) [ArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 int
                ) [Type]
                SingleLocalVariable(
                  LocalVariable(
                   i
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               Sfera
              ) [Type]
              MultipleLocalVariables(
                MultipleLocalVariables(
                  SingleLocalVariable(
                    LocalVariable(
                     s1
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                  LocalVariable(
                   s2
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [MultipleLocalVariables]
                LocalVariable(
                 s3
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [MultipleLocalVariables]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             Kvadar
            ) [Type]
            MultipleLocalVariables(
              MultipleLocalVariables(
                SingleLocalVariable(
                  LocalVariable(
                   k1
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
                LocalVariable(
                 k2
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [MultipleLocalVariables]
              LocalVariable(
               k3
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [MultipleLocalVariables]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           int
          ) [Type]
          SingleLocalVariable(
            LocalVariable(
             t
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [LocalVariable]
          ) [SingleLocalVariable]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            MultipleStatements(
                                                              MultipleStatements(
                                                                MultipleStatements(
                                                                  MultipleStatements(
                                                                    MultipleStatements(
                                                                      MultipleStatements(
                                                                        MultipleStatements(
                                                                          MultipleStatements(
                                                                            MultipleStatements(
                                                                              NoStatements(
                                                                              ) [NoStatements]
                                                                              DesignatorBasedStatement(
                                                                                AssignmentDesignatorStatement(
                                                                                  AssignmentHeader(
                                                                                    IdentifierDesignator(
                                                                                     predmeti
                                                                                    ) [IdentifierDesignator]
                                                                                  ) [AssignmentHeader]
                                                                                  AssignmentFooter(
                                                                                    AssignOperator(
                                                                                    ) [AssignOperator]
                                                                                    LeftExpression(
                                                                                      SingleTermExpression(
                                                                                        NoSign(
                                                                                        ) [NoSign]
                                                                                        SingleFactorTerm(
                                                                                          AllocatorFactor(
                                                                                            Type(
                                                                                             Predmet
                                                                                            ) [Type]
                                                                                            SingleArrayIndexer(
                                                                                              ArrayIndexer(
                                                                                                LeftExpression(
                                                                                                  SingleTermExpression(
                                                                                                    NoSign(
                                                                                                    ) [NoSign]
                                                                                                    SingleFactorTerm(
                                                                                                      ConstantFactor(
                                                                                                        IntConstantFactor(
                                                                                                         6
                                                                                                        ) [IntConstantFactor]
                                                                                                      ) [ConstantFactor]
                                                                                                    ) [SingleFactorTerm]
                                                                                                  ) [SingleTermExpression]
                                                                                                ) [LeftExpression]
                                                                                              ) [ArrayIndexer]
                                                                                            ) [SingleArrayIndexer]
                                                                                          ) [AllocatorFactor]
                                                                                        ) [SingleFactorTerm]
                                                                                      ) [SingleTermExpression]
                                                                                    ) [LeftExpression]
                                                                                  ) [AssignmentFooter]
                                                                                ) [AssignmentDesignatorStatement]
                                                                              ) [DesignatorBasedStatement]
                                                                            ) [MultipleStatements]
                                                                            DesignatorBasedStatement(
                                                                              AssignmentDesignatorStatement(
                                                                                AssignmentHeader(
                                                                                  IdentifierDesignator(
                                                                                   absPredmeti
                                                                                  ) [IdentifierDesignator]
                                                                                ) [AssignmentHeader]
                                                                                AssignmentFooter(
                                                                                  AssignOperator(
                                                                                  ) [AssignOperator]
                                                                                  LeftExpression(
                                                                                    SingleTermExpression(
                                                                                      NoSign(
                                                                                      ) [NoSign]
                                                                                      SingleFactorTerm(
                                                                                        AllocatorFactor(
                                                                                          Type(
                                                                                           AbsPredmet
                                                                                          ) [Type]
                                                                                          SingleArrayIndexer(
                                                                                            ArrayIndexer(
                                                                                              LeftExpression(
                                                                                                SingleTermExpression(
                                                                                                  NoSign(
                                                                                                  ) [NoSign]
                                                                                                  SingleFactorTerm(
                                                                                                    ConstantFactor(
                                                                                                      IntConstantFactor(
                                                                                                       6
                                                                                                      ) [IntConstantFactor]
                                                                                                    ) [ConstantFactor]
                                                                                                  ) [SingleFactorTerm]
                                                                                                ) [SingleTermExpression]
                                                                                              ) [LeftExpression]
                                                                                            ) [ArrayIndexer]
                                                                                          ) [SingleArrayIndexer]
                                                                                        ) [AllocatorFactor]
                                                                                      ) [SingleFactorTerm]
                                                                                    ) [SingleTermExpression]
                                                                                  ) [LeftExpression]
                                                                                ) [AssignmentFooter]
                                                                              ) [AssignmentDesignatorStatement]
                                                                            ) [DesignatorBasedStatement]
                                                                          ) [MultipleStatements]
                                                                          DesignatorBasedStatement(
                                                                            AssignmentDesignatorStatement(
                                                                              AssignmentHeader(
                                                                                IdentifierDesignator(
                                                                                 s1
                                                                                ) [IdentifierDesignator]
                                                                              ) [AssignmentHeader]
                                                                              AssignmentFooter(
                                                                                AssignOperator(
                                                                                ) [AssignOperator]
                                                                                LeftExpression(
                                                                                  SingleTermExpression(
                                                                                    NoSign(
                                                                                    ) [NoSign]
                                                                                    SingleFactorTerm(
                                                                                      AllocatorFactor(
                                                                                        Type(
                                                                                         Sfera
                                                                                        ) [Type]
                                                                                        NoArrayIndexer(
                                                                                        ) [NoArrayIndexer]
                                                                                      ) [AllocatorFactor]
                                                                                    ) [SingleFactorTerm]
                                                                                  ) [SingleTermExpression]
                                                                                ) [LeftExpression]
                                                                              ) [AssignmentFooter]
                                                                            ) [AssignmentDesignatorStatement]
                                                                          ) [DesignatorBasedStatement]
                                                                        ) [MultipleStatements]
                                                                        DesignatorBasedStatement(
                                                                          AssignmentDesignatorStatement(
                                                                            AssignmentHeader(
                                                                              IdentifierDesignator(
                                                                               s2
                                                                              ) [IdentifierDesignator]
                                                                            ) [AssignmentHeader]
                                                                            AssignmentFooter(
                                                                              AssignOperator(
                                                                              ) [AssignOperator]
                                                                              LeftExpression(
                                                                                SingleTermExpression(
                                                                                  NoSign(
                                                                                  ) [NoSign]
                                                                                  SingleFactorTerm(
                                                                                    AllocatorFactor(
                                                                                      Type(
                                                                                       Sfera
                                                                                      ) [Type]
                                                                                      NoArrayIndexer(
                                                                                      ) [NoArrayIndexer]
                                                                                    ) [AllocatorFactor]
                                                                                  ) [SingleFactorTerm]
                                                                                ) [SingleTermExpression]
                                                                              ) [LeftExpression]
                                                                            ) [AssignmentFooter]
                                                                          ) [AssignmentDesignatorStatement]
                                                                        ) [DesignatorBasedStatement]
                                                                      ) [MultipleStatements]
                                                                      DesignatorBasedStatement(
                                                                        AssignmentDesignatorStatement(
                                                                          AssignmentHeader(
                                                                            IdentifierDesignator(
                                                                             s3
                                                                            ) [IdentifierDesignator]
                                                                          ) [AssignmentHeader]
                                                                          AssignmentFooter(
                                                                            AssignOperator(
                                                                            ) [AssignOperator]
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  AllocatorFactor(
                                                                                    Type(
                                                                                     Sfera
                                                                                    ) [Type]
                                                                                    NoArrayIndexer(
                                                                                    ) [NoArrayIndexer]
                                                                                  ) [AllocatorFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                          ) [AssignmentFooter]
                                                                        ) [AssignmentDesignatorStatement]
                                                                      ) [DesignatorBasedStatement]
                                                                    ) [MultipleStatements]
                                                                    DesignatorBasedStatement(
                                                                      AssignmentDesignatorStatement(
                                                                        AssignmentHeader(
                                                                          IdentifierDesignator(
                                                                           k1
                                                                          ) [IdentifierDesignator]
                                                                        ) [AssignmentHeader]
                                                                        AssignmentFooter(
                                                                          AssignOperator(
                                                                          ) [AssignOperator]
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                AllocatorFactor(
                                                                                  Type(
                                                                                   Kvadar
                                                                                  ) [Type]
                                                                                  NoArrayIndexer(
                                                                                  ) [NoArrayIndexer]
                                                                                ) [AllocatorFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [AssignmentFooter]
                                                                      ) [AssignmentDesignatorStatement]
                                                                    ) [DesignatorBasedStatement]
                                                                  ) [MultipleStatements]
                                                                  DesignatorBasedStatement(
                                                                    AssignmentDesignatorStatement(
                                                                      AssignmentHeader(
                                                                        IdentifierDesignator(
                                                                         k2
                                                                        ) [IdentifierDesignator]
                                                                      ) [AssignmentHeader]
                                                                      AssignmentFooter(
                                                                        AssignOperator(
                                                                        ) [AssignOperator]
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              AllocatorFactor(
                                                                                Type(
                                                                                 Kvadar
                                                                                ) [Type]
                                                                                NoArrayIndexer(
                                                                                ) [NoArrayIndexer]
                                                                              ) [AllocatorFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [AssignmentFooter]
                                                                    ) [AssignmentDesignatorStatement]
                                                                  ) [DesignatorBasedStatement]
                                                                ) [MultipleStatements]
                                                                DesignatorBasedStatement(
                                                                  AssignmentDesignatorStatement(
                                                                    AssignmentHeader(
                                                                      IdentifierDesignator(
                                                                       k3
                                                                      ) [IdentifierDesignator]
                                                                    ) [AssignmentHeader]
                                                                    AssignmentFooter(
                                                                      AssignOperator(
                                                                      ) [AssignOperator]
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            AllocatorFactor(
                                                                              Type(
                                                                               Kvadar
                                                                              ) [Type]
                                                                              NoArrayIndexer(
                                                                              ) [NoArrayIndexer]
                                                                            ) [AllocatorFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [AssignmentFooter]
                                                                  ) [AssignmentDesignatorStatement]
                                                                ) [DesignatorBasedStatement]
                                                              ) [MultipleStatements]
                                                              DesignatorBasedStatement(
                                                                MethodCallDesignatorStatement(
                                                                  MethodCall(
                                                                    MethodCallHeader(
                                                                      MemberAccessDesignator(
                                                                        IdentifierDesignator(
                                                                         s1
                                                                        ) [IdentifierDesignator]
                                                                       postaviPoluprecnik
                                                                      ) [MemberAccessDesignator]
                                                                    ) [MethodCallHeader]
                                                                    ActualParameters(
                                                                      SingleActualParameter(
                                                                        ActualParameter(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                ConstantFactor(
                                                                                  IntConstantFactor(
                                                                                   1
                                                                                  ) [IntConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [ActualParameter]
                                                                      ) [SingleActualParameter]
                                                                    ) [ActualParameters]
                                                                  ) [MethodCall]
                                                                ) [MethodCallDesignatorStatement]
                                                              ) [DesignatorBasedStatement]
                                                            ) [MultipleStatements]
                                                            DesignatorBasedStatement(
                                                              MethodCallDesignatorStatement(
                                                                MethodCall(
                                                                  MethodCallHeader(
                                                                    MemberAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       s2
                                                                      ) [IdentifierDesignator]
                                                                     postaviPoluprecnik
                                                                    ) [MemberAccessDesignator]
                                                                  ) [MethodCallHeader]
                                                                  ActualParameters(
                                                                    SingleActualParameter(
                                                                      ActualParameter(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 2
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ActualParameter]
                                                                    ) [SingleActualParameter]
                                                                  ) [ActualParameters]
                                                                ) [MethodCall]
                                                              ) [MethodCallDesignatorStatement]
                                                            ) [DesignatorBasedStatement]
                                                          ) [MultipleStatements]
                                                          DesignatorBasedStatement(
                                                            MethodCallDesignatorStatement(
                                                              MethodCall(
                                                                MethodCallHeader(
                                                                  MemberAccessDesignator(
                                                                    IdentifierDesignator(
                                                                     s3
                                                                    ) [IdentifierDesignator]
                                                                   postaviPoluprecnik
                                                                  ) [MemberAccessDesignator]
                                                                ) [MethodCallHeader]
                                                                ActualParameters(
                                                                  SingleActualParameter(
                                                                    ActualParameter(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               3
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ActualParameter]
                                                                  ) [SingleActualParameter]
                                                                ) [ActualParameters]
                                                              ) [MethodCall]
                                                            ) [MethodCallDesignatorStatement]
                                                          ) [DesignatorBasedStatement]
                                                        ) [MultipleStatements]
                                                        DesignatorBasedStatement(
                                                          MethodCallDesignatorStatement(
                                                            MethodCall(
                                                              MethodCallHeader(
                                                                MemberAccessDesignator(
                                                                  IdentifierDesignator(
                                                                   k1
                                                                  ) [IdentifierDesignator]
                                                                 postaviStranice
                                                                ) [MemberAccessDesignator]
                                                              ) [MethodCallHeader]
                                                              ActualParameters(
                                                                MultipleActualParameters(
                                                                  MultipleActualParameters(
                                                                    SingleActualParameter(
                                                                      ActualParameter(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 1
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ActualParameter]
                                                                    ) [SingleActualParameter]
                                                                    ActualParameter(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               2
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ActualParameter]
                                                                  ) [MultipleActualParameters]
                                                                  ActualParameter(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            IntConstantFactor(
                                                                             3
                                                                            ) [IntConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ActualParameter]
                                                                ) [MultipleActualParameters]
                                                              ) [ActualParameters]
                                                            ) [MethodCall]
                                                          ) [MethodCallDesignatorStatement]
                                                        ) [DesignatorBasedStatement]
                                                      ) [MultipleStatements]
                                                      DesignatorBasedStatement(
                                                        MethodCallDesignatorStatement(
                                                          MethodCall(
                                                            MethodCallHeader(
                                                              MemberAccessDesignator(
                                                                IdentifierDesignator(
                                                                 k2
                                                                ) [IdentifierDesignator]
                                                               postaviStranice
                                                              ) [MemberAccessDesignator]
                                                            ) [MethodCallHeader]
                                                            ActualParameters(
                                                              MultipleActualParameters(
                                                                MultipleActualParameters(
                                                                  SingleActualParameter(
                                                                    ActualParameter(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               2
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ActualParameter]
                                                                  ) [SingleActualParameter]
                                                                  ActualParameter(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            IntConstantFactor(
                                                                             3
                                                                            ) [IntConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ActualParameter]
                                                                ) [MultipleActualParameters]
                                                                ActualParameter(
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          IntConstantFactor(
                                                                           4
                                                                          ) [IntConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [ActualParameter]
                                                              ) [MultipleActualParameters]
                                                            ) [ActualParameters]
                                                          ) [MethodCall]
                                                        ) [MethodCallDesignatorStatement]
                                                      ) [DesignatorBasedStatement]
                                                    ) [MultipleStatements]
                                                    DesignatorBasedStatement(
                                                      MethodCallDesignatorStatement(
                                                        MethodCall(
                                                          MethodCallHeader(
                                                            MemberAccessDesignator(
                                                              IdentifierDesignator(
                                                               k3
                                                              ) [IdentifierDesignator]
                                                             postaviStranice
                                                            ) [MemberAccessDesignator]
                                                          ) [MethodCallHeader]
                                                          ActualParameters(
                                                            MultipleActualParameters(
                                                              MultipleActualParameters(
                                                                SingleActualParameter(
                                                                  ActualParameter(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            IntConstantFactor(
                                                                             3
                                                                            ) [IntConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ActualParameter]
                                                                ) [SingleActualParameter]
                                                                ActualParameter(
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          IntConstantFactor(
                                                                           4
                                                                          ) [IntConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [ActualParameter]
                                                              ) [MultipleActualParameters]
                                                              ActualParameter(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         5
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ActualParameter]
                                                            ) [MultipleActualParameters]
                                                          ) [ActualParameters]
                                                        ) [MethodCall]
                                                      ) [MethodCallDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [MultipleStatements]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        ElementAccessDesignator(
                                                          IdentifierDesignator(
                                                           predmeti
                                                          ) [IdentifierDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     0
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 s1
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      ElementAccessDesignator(
                                                        IdentifierDesignator(
                                                         predmeti
                                                        ) [IdentifierDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   2
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               s2
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    ElementAccessDesignator(
                                                      IdentifierDesignator(
                                                       predmeti
                                                      ) [IdentifierDesignator]
                                                      ArrayIndexer(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 4
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ArrayIndexer]
                                                    ) [ElementAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             s3
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  ElementAccessDesignator(
                                                    IdentifierDesignator(
                                                     predmeti
                                                    ) [IdentifierDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               1
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           k1
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  IdentifierDesignator(
                                                   predmeti
                                                  ) [IdentifierDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             3
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         k2
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                IdentifierDesignator(
                                                 predmeti
                                                ) [IdentifierDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           5
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       k3
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      ReadStatement(
                                        IdentifierDesignator(
                                         t
                                        ) [IdentifierDesignator]
                                      ) [ReadStatement]
                                    ) [MultipleStatements]
                                    ForStatement(
                                      ForStatementHeader(
                                        ForStatementHeaderStart(
                                        ) [ForStatementHeaderStart]
                                        SingleDesignatorStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              IdentifierDesignator(
                                               i
                                              ) [IdentifierDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       0
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [SingleDesignatorStatement]
                                        SingleCondition(
                                          SingleTermCondition(
                                            SingleFactConditionTerm(
                                              ComplexConditionFact(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         i
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                LssOperator(
                                                ) [LssOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         6
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ComplexConditionFact]
                                            ) [SingleFactConditionTerm]
                                          ) [SingleTermCondition]
                                        ) [SingleCondition]
                                        SingleDesignatorStatement(
                                          IncrementDesignatorStatement(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [IncrementDesignatorStatement]
                                        ) [SingleDesignatorStatement]
                                      ) [ForStatementHeader]
                                      StatementBlock(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              MethodCallDesignatorStatement(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    MemberAccessDesignator(
                                                      ElementAccessDesignator(
                                                        IdentifierDesignator(
                                                         predmeti
                                                        ) [IdentifierDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   i
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                     postaviTezinu
                                                    ) [MemberAccessDesignator]
                                                  ) [MethodCallHeader]
                                                  ActualParameters(
                                                    SingleActualParameter(
                                                      ActualParameter(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 t
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ActualParameter]
                                                    ) [SingleActualParameter]
                                                  ) [ActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  IdentifierDesignator(
                                                   absPredmeti
                                                  ) [IdentifierDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             i
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        ElementAccessDesignator(
                                                          IdentifierDesignator(
                                                           predmeti
                                                          ) [IdentifierDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                      ) [StatementBlock]
                                    ) [ForStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         zapreminaS
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 0
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       tezinaS
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               0
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              ForStatement(
                                ForStatementHeader(
                                  ForStatementHeaderStart(
                                  ) [ForStatementHeaderStart]
                                  SingleDesignatorStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         i
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 1
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [SingleDesignatorStatement]
                                  SingleCondition(
                                    SingleTermCondition(
                                      SingleFactConditionTerm(
                                        ComplexConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   i
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          LeqOperator(
                                          ) [LeqOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   6
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ComplexConditionFact]
                                      ) [SingleFactConditionTerm]
                                    ) [SingleTermCondition]
                                  ) [SingleCondition]
                                  SingleDesignatorStatement(
                                    IncrementDesignatorStatement(
                                      IdentifierDesignator(
                                       i
                                      ) [IdentifierDesignator]
                                    ) [IncrementDesignatorStatement]
                                  ) [SingleDesignatorStatement]
                                ) [ForStatementHeader]
                                StatementBlock(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          NoStatements(
                                          ) [NoStatements]
                                          IfOptElseStatement(
                                            IfStatementHeader(
                                              IfStatementHeaderStart(
                                              ) [IfStatementHeaderStart]
                                              SingleTermCondition(
                                                SingleFactConditionTerm(
                                                  ComplexConditionFact(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        MultipleFactorsTerm(
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               i
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                          ModOperator(
                                                          ) [ModOperator]
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             2
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [MultipleFactorsTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    EqOperator(
                                                    ) [EqOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             0
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ComplexConditionFact]
                                                ) [SingleFactConditionTerm]
                                              ) [SingleTermCondition]
                                            ) [IfStatementHeader]
                                            ContinueStatement(
                                            ) [ContinueStatement]
                                            NoElseStatment(
                                            ) [NoElseStatment]
                                          ) [IfOptElseStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              IdentifierDesignator(
                                               zapreminaS
                                              ) [IdentifierDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                MultipleTermsExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         zapreminaS
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                  AddOperator(
                                                  ) [AddOperator]
                                                  SingleFactorTerm(
                                                    MethodCallFactor(
                                                      MethodCall(
                                                        MethodCallHeader(
                                                          MemberAccessDesignator(
                                                            ElementAccessDesignator(
                                                              IdentifierDesignator(
                                                               absPredmeti
                                                              ) [IdentifierDesignator]
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  MultipleTermsExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        DesignatorFactor(
                                                                          IdentifierDesignator(
                                                                           i
                                                                          ) [IdentifierDesignator]
                                                                        ) [DesignatorFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                    SubOperator(
                                                                    ) [SubOperator]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         1
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [MultipleTermsExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [ElementAccessDesignator]
                                                           zapremina
                                                          ) [MemberAccessDesignator]
                                                        ) [MethodCallHeader]
                                                        NoActualParameters(
                                                        ) [NoActualParameters]
                                                      ) [MethodCall]
                                                    ) [MethodCallFactor]
                                                  ) [SingleFactorTerm]
                                                ) [MultipleTermsExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             tezinaS
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              MultipleTermsExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       tezinaS
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                                AddOperator(
                                                ) [AddOperator]
                                                SingleFactorTerm(
                                                  MethodCallFactor(
                                                    MethodCall(
                                                      MethodCallHeader(
                                                        MemberAccessDesignator(
                                                          ElementAccessDesignator(
                                                            IdentifierDesignator(
                                                             absPredmeti
                                                            ) [IdentifierDesignator]
                                                            ArrayIndexer(
                                                              LeftExpression(
                                                                MultipleTermsExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      DesignatorFactor(
                                                                        IdentifierDesignator(
                                                                         i
                                                                        ) [IdentifierDesignator]
                                                                      ) [DesignatorFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                  SubOperator(
                                                                  ) [SubOperator]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      IntConstantFactor(
                                                                       1
                                                                      ) [IntConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [MultipleTermsExpression]
                                                              ) [LeftExpression]
                                                            ) [ArrayIndexer]
                                                          ) [ElementAccessDesignator]
                                                         Q
                                                        ) [MemberAccessDesignator]
                                                      ) [MethodCallHeader]
                                                      NoActualParameters(
                                                      ) [NoActualParameters]
                                                    ) [MethodCall]
                                                  ) [MethodCallFactor]
                                                ) [SingleFactorTerm]
                                              ) [MultipleTermsExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      MethodCallDesignatorStatement(
                                        MethodCall(
                                          MethodCallHeader(
                                            IdentifierDesignator(
                                             ispis
                                            ) [IdentifierDesignator]
                                          ) [MethodCallHeader]
                                          ActualParameters(
                                            SingleActualParameter(
                                              ActualParameter(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        ElementAccessDesignator(
                                                          IdentifierDesignator(
                                                           predmeti
                                                          ) [IdentifierDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              MultipleTermsExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       i
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                                SubOperator(
                                                                ) [SubOperator]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     1
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [MultipleTermsExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ActualParameter]
                                            ) [SingleActualParameter]
                                          ) [ActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                ) [StatementBlock]
                              ) [ForStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   zapreminaK
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           0
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 tezinaK
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         0
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        ForStatement(
                          ForStatementHeader(
                            ForStatementHeaderStart(
                            ) [ForStatementHeaderStart]
                            SingleDesignatorStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           1
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [SingleDesignatorStatement]
                            SingleCondition(
                              SingleTermCondition(
                                SingleFactConditionTerm(
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    LeqOperator(
                                    ) [LeqOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             6
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [SingleFactConditionTerm]
                              ) [SingleTermCondition]
                            ) [SingleCondition]
                            SingleDesignatorStatement(
                              IncrementDesignatorStatement(
                                IdentifierDesignator(
                                 i
                                ) [IdentifierDesignator]
                              ) [IncrementDesignatorStatement]
                            ) [SingleDesignatorStatement]
                          ) [ForStatementHeader]
                          StatementBlock(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    IfOptElseStatement(
                                      IfStatementHeader(
                                        IfStatementHeaderStart(
                                        ) [IfStatementHeaderStart]
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  MultipleFactorsTerm(
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         i
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                    ModOperator(
                                                    ) [ModOperator]
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       2
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [MultipleFactorsTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              EqOperator(
                                              ) [EqOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       1
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [IfStatementHeader]
                                      ContinueStatement(
                                      ) [ContinueStatement]
                                      NoElseStatment(
                                      ) [NoElseStatment]
                                    ) [IfOptElseStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         zapreminaK
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          MultipleTermsExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   zapreminaK
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                            AddOperator(
                                            ) [AddOperator]
                                            SingleFactorTerm(
                                              MethodCallFactor(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    MemberAccessDesignator(
                                                      ElementAccessDesignator(
                                                        IdentifierDesignator(
                                                         predmeti
                                                        ) [IdentifierDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            MultipleTermsExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                              SubOperator(
                                                              ) [SubOperator]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   1
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [MultipleTermsExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                     zapremina
                                                    ) [MemberAccessDesignator]
                                                  ) [MethodCallHeader]
                                                  NoActualParameters(
                                                  ) [NoActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallFactor]
                                            ) [SingleFactorTerm]
                                          ) [MultipleTermsExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       tezinaK
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        MultipleTermsExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 tezinaK
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                          AddOperator(
                                          ) [AddOperator]
                                          SingleFactorTerm(
                                            MethodCallFactor(
                                              MethodCall(
                                                MethodCallHeader(
                                                  MemberAccessDesignator(
                                                    ElementAccessDesignator(
                                                      IdentifierDesignator(
                                                       predmeti
                                                      ) [IdentifierDesignator]
                                                      ArrayIndexer(
                                                        LeftExpression(
                                                          MultipleTermsExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   i
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                            SubOperator(
                                                            ) [SubOperator]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 1
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [MultipleTermsExpression]
                                                        ) [LeftExpression]
                                                      ) [ArrayIndexer]
                                                    ) [ElementAccessDesignator]
                                                   Q
                                                  ) [MemberAccessDesignator]
                                                ) [MethodCallHeader]
                                                NoActualParameters(
                                                ) [NoActualParameters]
                                              ) [MethodCall]
                                            ) [MethodCallFactor]
                                          ) [SingleFactorTerm]
                                        ) [MultipleTermsExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                MethodCallDesignatorStatement(
                                  MethodCall(
                                    MethodCallHeader(
                                      IdentifierDesignator(
                                       ispis
                                      ) [IdentifierDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  ElementAccessDesignator(
                                                    IdentifierDesignator(
                                                     predmeti
                                                    ) [IdentifierDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        MultipleTermsExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 i
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                          SubOperator(
                                                          ) [SubOperator]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               1
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [MultipleTermsExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                          ) [StatementBlock]
                        ) [ForStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 zapreminaS
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               eol
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             zapreminaK
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
                PrintStatement(
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        DesignatorFactor(
                          IdentifierDesignator(
                           eol
                          ) [IdentifierDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                  NoPrintWidth(
                  ) [NoPrintWidth]
                ) [PrintStatement]
              ) [MultipleStatements]
              PrintStatement(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         tezinaS
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
                NoPrintWidth(
                ) [NoPrintWidth]
              ) [PrintStatement]
            ) [MultipleStatements]
            PrintStatement(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    DesignatorFactor(
                      IdentifierDesignator(
                       eol
                      ) [IdentifierDesignator]
                    ) [DesignatorFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
              NoPrintWidth(
              ) [NoPrintWidth]
            ) [PrintStatement]
          ) [MultipleStatements]
          PrintStatement(
            LeftExpression(
              SingleTermExpression(
                NoSign(
                ) [NoSign]
                SingleFactorTerm(
                  DesignatorFactor(
                    IdentifierDesignator(
                     tezinaK
                    ) [IdentifierDesignator]
                  ) [DesignatorFactor]
                ) [SingleFactorTerm]
              ) [SingleTermExpression]
            ) [LeftExpression]
            NoPrintWidth(
            ) [NoPrintWidth]
          ) [PrintStatement]
        ) [MultipleStatements]
        PrintStatement(
          LeftExpression(
            SingleTermExpression(
              NoSign(
              ) [NoSign]
              SingleFactorTerm(
                DesignatorFactor(
                  IdentifierDesignator(
                   eol
                  ) [IdentifierDesignator]
                ) [DesignatorFactor]
              ) [SingleFactorTerm]
            ) [SingleTermExpression]
          ) [LeftExpression]
          NoPrintWidth(
          ) [NoPrintWidth]
        ) [PrintStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - test303.mj:3: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - test303.mj:5: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:5: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - test303.mj:5: SEMANTIC ANALYZER: Defined int constant 'cinilac'. Symbol node: Constant 'cinilac': type = 'int', adr = 4, level = 0
DEBUG - test303.mj:5: SEMANTIC ANALYZER: Visited node: 'ConstAssignment'.
INFO  - test303.mj:5: SEMANTIC ANALYZER: Defined int constant 'delilac'. Symbol node: Constant 'delilac': type = 'int', adr = 3, level = 0
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'AbstractClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - test303.mj:9: SEMANTIC ANALYZER: Defined method 'zapremina'. Symbol node: Abstract method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'AbsPredmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - test303.mj:10: SEMANTIC ANALYZER: Defined method 'Q'. Symbol node: Abstract method 'Q': type = 'int', adr = 0, level = 1, parent = 'AbsPredmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'AbstractClassDeclaration'.
INFO  - test303.mj:6: SEMANTIC ANALYZER: Defined class 'AbsPredmet'. Symbol node: Type 'AbsPredmet': type = 'abstract class', adr = 0, level = 0
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - test303.mj:13: SEMANTIC ANALYZER: Found abstract class usage 'AbsPredmet'! Symbol node: Type 'AbsPredmet': type = 'abstract class', adr = 0, level = 0
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - test303.mj:15: SEMANTIC ANALYZER: Defined int variable 'tezina'. Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - test303.mj:16: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:16: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - test303.mj:16: SEMANTIC ANALYZER: Defined char variable 'vrsta'. Symbol node: Field 'vrsta': type = 'char', adr = 2, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:19: SEMANTIC ANALYZER: Defined int formal parameter 'tezina'. Symbol node: Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:19: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:19: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'tezina'! Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:19: SEMANTIC ANALYZER: Found formal parameter usage 'tezina'! Symbol node: Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:19: SEMANTIC ANALYZER: Defined method 'postaviTezinu'. Symbol node: Method 'postaviTezinu': type = 'void', adr = 0, level = 2, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:20: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:20: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:20: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'tezina'! Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:20: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - test303.mj:20: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:20: SEMANTIC ANALYZER: Defined method 'ucitajTezinu'. Symbol node: Method 'ucitajTezinu': type = 'void', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:28: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:21: SEMANTIC ANALYZER: Defined method 'zapremina'. Symbol node: Method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:22: SEMANTIC ANALYZER: Found class 'Predmet' method call 'zapremina'! Symbol node: Method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:22: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'tezina'! Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:22: SEMANTIC ANALYZER: Defined method 'Q'. Symbol node: Method 'Q': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:23: SEMANTIC ANALYZER: Defined char formal parameter 'vrsta'. Symbol node: Formal parameter 'vrsta': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:23: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:23: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'vrsta'! Symbol node: Field 'vrsta': type = 'char', adr = 2, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:23: SEMANTIC ANALYZER: Found formal parameter usage 'vrsta'! Symbol node: Formal parameter 'vrsta': type = 'char', adr = 1, level = 1
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:52: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:23: SEMANTIC ANALYZER: Defined method 'postaviVrstu'. Symbol node: Method 'postaviVrstu': type = 'void', adr = 0, level = 2, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'vrsta': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:24: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'vrsta'! Symbol node: Field 'vrsta': type = 'char', adr = 2, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:24: SEMANTIC ANALYZER: Defined method 'dohvVrstu'. Symbol node: Method 'dohvVrstu': type = 'char', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:25: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'tezina'! Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:25: SEMANTIC ANALYZER: Defined method 'dohvTezinu'. Symbol node: Method 'dohvTezinu': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - test303.mj:13: SEMANTIC ANALYZER: Defined class 'Predmet'. Symbol node: Type 'Predmet': type = 'class', adr = 0, level = 0
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - test303.mj:31: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:31: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - test303.mj:31: SEMANTIC ANALYZER: Defined int variable 'r'. Symbol node: Field 'r': type = 'int', adr = 3, level = 1, parent = 'Sfera', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:33: SEMANTIC ANALYZER: Defined int formal parameter 'tezina'. Symbol node: Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:33: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:33: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'tezina'! Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:33: SEMANTIC ANALYZER: Found formal parameter usage 'tezina'! Symbol node: Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:33: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'vrsta'! Symbol node: Field 'vrsta': type = 'char', adr = 2, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:70: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:33: SEMANTIC ANALYZER: Defined method 'postaviTezinu'. Symbol node: Method 'postaviTezinu': type = 'void', adr = 0, level = 2, parent = 'Sfera', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:34: SEMANTIC ANALYZER: Defined int formal parameter 'r'. Symbol node: Formal parameter 'r': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:34: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:34: SEMANTIC ANALYZER: Found class 'Sfera' field usage 'r'! Symbol node: Field 'r': type = 'int', adr = 3, level = 1, parent = 'Sfera', access modifier = private
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:34: SEMANTIC ANALYZER: Found formal parameter usage 'r'! Symbol node: Formal parameter 'r': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:34: SEMANTIC ANALYZER: Found class 'Predmet' method call 'postaviVrstu'! Symbol node: Method 'postaviVrstu': type = 'void', adr = 0, level = 2, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'vrsta': type = 'char', adr = 1, level = 1
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:34: SEMANTIC ANALYZER: Defined method 'postaviPoluprecnik'. Symbol node: Method 'postaviPoluprecnik': type = 'void', adr = 0, level = 2, parent = 'Sfera', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'r': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:36: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:36: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:36: SEMANTIC ANALYZER: Defined int variable 'z'. Symbol node: Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:38: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:38: SEMANTIC ANALYZER: Found symbolic constant usage 'cinilac'! Symbol node: Constant 'cinilac': type = 'int', adr = 4, level = 0
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:39: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:39: SEMANTIC ANALYZER: Found class 'Sfera' field usage 'r'! Symbol node: Field 'r': type = 'int', adr = 3, level = 1, parent = 'Sfera', access modifier = private
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:39: SEMANTIC ANALYZER: Found symbolic constant usage 'delilac'! Symbol node: Constant 'delilac': type = 'int', adr = 3, level = 0
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'InnerExpressionFactor'.
DEBUG - test303.mj:39: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:4: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:4: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:4: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:35: SEMANTIC ANALYZER: Defined method 'zapremina'. Symbol node: Method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'Sfera', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - test303.mj:29: SEMANTIC ANALYZER: Defined class 'Sfera'. Symbol node: Type 'Sfera': type = 'class', adr = 0, level = 0
DEBUG - test303.mj:44: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:44: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PrivateAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PRIVATE.
DEBUG - test303.mj:46: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:46: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - test303.mj:46: SEMANTIC ANALYZER: Defined int variable 'a'. Symbol node: Field 'a': type = 'int', adr = 3, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:46: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - test303.mj:46: SEMANTIC ANALYZER: Defined int variable 'b'. Symbol node: Field 'b': type = 'int', adr = 4, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:46: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - test303.mj:46: SEMANTIC ANALYZER: Defined int variable 'c'. Symbol node: Field 'c': type = 'int', adr = 5, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:48: SEMANTIC ANALYZER: Defined int formal parameter 'tezina'. Symbol node: Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:48: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:48: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'tezina'! Symbol node: Field 'tezina': type = 'int', adr = 1, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:48: SEMANTIC ANALYZER: Found formal parameter usage 'tezina'! Symbol node: Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:48: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'vrsta'! Symbol node: Field 'vrsta': type = 'char', adr = 2, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:70: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:48: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:48: SEMANTIC ANALYZER: Defined method 'postaviTezinu'. Symbol node: Method 'postaviTezinu': type = 'void', adr = 0, level = 2, parent = 'Kvadar', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Defined int formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Defined int formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Defined int formal parameter 'c'. Symbol node: Formal parameter 'c': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'a'! Symbol node: Field 'a': type = 'int', adr = 3, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:60: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:60: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'b'! Symbol node: Field 'b': type = 'int', adr = 4, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'c'! Symbol node: Field 'c': type = 'int', adr = 5, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found formal parameter usage 'c'! Symbol node: Formal parameter 'c': type = 'int', adr = 3, level = 1
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'vrsta'! Symbol node: Field 'vrsta': type = 'char', adr = 2, level = 1, parent = 'Predmet', access modifier = protected
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:49: SEMANTIC ANALYZER: Defined method 'postaviStranice'. Symbol node: Method 'postaviStranice': type = 'void', adr = 0, level = 4, parent = 'Kvadar', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
  Formal parameter 'c': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - test303.mj:50: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:50: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - test303.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:51: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:51: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:51: SEMANTIC ANALYZER: Defined int variable 'z'. Symbol node: Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:53: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:53: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'a'! Symbol node: Field 'a': type = 'int', adr = 3, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:53: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'b'! Symbol node: Field 'b': type = 'int', adr = 4, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:53: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'c'! Symbol node: Field 'c': type = 'int', adr = 5, level = 1, parent = 'Kvadar', access modifier = private
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:53: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:54: SEMANTIC ANALYZER: Found local variable usage 'z'! Symbol node: Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:4: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:4: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:4: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:50: SEMANTIC ANALYZER: Defined method 'zapremina'. Symbol node: Method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'Kvadar', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Variable 'z': type = 'int', adr = 1, level = 2
DEBUG - test303.mj:44: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - test303.mj:44: SEMANTIC ANALYZER: Defined class 'Kvadar'. Symbol node: Type 'Kvadar': type = 'class', adr = 0, level = 0
DEBUG - test303.mj:59: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:59: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test303.mj:59: SEMANTIC ANALYZER: Defined int variable 'zapreminaK'. Symbol node: Variable 'zapreminaK': type = 'int', adr = 0, level = 0
DEBUG - test303.mj:59: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test303.mj:59: SEMANTIC ANALYZER: Defined int variable 'zapreminaS'. Symbol node: Variable 'zapreminaS': type = 'int', adr = 1, level = 0
DEBUG - test303.mj:60: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:60: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test303.mj:60: SEMANTIC ANALYZER: Defined int variable 'tezinaK'. Symbol node: Variable 'tezinaK': type = 'int', adr = 2, level = 0
DEBUG - test303.mj:60: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - test303.mj:60: SEMANTIC ANALYZER: Defined int variable 'tezinaS'. Symbol node: Variable 'tezinaS': type = 'int', adr = 3, level = 0
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:63: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:63: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:63: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - test303.mj:63: SEMANTIC ANALYZER: Defined  formal parameter 'p'. Symbol node: Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:65: SEMANTIC ANALYZER: Found formal parameter usage 'p'! Symbol node: Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:65: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'dohvVrstu'! Symbol node: Method 'dohvVrstu': type = 'char', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:5: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:5: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:5: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:33: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:66: SEMANTIC ANALYZER: Found formal parameter usage 'p'! Symbol node: Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:66: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'dohvVrstu'! Symbol node: Method 'dohvVrstu': type = 'char', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:66: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:65: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:68: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:68: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test303.mj:68: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:68: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:69: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:69: SEMANTIC ANALYZER: Found formal parameter usage 'p'! Symbol node: Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - test303.mj:69: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:69: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'dohvTezinu'! Symbol node: Method 'dohvTezinu': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:69: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:69: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:69: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:69: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:63: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:63: SEMANTIC ANALYZER: Defined method 'ispis'. Symbol node: Method 'ispis': type = 'void', adr = 0, level = 1
  Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  array variable 'predmeti'. Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Found abstract class usage 'AbsPredmet'! Symbol node: Type 'AbsPredmet': type = 'abstract class', adr = 0, level = 0
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  array variable 'absPredmeti'. Symbol node: Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  variable 's1'. Symbol node: Variable 's1': type = 'class', adr = 3, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  variable 's2'. Symbol node: Variable 's2': type = 'class', adr = 4, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  variable 's3'. Symbol node: Variable 's3': type = 'class', adr = 5, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  variable 'k1'. Symbol node: Variable 'k1': type = 'class', adr = 6, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  variable 'k2'. Symbol node: Variable 'k2': type = 'class', adr = 7, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined  variable 'k3'. Symbol node: Variable 'k3': type = 'class', adr = 8, level = 1
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined int variable 't'. Symbol node: Variable 't': type = 'int', adr = 9, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:74: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:74: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:75: SEMANTIC ANALYZER: Found local variable usage 'absPredmeti'! Symbol node: Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - test303.mj:75: SEMANTIC ANALYZER: Found abstract class usage 'AbsPredmet'! Symbol node: Type 'AbsPredmet': type = 'abstract class', adr = 0, level = 0
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:75: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:76: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:76: SEMANTIC ANALYZER: Found local variable usage 's1'! Symbol node: Variable 's1': type = 'class', adr = 3, level = 1
DEBUG - test303.mj:76: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:76: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:76: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:76: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:77: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:77: SEMANTIC ANALYZER: Found local variable usage 's2'! Symbol node: Variable 's2': type = 'class', adr = 4, level = 1
DEBUG - test303.mj:77: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:77: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:77: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:77: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:78: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:78: SEMANTIC ANALYZER: Found local variable usage 's3'! Symbol node: Variable 's3': type = 'class', adr = 5, level = 1
DEBUG - test303.mj:78: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:78: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:78: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:80: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:80: SEMANTIC ANALYZER: Found local variable usage 'k1'! Symbol node: Variable 'k1': type = 'class', adr = 6, level = 1
DEBUG - test303.mj:80: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:80: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:80: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:80: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:81: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:81: SEMANTIC ANALYZER: Found local variable usage 'k2'! Symbol node: Variable 'k2': type = 'class', adr = 7, level = 1
DEBUG - test303.mj:81: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:81: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:81: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:81: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:82: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:82: SEMANTIC ANALYZER: Found local variable usage 'k3'! Symbol node: Variable 'k3': type = 'class', adr = 8, level = 1
DEBUG - test303.mj:82: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - test303.mj:82: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:82: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:84: SEMANTIC ANALYZER: Found local variable usage 's1'! Symbol node: Variable 's1': type = 'class', adr = 3, level = 1
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:84: SEMANTIC ANALYZER: Found class 'Sfera' field usage 'postaviPoluprecnik'! Symbol node: Method 'postaviPoluprecnik': type = 'void', adr = 0, level = 2, parent = 'Sfera', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'r': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:84: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:85: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:85: SEMANTIC ANALYZER: Found local variable usage 's2'! Symbol node: Variable 's2': type = 'class', adr = 4, level = 1
DEBUG - test303.mj:85: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:85: SEMANTIC ANALYZER: Found class 'Sfera' field usage 'postaviPoluprecnik'! Symbol node: Method 'postaviPoluprecnik': type = 'void', adr = 0, level = 2, parent = 'Sfera', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'r': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:85: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:85: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:85: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:85: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:86: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:86: SEMANTIC ANALYZER: Found local variable usage 's3'! Symbol node: Variable 's3': type = 'class', adr = 5, level = 1
DEBUG - test303.mj:86: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:86: SEMANTIC ANALYZER: Found class 'Sfera' field usage 'postaviPoluprecnik'! Symbol node: Method 'postaviPoluprecnik': type = 'void', adr = 0, level = 2, parent = 'Sfera', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'r': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:86: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:86: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:86: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:88: SEMANTIC ANALYZER: Found local variable usage 'k1'! Symbol node: Variable 'k1': type = 'class', adr = 6, level = 1
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:88: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'postaviStranice'! Symbol node: Method 'postaviStranice': type = 'void', adr = 0, level = 4, parent = 'Kvadar', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
  Formal parameter 'c': type = 'int', adr = 3, level = 1
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:88: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:89: SEMANTIC ANALYZER: Found local variable usage 'k2'! Symbol node: Variable 'k2': type = 'class', adr = 7, level = 1
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:89: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'postaviStranice'! Symbol node: Method 'postaviStranice': type = 'void', adr = 0, level = 4, parent = 'Kvadar', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
  Formal parameter 'c': type = 'int', adr = 3, level = 1
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:89: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:90: SEMANTIC ANALYZER: Found local variable usage 'k3'! Symbol node: Variable 'k3': type = 'class', adr = 8, level = 1
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:90: SEMANTIC ANALYZER: Found class 'Kvadar' field usage 'postaviStranice'! Symbol node: Method 'postaviStranice': type = 'void', adr = 0, level = 4, parent = 'Kvadar', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'a': type = 'int', adr = 1, level = 1
  Formal parameter 'b': type = 'int', adr = 2, level = 1
  Formal parameter 'c': type = 'int', adr = 3, level = 1
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:21: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:90: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:92: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:92: SEMANTIC ANALYZER: Found array element access 'predmeti[0]'! Symbol node: Array element 'predmeti[0]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:92: SEMANTIC ANALYZER: Found local variable usage 's1'! Symbol node: Variable 's1': type = 'class', adr = 3, level = 1
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:92: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:93: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:93: SEMANTIC ANALYZER: Found array element access 'predmeti[2]'! Symbol node: Array element 'predmeti[2]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:93: SEMANTIC ANALYZER: Found local variable usage 's2'! Symbol node: Variable 's2': type = 'class', adr = 4, level = 1
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:93: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:94: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:94: SEMANTIC ANALYZER: Found array element access 'predmeti[4]'! Symbol node: Array element 'predmeti[4]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:94: SEMANTIC ANALYZER: Found local variable usage 's3'! Symbol node: Variable 's3': type = 'class', adr = 5, level = 1
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:94: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:95: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:95: SEMANTIC ANALYZER: Found array element access 'predmeti[1]'! Symbol node: Array element 'predmeti[1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:95: SEMANTIC ANALYZER: Found local variable usage 'k1'! Symbol node: Variable 'k1': type = 'class', adr = 6, level = 1
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:95: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:96: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:96: SEMANTIC ANALYZER: Found array element access 'predmeti[3]'! Symbol node: Array element 'predmeti[3]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:96: SEMANTIC ANALYZER: Found local variable usage 'k2'! Symbol node: Variable 'k2': type = 'class', adr = 7, level = 1
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:96: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:97: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:97: SEMANTIC ANALYZER: Found array element access 'predmeti[5]'! Symbol node: Array element 'predmeti[5]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:97: SEMANTIC ANALYZER: Found local variable usage 'k3'! Symbol node: Variable 'k3': type = 'class', adr = 8, level = 1
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:97: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:99: SEMANTIC ANALYZER: Found local variable usage 't'! Symbol node: Variable 't': type = 'int', adr = 9, level = 1
DEBUG - test303.mj:99: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:100: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:100: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:100: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - test303.mj:100: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:102: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:102: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:102: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:102: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'postaviTezinu'! Symbol node: Method 'postaviTezinu': type = 'void', adr = 0, level = 2, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'tezina': type = 'int', adr = 1, level = 1
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:102: SEMANTIC ANALYZER: Found local variable usage 't'! Symbol node: Variable 't': type = 'int', adr = 9, level = 1
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:102: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:103: SEMANTIC ANALYZER: Found local variable usage 'absPredmeti'! Symbol node: Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:103: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:103: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:103: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:103: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:103: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:103: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:100: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - test303.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:106: SEMANTIC ANALYZER: Found global variable usage 'zapreminaS'! Symbol node: Variable 'zapreminaS': type = 'int', adr = 1, level = 0
DEBUG - test303.mj:106: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:106: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:107: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:107: SEMANTIC ANALYZER: Found global variable usage 'tezinaS'! Symbol node: Variable 'tezinaS': type = 'int', adr = 3, level = 0
DEBUG - test303.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:107: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:108: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:108: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:108: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - test303.mj:108: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:110: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - test303.mj:110: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:111: SEMANTIC ANALYZER: Found global variable usage 'zapreminaS'! Symbol node: Variable 'zapreminaS': type = 'int', adr = 1, level = 0
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:111: SEMANTIC ANALYZER: Found global variable usage 'zapreminaS'! Symbol node: Variable 'zapreminaS': type = 'int', adr = 1, level = 0
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:111: SEMANTIC ANALYZER: Found local variable usage 'absPredmeti'! Symbol node: Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:111: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:41: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:111: SEMANTIC ANALYZER: Found array element access 'i[i - 1]'! Symbol node: Array element 'i[i - 1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:111: SEMANTIC ANALYZER: Found class 'AbsPredmet' field usage 'zapremina'! Symbol node: Abstract method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'AbsPredmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:111: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:112: SEMANTIC ANALYZER: Found global variable usage 'tezinaS'! Symbol node: Variable 'tezinaS': type = 'int', adr = 3, level = 0
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:112: SEMANTIC ANALYZER: Found global variable usage 'tezinaS'! Symbol node: Variable 'tezinaS': type = 'int', adr = 3, level = 0
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:112: SEMANTIC ANALYZER: Found local variable usage 'absPredmeti'! Symbol node: Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:112: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:112: SEMANTIC ANALYZER: Found array element access 'i[i - 1]'! Symbol node: Array element 'i[i - 1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:112: SEMANTIC ANALYZER: Found class 'AbsPredmet' field usage 'Q'! Symbol node: Abstract method 'Q': type = 'int', adr = 0, level = 1, parent = 'AbsPredmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:112: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:113: SEMANTIC ANALYZER: Found global method call 'ispis'! Symbol node: Method 'ispis': type = 'void', adr = 0, level = 1
  Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:113: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:113: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:18: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:113: SEMANTIC ANALYZER: Found array element access 'i[i - 1]'! Symbol node: Array element 'i[i - 1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:113: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:108: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - test303.mj:116: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:116: SEMANTIC ANALYZER: Found global variable usage 'zapreminaK'! Symbol node: Variable 'zapreminaK': type = 'int', adr = 0, level = 0
DEBUG - test303.mj:116: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:116: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:116: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:117: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:117: SEMANTIC ANALYZER: Found global variable usage 'tezinaK'! Symbol node: Variable 'tezinaK': type = 'int', adr = 2, level = 0
DEBUG - test303.mj:117: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:117: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:118: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:118: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:10: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:118: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - test303.mj:118: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:120: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:6: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - test303.mj:120: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:121: SEMANTIC ANALYZER: Found global variable usage 'zapreminaK'! Symbol node: Variable 'zapreminaK': type = 'int', adr = 0, level = 0
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:121: SEMANTIC ANALYZER: Found global variable usage 'zapreminaK'! Symbol node: Variable 'zapreminaK': type = 'int', adr = 0, level = 0
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:121: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:121: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:121: SEMANTIC ANALYZER: Found array element access 'i[i - 1]'! Symbol node: Array element 'i[i - 1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:121: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'zapremina'! Symbol node: Method 'zapremina': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:121: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:122: SEMANTIC ANALYZER: Found global variable usage 'tezinaK'! Symbol node: Variable 'tezinaK': type = 'int', adr = 2, level = 0
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:122: SEMANTIC ANALYZER: Found global variable usage 'tezinaK'! Symbol node: Variable 'tezinaK': type = 'int', adr = 2, level = 0
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:122: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:122: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:32: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:122: SEMANTIC ANALYZER: Found array element access 'i[i - 1]'! Symbol node: Array element 'i[i - 1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - test303.mj:122: SEMANTIC ANALYZER: Found class 'Predmet' field usage 'Q'! Symbol node: Method 'Q': type = 'int', adr = 0, level = 1, parent = 'Predmet', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:122: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:123: SEMANTIC ANALYZER: Found global method call 'ispis'! Symbol node: Method 'ispis': type = 'void', adr = 0, level = 1
  Formal parameter 'p': type = 'class', adr = 0, level = 1
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:123: SEMANTIC ANALYZER: Found local variable usage 'predmeti'! Symbol node: Variable 'predmeti': type = 'array of class', adr = 0, level = 1
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:123: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:18: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - test303.mj:123: SEMANTIC ANALYZER: Found array element access 'i[i - 1]'! Symbol node: Array element 'i[i - 1]': type = 'class', adr = -1, level = -1
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:9: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - test303.mj:123: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - test303.mj:118: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - test303.mj:126: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:126: SEMANTIC ANALYZER: Found global variable usage 'zapreminaS'! Symbol node: Variable 'zapreminaS': type = 'int', adr = 1, level = 0
DEBUG - test303.mj:126: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:126: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:126: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:126: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test303.mj:126: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:126: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:27: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:127: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:127: SEMANTIC ANALYZER: Found global variable usage 'zapreminaK'! Symbol node: Variable 'zapreminaK': type = 'int', adr = 0, level = 0
DEBUG - test303.mj:127: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:127: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:127: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:127: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test303.mj:127: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:127: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:27: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:128: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:128: SEMANTIC ANALYZER: Found global variable usage 'tezinaS'! Symbol node: Variable 'tezinaS': type = 'int', adr = 3, level = 0
DEBUG - test303.mj:128: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:128: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:128: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:128: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test303.mj:128: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:128: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:129: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:129: SEMANTIC ANALYZER: Found global variable usage 'tezinaK'! Symbol node: Variable 'tezinaK': type = 'int', adr = 2, level = 0
DEBUG - test303.mj:129: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:129: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:8: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:129: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - test303.mj:129: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - test303.mj:129: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:129: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - test303.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - test303.mj:72: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - test303.mj:72: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = 0, level = 0
  Variable 'predmeti': type = 'array of class', adr = 0, level = 1
  Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 's1': type = 'class', adr = 3, level = 1
  Variable 's2': type = 'class', adr = 4, level = 1
  Variable 's3': type = 'class', adr = 5, level = 1
  Variable 'k1': type = 'class', adr = 6, level = 1
  Variable 'k2': type = 'class', adr = 7, level = 1
  Variable 'k3': type = 'class', adr = 8, level = 1
  Variable 't': type = 'int', adr = 9, level = 1
DEBUG - test303.mj:3: SEMANTIC ANALYZER: Visited node: 'Program'.
INFO  - test303.mj:3: SEMANTIC ANALYZER: Defined program 'test_303'. Symbol node: Program 'test_303': type = 'none', adr = 0, level = 1
  Constant 'cinilac': type = 'int', adr = 4, level = 0
  Constant 'delilac': type = 'int', adr = 3, level = 0
  Type 'AbsPredmet': type = 'abstract class', adr = 0, level = 0
  Type 'Predmet': type = 'class', adr = 0, level = 0
  Type 'Sfera': type = 'class', adr = 0, level = 0
  Type 'Kvadar': type = 'class', adr = 0, level = 0
  Variable 'zapreminaK': type = 'int', adr = 0, level = 0
  Variable 'zapreminaS': type = 'int', adr = 1, level = 0
  Variable 'tezinaK': type = 'int', adr = 2, level = 0
  Variable 'tezinaS': type = 'int', adr = 3, level = 0
  Method 'ispis': type = 'void', adr = 0, level = 1
    Formal parameter 'p': type = 'class', adr = 0, level = 1
  Method 'main': type = 'void', adr = 0, level = 0
    Variable 'predmeti': type = 'array of class', adr = 0, level = 1
    Variable 'absPredmeti': type = 'array of class', adr = 1, level = 1
    Variable 'i': type = 'int', adr = 2, level = 1
    Variable 's1': type = 'class', adr = 3, level = 1
    Variable 's2': type = 'class', adr = 4, level = 1
    Variable 's3': type = 'class', adr = 5, level = 1
    Variable 'k1': type = 'class', adr = 6, level = 1
    Variable 'k2': type = 'class', adr = 7, level = 1
    Variable 'k3': type = 'class', adr = 8, level = 1
    Variable 't': type = 'int', adr = 9, level = 1
DEBUG - test303.mj:3: CODE GENERATOR: Visited node: 'ProgramHeader'.
DEBUG - test303.mj:13: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:20: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:20: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:20: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - test303.mj:20: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:21: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:21: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:28: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:21: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:22: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:52: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:13: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:70: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:34: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:35: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:39: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:4: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:4: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:35: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - test303.mj:44: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:70: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:48: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:60: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:72: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:49: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:50: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:53: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:54: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:4: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:4: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - test303.mj:50: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:44: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - test303.mj:59: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test303.mj:59: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test303.mj:60: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test303.mj:60: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - test303.mj:63: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:5: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:5: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:5: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:5: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:33: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:66: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:65: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:68: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:68: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:69: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:69: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:69: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:69: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:69: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:63: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:72: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - test303.mj:74: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:74: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:74: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:74: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:74: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:75: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:75: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:75: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:75: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:75: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:76: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:76: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:76: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:76: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:77: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:77: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:77: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:78: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:78: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:78: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:78: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:80: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:80: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:80: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:80: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:81: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:81: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:81: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:81: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:82: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:82: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:82: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:82: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:84: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:85: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:85: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:85: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:85: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:85: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:85: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:86: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:86: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:86: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:86: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:86: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:86: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:88: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:89: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:90: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:92: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:93: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:94: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:95: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:96: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:97: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:99: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:99: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:102: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:103: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:100: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:106: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:106: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:106: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:106: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:107: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:107: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:107: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - test303.mj:110: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:41: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:41: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:111: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:35: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:35: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:112: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:18: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:113: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:108: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:116: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:116: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:116: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:116: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:117: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:117: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:117: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:117: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:10: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - test303.mj:6: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - test303.mj:120: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:38: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:15: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:121: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:32: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:32: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - test303.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:122: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - test303.mj:18: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:123: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:118: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - test303.mj:126: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:126: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:126: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:126: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:27: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:127: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:127: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:127: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:127: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:27: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:128: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:128: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:128: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:128: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:129: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:129: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:8: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:129: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - test303.mj:129: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - test303.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - test303.mj:72: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - test303.mj:3: CODE GENERATOR: Visited node: 'Program'.
