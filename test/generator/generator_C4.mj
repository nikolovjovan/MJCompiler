// MikroJava specification example program test
program P
    const int size = 10;

    abstract class Tab {
        private int size;
        {
            public abstract int getp(int i);
            public abstract int getn(int i);
            public int getSize() { return size;}
        }
    }

    class Table extends Tab {
        public int pos[], neg[];
        {
            public void putp (int a, int idx) { this.pos[idx]=a; }
            public void putn (int a, int idx) { this.neg[idx]=a; }
            public int getp (int idx) { return pos[idx]; }
            public int getn (int idx) { return neg[idx]; }
        }
    }

    Table val;
{
    void f(char ch, int a, int arg) int x; {
        x = arg;
    }

    void main() int x, i; char c; {
        //‐‐‐‐‐‐‐‐‐‐ Initialize val
        val = new Table;
        val.pos = new int [size];
        val.neg = new int [size];
        for (i = 0; i < size; i++)
        {
            val.putp(0, i);
            val.putn(0, i);
        }
        f(c, x, i);
        //‐‐‐‐‐‐‐‐‐‐ Read values
        read(x);
        for (;-size < x && x < size;) {
            if (0 <= x && x < size) {
                val.putp(val.getp(x) + 1, x);
            } else if (-size < x && x < 0) {
                val.putn(val.getn(-x) + 1, -x);
            }
            read(x);
        }
        //‐‐‐‐‐‐‐‐‐‐ Print values
        for (i = -size + 1; i < size; i++) {
            print(i, 5);
        }
        print(eol);
        foreach(x : val.neg) {
            print(x, 5);
        }
        i = 0;
        foreach(x : val.pos) {
            i++;
            if (i == size) break;
            print(x, 5);
        }
    }
}