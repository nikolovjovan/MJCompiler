DEBUG - generator_C2.mj:7:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - generator_C2.mj:7:9: LEXER: Found symbol: '#55' with value: 'level_c_code_generation_2'
DEBUG - generator_C2.mj:9:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C2.mj:9:11: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:9:18: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:10:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:10:16: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:10:21: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:10:24: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:10:25: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:10:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:11:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:12:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:12:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:12:24: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:12:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:12:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:12:33: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:13:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:13:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:13:21: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:13:25: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:13:28: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:13:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:13:34: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:13:41: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:13:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:14:17: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:14:24: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_C2.mj:14:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:14:28: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:14:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:14:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:15:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:17:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:17:20: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_C2.mj:17:25: LEXER: Found symbol: '#55' with value: 'isEmpty'
DEBUG - generator_C2.mj:17:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:17:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:17:35: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:18:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:18:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:18:21: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:18:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:18:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:18:30: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:18:33: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:18:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:18:36: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:18:43: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_C2.mj:18:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:19:17: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:19:24: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_C2.mj:19:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:20:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:22:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:22:20: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:22:27: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:22:33: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:22:34: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:22:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:22:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:23:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:23:24: LEXER: Found symbol: '#55' with value: 'result'
DEBUG - generator_C2.mj:23:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:24:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:24:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:24:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:24:24: LEXER: Found symbol: '#55' with value: 'offset'
DEBUG - generator_C2.mj:24:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:25:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:26:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:26:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:26:21: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:26:23: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:26:26: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:26:31: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_C2.mj:26:34: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:26:35: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:26:36: LEXER: Found symbol: '#55' with value: 'isEmpty'
DEBUG - generator_C2.mj:26:43: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:26:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:26:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:26:47: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:26:54: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:26:58: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:27:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:27:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:27:21: LEXER: Found symbol: '#55' with value: 'isEmpty'
DEBUG - generator_C2.mj:27:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:27:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:27:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:27:32: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:27:39: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:27:40: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:28:17: LEXER: Found symbol: '#55' with value: 'result'
DEBUG - generator_C2.mj:28:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:28:26: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:28:30: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:28:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:29:17: LEXER: Found symbol: '#55' with value: 'result'
DEBUG - generator_C2.mj:29:23: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:29:24: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:29:28: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:29:30: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:29:34: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:29:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:29:39: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:29:45: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:29:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:29:48: LEXER: Found symbol: '#22' with value: '+'
DEBUG - generator_C2.mj:29:50: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:29:51: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:29:52: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:29:58: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:29:59: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:29:60: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:29:61: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:30:17: LEXER: Found symbol: '#55' with value: 'offset'
DEBUG - generator_C2.mj:30:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:30:26: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:30:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:30:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:30:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:31:17: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_C2.mj:31:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:31:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:31:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:31:26: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:31:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:31:29: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:31:31: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C2.mj:31:33: LEXER: Found symbol: '#55' with value: 'offset'
DEBUG - generator_C2.mj:31:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:31:41: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:31:42: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_C2.mj:31:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:31:46: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:32:21: LEXER: Found symbol: '#55' with value: 'result'
DEBUG - generator_C2.mj:32:27: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:32:28: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:32:31: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:32:32: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:32:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:32:35: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:32:37: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:32:40: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:32:41: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:32:42: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:32:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:33:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:34:17: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_C2.mj:34:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:34:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:34:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:34:26: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:34:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:34:29: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:34:31: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C2.mj:34:33: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:34:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:34:35: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:34:41: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:34:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:34:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:34:45: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:34:46: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_C2.mj:34:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:34:50: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:35:21: LEXER: Found symbol: '#55' with value: 'result'
DEBUG - generator_C2.mj:35:27: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:35:28: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:35:31: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:35:32: LEXER: Found symbol: '#55' with value: 'offset'
DEBUG - generator_C2.mj:35:39: LEXER: Found symbol: '#22' with value: '+'
DEBUG - generator_C2.mj:35:41: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:35:42: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:35:44: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:35:46: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:35:47: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:35:48: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:35:51: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:35:52: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:35:53: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:35:54: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:36:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:37:17: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:37:24: LEXER: Found symbol: '#55' with value: 'result'
DEBUG - generator_C2.mj:37:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:38:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:40:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:40:20: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_C2.mj:40:25: LEXER: Found symbol: '#55' with value: 'equals'
DEBUG - generator_C2.mj:40:31: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:40:32: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:40:39: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:40:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:41:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:41:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:41:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:41:24: LEXER: Found symbol: '#55' with value: 'l'
DEBUG - generator_C2.mj:41:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:42:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:43:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:43:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:43:21: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:43:26: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:43:29: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:43:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:43:32: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:43:39: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_C2.mj:43:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:44:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:44:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:44:21: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:44:26: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:44:29: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:44:34: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_C2.mj:44:37: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:44:39: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:44:42: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:44:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:44:48: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:44:55: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_C2.mj:44:60: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:45:17: LEXER: Found symbol: '#55' with value: 'l'
DEBUG - generator_C2.mj:45:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:45:21: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:45:27: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:45:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:45:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:46:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:46:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:46:21: LEXER: Found symbol: '#55' with value: 'l'
DEBUG - generator_C2.mj:46:23: LEXER: Found symbol: '#30' with value: '!='
DEBUG - generator_C2.mj:46:26: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:46:27: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:46:28: LEXER: Found symbol: '#55' with value: 'length'
DEBUG - generator_C2.mj:46:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:46:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:46:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:46:38: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:46:45: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_C2.mj:46:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:47:17: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_C2.mj:47:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:47:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:47:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:47:26: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:47:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:47:29: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:47:31: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_C2.mj:47:33: LEXER: Found symbol: '#55' with value: 'l'
DEBUG - generator_C2.mj:47:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:47:36: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:47:37: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_C2.mj:47:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:47:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:48:21: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:48:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:48:25: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:48:28: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:48:29: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:48:30: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:48:32: LEXER: Found symbol: '#30' with value: '!='
DEBUG - generator_C2.mj:48:35: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:48:36: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:48:37: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:48:40: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:48:41: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:48:42: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:48:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:48:45: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:48:52: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_C2.mj:48:57: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:49:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:50:17: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:50:24: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_C2.mj:50:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:51:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:52:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:53:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:55:5: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:55:12: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:55:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:55:24: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:55:35: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:55:37: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:55:48: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:55:50: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:55:63: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:55:65: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:55:77: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:57:5: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - generator_C2.mj:57:14: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C2.mj:57:20: LEXER: Found symbol: '#55' with value: 'AbsWorker'
DEBUG - generator_C2.mj:57:30: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:58:9: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - generator_C2.mj:58:19: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:58:26: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:58:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:59:9: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - generator_C2.mj:59:19: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:59:23: LEXER: Found symbol: '#55' with value: 'yearOfBirth'
DEBUG - generator_C2.mj:59:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:60:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:61:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:61:20: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:61:27: LEXER: Found symbol: '#55' with value: 'getName'
DEBUG - generator_C2.mj:61:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:61:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:61:37: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:61:39: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:61:46: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:61:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:61:52: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:62:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:62:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:62:25: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:62:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:62:33: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:62:40: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:62:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:62:46: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:62:48: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:62:52: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:62:53: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:62:58: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:62:60: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:62:64: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:62:66: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:64:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:64:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:64:24: LEXER: Found symbol: '#55' with value: 'getYearOfBirth'
DEBUG - generator_C2.mj:64:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:64:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:64:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:64:43: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:64:50: LEXER: Found symbol: '#55' with value: 'yearOfBirth'
DEBUG - generator_C2.mj:64:61: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:64:63: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:65:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:65:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:65:25: LEXER: Found symbol: '#55' with value: 'setYearOfBirth'
DEBUG - generator_C2.mj:65:39: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:65:40: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:65:44: LEXER: Found symbol: '#55' with value: 'yearOfBirth'
DEBUG - generator_C2.mj:65:55: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:65:57: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:65:59: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:65:63: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:65:64: LEXER: Found symbol: '#55' with value: 'yearOfBirth'
DEBUG - generator_C2.mj:65:76: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:65:78: LEXER: Found symbol: '#55' with value: 'yearOfBirth'
DEBUG - generator_C2.mj:65:89: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:65:91: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:67:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:67:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - generator_C2.mj:67:29: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:67:36: LEXER: Found symbol: '#55' with value: 'toString'
DEBUG - generator_C2.mj:67:44: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:67:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:67:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:68:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:69:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:71:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C2.mj:71:11: LEXER: Found symbol: '#55' with value: 'Worker'
DEBUG - generator_C2.mj:71:18: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - generator_C2.mj:71:26: LEXER: Found symbol: '#55' with value: 'AbsWorker'
DEBUG - generator_C2.mj:71:36: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:72:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:74:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:74:20: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:74:27: LEXER: Found symbol: '#55' with value: 'toString'
DEBUG - generator_C2.mj:74:35: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:74:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:74:38: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:74:40: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:74:47: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:74:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:74:53: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:75:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:76:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:78:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C2.mj:78:11: LEXER: Found symbol: '#55' with value: 'ShopOwner'
DEBUG - generator_C2.mj:78:21: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - generator_C2.mj:78:29: LEXER: Found symbol: '#55' with value: 'AbsWorker'
DEBUG - generator_C2.mj:78:39: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:79:9: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - generator_C2.mj:79:19: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:79:26: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:79:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:80:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:81:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:81:20: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:81:27: LEXER: Found symbol: '#55' with value: 'getShopName'
DEBUG - generator_C2.mj:81:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:81:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:81:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:81:43: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:81:50: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:81:58: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:81:60: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:82:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:82:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:82:25: LEXER: Found symbol: '#55' with value: 'setShopName'
DEBUG - generator_C2.mj:82:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:82:37: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:82:44: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:82:52: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:82:54: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:83:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:83:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:83:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:83:32: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:83:35: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:83:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:83:41: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:84:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:84:32: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:84:34: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:84:38: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:84:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:85:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:85:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:85:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:85:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:85:38: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:85:42: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:85:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:85:47: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:85:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:85:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:86:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:86:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:86:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:86:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:86:36: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:86:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:86:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:86:41: LEXER: Found symbol: '#53' with value: 'S'
DEBUG - generator_C2.mj:86:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:87:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:87:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:87:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:87:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:87:36: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:87:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:87:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:87:41: LEXER: Found symbol: '#53' with value: 'h'
DEBUG - generator_C2.mj:87:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:88:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:88:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:88:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:88:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:88:36: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:88:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:88:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:88:41: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_C2.mj:88:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:89:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:89:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:89:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:89:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:89:36: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:89:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:89:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:89:41: LEXER: Found symbol: '#53' with value: 'p'
DEBUG - generator_C2.mj:89:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:90:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:90:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:90:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:90:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:90:36: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:90:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:90:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:90:41: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_C2.mj:90:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:91:21: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:91:31: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:91:32: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:91:35: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:91:36: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:91:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:91:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:91:41: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:91:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:92:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:93:17: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:93:21: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:93:22: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:93:31: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:93:33: LEXER: Found symbol: '#55' with value: 'shopHeader'
DEBUG - generator_C2.mj:93:43: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:93:44: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:93:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:93:51: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:93:59: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:93:60: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:94:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:96:13: LEXER: Found symbol: '#19' with value: 'protected'
DEBUG - generator_C2.mj:96:23: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:96:28: LEXER: Found symbol: '#55' with value: 'initOwnerHeader'
DEBUG - generator_C2.mj:96:43: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:96:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:96:46: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:97:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:97:29: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:97:31: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:97:35: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:97:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:98:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:98:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:98:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:98:33: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:98:35: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:98:39: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:98:43: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:98:44: LEXER: Found symbol: '#52' with value: '9'
DEBUG - generator_C2.mj:98:45: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:98:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:99:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:99:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:99:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:99:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:99:33: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:99:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:99:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:99:38: LEXER: Found symbol: '#53' with value: ';'
DEBUG - generator_C2.mj:99:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:100:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:100:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:100:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:100:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:100:33: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:100:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:100:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:100:38: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:100:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:101:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:101:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:101:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:101:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:101:33: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:101:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:101:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:101:38: LEXER: Found symbol: '#53' with value: 'O'
DEBUG - generator_C2.mj:101:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:102:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:102:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:102:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:102:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:102:33: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:102:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:102:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:102:38: LEXER: Found symbol: '#53' with value: 'w'
DEBUG - generator_C2.mj:102:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:103:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:103:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:103:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:103:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:103:33: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:103:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:103:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:103:38: LEXER: Found symbol: '#53' with value: 'n'
DEBUG - generator_C2.mj:103:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:104:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:104:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:104:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:104:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:104:33: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:104:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:104:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:104:38: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:104:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:105:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:105:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:105:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:105:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:105:33: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:105:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:105:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:105:38: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:105:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:106:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:106:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:106:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:106:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:106:33: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_C2.mj:106:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:106:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:106:38: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_C2.mj:106:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:107:17: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:107:28: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:107:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:107:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:107:33: LEXER: Found symbol: '#52' with value: '8'
DEBUG - generator_C2.mj:107:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:107:36: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:107:38: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:107:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:108:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:111:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:111:20: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:111:27: LEXER: Found symbol: '#55' with value: 'toString'
DEBUG - generator_C2.mj:111:35: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:111:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:112:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:112:24: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:112:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:113:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:114:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:114:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:114:21: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:114:33: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:114:36: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:114:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:114:42: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:115:21: LEXER: Found symbol: '#55' with value: 'initOwnerHeader'
DEBUG - generator_C2.mj:115:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:115:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:115:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:116:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:117:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:117:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:117:21: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:117:30: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:117:33: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:117:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:117:39: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:117:46: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:117:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:118:17: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:118:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:118:21: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:118:29: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:118:30: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:118:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:118:37: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:118:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:118:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:119:17: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:119:24: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:119:25: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:119:26: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:119:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:119:33: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:119:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:119:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:120:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:121:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:122:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:124:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C2.mj:124:11: LEXER: Found symbol: '#55' with value: 'Baker'
DEBUG - generator_C2.mj:124:17: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - generator_C2.mj:124:25: LEXER: Found symbol: '#55' with value: 'ShopOwner'
DEBUG - generator_C2.mj:124:35: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:125:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:127:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:127:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:127:25: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:127:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:127:33: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:127:40: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:127:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:128:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:128:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:128:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:129:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:130:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:130:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:130:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:130:33: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:130:36: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:130:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:130:42: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:131:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:131:33: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:131:35: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:131:39: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:131:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:132:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:132:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:132:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:132:37: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:132:39: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:132:43: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:132:47: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:132:48: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_C2.mj:132:49: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:132:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:133:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:133:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:133:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:133:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:133:37: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:133:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:133:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:133:42: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_C2.mj:133:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:134:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:134:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:134:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:134:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:134:37: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:134:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:134:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:134:42: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:134:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:135:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:135:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:135:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:135:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:135:37: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:135:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:135:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:135:42: LEXER: Found symbol: '#53' with value: 'k'
DEBUG - generator_C2.mj:135:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:136:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:136:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:136:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:136:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:136:37: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:136:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:136:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:136:42: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:136:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:137:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:137:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:137:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:137:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:137:37: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:137:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:137:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:137:42: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:137:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:138:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:138:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:138:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:138:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:138:37: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:138:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:138:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:138:42: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_C2.mj:138:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:139:21: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:139:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:139:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:139:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:139:37: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:139:38: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:139:40: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:139:42: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:139:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:140:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:141:17: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:141:21: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:141:22: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:141:27: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:141:29: LEXER: Found symbol: '#55' with value: 'bakerHeader'
DEBUG - generator_C2.mj:141:40: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:141:41: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:141:47: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:141:48: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:141:52: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:141:53: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:142:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:143:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:144:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:146:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - generator_C2.mj:146:11: LEXER: Found symbol: '#55' with value: 'Butcher'
DEBUG - generator_C2.mj:146:19: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - generator_C2.mj:146:27: LEXER: Found symbol: '#55' with value: 'ShopOwner'
DEBUG - generator_C2.mj:146:37: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:147:9: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:147:16: LEXER: Found symbol: '#55' with value: 'AbsWorker'
DEBUG - generator_C2.mj:147:26: LEXER: Found symbol: '#55' with value: 'helper'
DEBUG - generator_C2.mj:147:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:148:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:150:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:150:20: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:150:25: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:150:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:150:33: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:150:40: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:150:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:151:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:151:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_C2.mj:151:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:152:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:153:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:153:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:153:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:153:35: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:153:38: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:153:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:153:44: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:154:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:154:35: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:154:37: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:154:41: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:154:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:155:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:155:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:155:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:155:39: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:155:41: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:155:45: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:155:49: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:155:50: LEXER: Found symbol: '#52' with value: '9'
DEBUG - generator_C2.mj:155:51: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:155:52: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:156:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:156:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:156:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:156:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:156:39: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:156:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:156:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:156:44: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_C2.mj:156:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:157:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:157:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:157:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:157:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:157:39: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:157:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:157:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:157:44: LEXER: Found symbol: '#53' with value: 'u'
DEBUG - generator_C2.mj:157:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:158:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:158:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:158:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:158:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:158:39: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:158:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:158:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:158:44: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_C2.mj:158:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:159:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:159:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:159:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:159:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:159:39: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:159:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:159:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:159:44: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_C2.mj:159:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:160:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:160:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:160:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:160:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:160:39: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:160:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:160:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:160:44: LEXER: Found symbol: '#53' with value: 'h'
DEBUG - generator_C2.mj:160:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:161:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:161:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:161:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:161:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:161:39: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:161:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:161:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:161:44: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:161:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:162:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:162:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:162:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:162:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:162:39: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:162:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:162:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:162:44: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:162:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:163:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:163:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:163:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:163:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:163:39: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_C2.mj:163:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:163:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:163:44: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_C2.mj:163:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:164:21: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:164:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:164:35: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:164:38: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:164:39: LEXER: Found symbol: '#52' with value: '8'
DEBUG - generator_C2.mj:164:40: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:164:42: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:164:44: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:164:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:165:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:166:17: LEXER: Found symbol: '#55' with value: 'this'
DEBUG - generator_C2.mj:166:21: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:166:22: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:166:27: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:166:29: LEXER: Found symbol: '#55' with value: 'butcherHeader'
DEBUG - generator_C2.mj:166:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:166:43: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:166:49: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:166:50: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:166:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:166:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:167:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:170:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - generator_C2.mj:170:20: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:170:27: LEXER: Found symbol: '#55' with value: 'toString'
DEBUG - generator_C2.mj:170:35: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:170:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:171:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:171:24: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:171:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:172:13: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:173:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:173:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:173:21: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:173:33: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:173:36: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:173:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:173:42: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:174:21: LEXER: Found symbol: '#55' with value: 'initOwnerHeader'
DEBUG - generator_C2.mj:174:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:174:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:174:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:175:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:176:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:176:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:176:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:176:34: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:176:37: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:176:41: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:176:43: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:177:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:177:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:177:36: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:177:40: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:177:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:178:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:178:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:178:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:178:38: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:178:40: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:178:44: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:178:48: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:178:49: LEXER: Found symbol: '#52' with value: '10'
DEBUG - generator_C2.mj:178:51: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:178:52: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:179:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:179:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:179:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:179:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:179:38: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:179:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:179:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:179:43: LEXER: Found symbol: '#53' with value: ';'
DEBUG - generator_C2.mj:179:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:180:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:180:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:180:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:180:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:180:38: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:180:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:180:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:180:43: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:180:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:181:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:181:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:181:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:181:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:181:38: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:181:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:181:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:181:43: LEXER: Found symbol: '#53' with value: 'H'
DEBUG - generator_C2.mj:181:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:182:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:182:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:182:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:182:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:182:38: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:182:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:182:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:182:43: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:182:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:183:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:183:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:183:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:183:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:183:38: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:183:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:183:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:183:43: LEXER: Found symbol: '#53' with value: 'l'
DEBUG - generator_C2.mj:183:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:184:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:184:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:184:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:184:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:184:38: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:184:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:184:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:184:43: LEXER: Found symbol: '#53' with value: 'p'
DEBUG - generator_C2.mj:184:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:185:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:185:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:185:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:185:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:185:38: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:185:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:185:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:185:43: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:185:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:186:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:186:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:186:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:186:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:186:38: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_C2.mj:186:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:186:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:186:43: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:186:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:187:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:187:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:187:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:187:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:187:38: LEXER: Found symbol: '#52' with value: '8'
DEBUG - generator_C2.mj:187:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:187:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:187:43: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_C2.mj:187:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:188:21: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:188:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:188:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:188:37: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:188:38: LEXER: Found symbol: '#52' with value: '9'
DEBUG - generator_C2.mj:188:39: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:188:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:188:43: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:188:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:189:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:190:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:190:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:190:21: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:190:30: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:190:33: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:190:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:190:39: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:190:46: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:190:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:191:17: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:191:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:191:21: LEXER: Found symbol: '#55' with value: 'shopName'
DEBUG - generator_C2.mj:191:29: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:191:30: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:191:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:191:37: LEXER: Found symbol: '#55' with value: 'ownerHeader'
DEBUG - generator_C2.mj:191:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:191:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:192:17: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:192:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:192:21: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:192:22: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:192:23: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:192:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:192:30: LEXER: Found symbol: '#55' with value: 'name'
DEBUG - generator_C2.mj:192:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:192:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:193:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:193:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:193:21: LEXER: Found symbol: '#55' with value: 'helper'
DEBUG - generator_C2.mj:193:28: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:193:31: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:193:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:193:37: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:193:44: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:193:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:194:17: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:194:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:194:21: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:194:22: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:194:23: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:194:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:194:30: LEXER: Found symbol: '#55' with value: 'helperHeader'
DEBUG - generator_C2.mj:194:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:194:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:195:17: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:195:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:195:21: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:195:22: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:195:23: LEXER: Found symbol: '#55' with value: 'concat'
DEBUG - generator_C2.mj:195:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:195:30: LEXER: Found symbol: '#55' with value: 'helper'
DEBUG - generator_C2.mj:195:36: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:195:37: LEXER: Found symbol: '#55' with value: 'toString'
DEBUG - generator_C2.mj:195:45: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:195:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:195:47: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:195:48: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:196:17: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:196:24: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:196:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:197:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:198:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:199:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:201:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:202:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:202:10: LEXER: Found symbol: '#55' with value: 'printString'
DEBUG - generator_C2.mj:202:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:202:22: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:202:29: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:202:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:203:9: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:203:14: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - generator_C2.mj:203:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:204:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:205:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:205:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:205:13: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:205:15: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_C2.mj:205:18: LEXER: Found symbol: '#55' with value: 'null'
DEBUG - generator_C2.mj:205:23: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_C2.mj:205:26: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:205:27: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:205:28: LEXER: Found symbol: '#55' with value: 'isEmpty'
DEBUG - generator_C2.mj:205:35: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:205:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:205:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:205:39: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_C2.mj:205:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:206:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_C2.mj:206:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:206:18: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - generator_C2.mj:206:20: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_C2.mj:206:22: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:206:23: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:206:24: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:206:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:206:29: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:207:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_C2.mj:207:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:207:19: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - generator_C2.mj:207:20: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:207:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:208:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:209:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:211:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:211:10: LEXER: Found symbol: '#55' with value: 'printlnString'
DEBUG - generator_C2.mj:211:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:211:24: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:211:31: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:211:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:211:34: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:212:9: LEXER: Found symbol: '#55' with value: 'printString'
DEBUG - generator_C2.mj:212:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:212:21: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:212:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:212:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:213:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_C2.mj:213:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:213:15: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_C2.mj:213:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:213:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:214:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:216:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_C2.mj:216:10: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - generator_C2.mj:216:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:216:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:217:9: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:217:16: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:217:17: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:217:19: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - generator_C2.mj:217:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:218:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_C2.mj:218:13: LEXER: Found symbol: '#55' with value: 'sw'
DEBUG - generator_C2.mj:218:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:219:9: LEXER: Found symbol: '#55' with value: 'AbsWorker'
DEBUG - generator_C2.mj:219:19: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:219:26: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:219:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:219:28: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_C2.mj:219:30: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:219:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:220:9: LEXER: Found symbol: '#55' with value: 'Baker'
DEBUG - generator_C2.mj:220:15: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:220:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:221:9: LEXER: Found symbol: '#55' with value: 'Butcher'
DEBUG - generator_C2.mj:221:17: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:221:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:222:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:223:9: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:223:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:223:19: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:223:23: LEXER: Found symbol: '#55' with value: 'AbsWorker'
DEBUG - generator_C2.mj:223:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:223:33: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:223:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:223:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:226:9: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:226:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:226:18: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:226:22: LEXER: Found symbol: '#55' with value: 'Worker'
DEBUG - generator_C2.mj:226:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:227:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:227:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:227:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:227:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:227:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:228:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:228:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:228:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:228:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:228:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:228:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:228:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:228:26: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:228:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:228:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:229:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:229:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:229:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:229:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:229:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:229:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:229:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:229:20: LEXER: Found symbol: '#53' with value: 'J'
DEBUG - generator_C2.mj:229:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:229:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:229:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:229:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:229:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:229:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:229:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:229:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:229:36: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_C2.mj:229:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:229:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:229:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:229:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:229:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:229:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:229:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:229:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:229:52: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:229:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:230:9: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:230:15: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:230:16: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:230:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:230:24: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:230:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:230:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:231:9: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:231:15: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:231:16: LEXER: Found symbol: '#55' with value: 'setYearOfBirth'
DEBUG - generator_C2.mj:231:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:231:31: LEXER: Found symbol: '#52' with value: '1968'
DEBUG - generator_C2.mj:231:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:231:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:232:9: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:232:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:232:17: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:232:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:232:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:232:22: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:232:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:235:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:235:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:235:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:235:21: LEXER: Found symbol: '#55' with value: 'Baker'
DEBUG - generator_C2.mj:235:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:236:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:236:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:236:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:236:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:236:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:237:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:237:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:237:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:237:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:237:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:237:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:237:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:237:26: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:237:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:237:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:238:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:238:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:238:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:238:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:238:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:238:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:238:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:238:20: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_C2.mj:238:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:238:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:238:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:238:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:238:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:238:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:238:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:238:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:238:36: LEXER: Found symbol: '#53' with value: 'u'
DEBUG - generator_C2.mj:238:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:238:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:238:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:238:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:238:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:238:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:238:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:238:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:238:52: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_C2.mj:238:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:238:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:238:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:238:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:238:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:238:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:238:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:238:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:238:68: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_C2.mj:238:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:238:73: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:238:74: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:238:75: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:238:78: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:238:79: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:238:80: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:238:82: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:238:84: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:238:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:238:89: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:238:90: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:238:91: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:238:94: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:238:95: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:238:96: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:238:98: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:238:100: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:238:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:239:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:239:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:239:15: LEXER: Found symbol: '#55' with value: 'setShopName'
DEBUG - generator_C2.mj:239:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:239:27: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:239:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:239:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:240:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:240:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:240:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:240:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:240:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:241:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:241:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:241:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:241:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:241:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:241:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:241:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:241:26: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:241:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:241:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:242:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:242:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:242:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:242:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:242:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:242:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:242:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:242:20: LEXER: Found symbol: '#53' with value: 'M'
DEBUG - generator_C2.mj:242:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:242:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:242:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:242:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:242:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:242:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:242:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:242:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:242:36: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:242:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:242:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:242:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:242:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:242:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:242:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:242:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:242:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:242:52: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:242:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:242:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:242:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:242:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:242:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:242:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:242:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:242:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:242:68: LEXER: Found symbol: '#53' with value: 'v'
DEBUG - generator_C2.mj:242:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:242:73: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:242:74: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:242:75: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:242:78: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:242:79: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:242:80: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:242:82: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:242:84: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:242:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:243:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:243:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:243:15: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:243:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:243:23: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:243:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:243:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:244:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:244:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:244:15: LEXER: Found symbol: '#55' with value: 'setYearOfBirth'
DEBUG - generator_C2.mj:244:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:244:30: LEXER: Found symbol: '#52' with value: '1971'
DEBUG - generator_C2.mj:244:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:244:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:245:9: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:245:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:245:17: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:245:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:245:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:245:22: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:245:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:248:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:248:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:248:19: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:248:23: LEXER: Found symbol: '#55' with value: 'Butcher'
DEBUG - generator_C2.mj:248:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:249:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:249:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:249:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:249:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:249:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:250:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:250:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:250:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:250:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:250:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:250:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:250:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:250:26: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:250:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:250:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:251:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:251:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:251:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:251:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:251:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:251:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:251:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:251:20: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_C2.mj:251:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:251:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:251:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:251:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:251:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:251:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:251:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:251:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:251:36: LEXER: Found symbol: '#53' with value: 'i'
DEBUG - generator_C2.mj:251:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:251:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:251:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:251:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:251:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:251:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:251:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:251:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:251:52: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_C2.mj:251:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:251:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:251:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:251:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:251:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:251:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:251:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:251:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:251:68: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_C2.mj:251:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:252:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:252:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:252:17: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:252:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:252:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:252:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:252:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:253:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:253:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:253:17: LEXER: Found symbol: '#55' with value: 'setYearOfBirth'
DEBUG - generator_C2.mj:253:31: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:253:32: LEXER: Found symbol: '#52' with value: '1978'
DEBUG - generator_C2.mj:253:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:253:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:254:9: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:254:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:254:17: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:254:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:254:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:254:22: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:254:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:257:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:257:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:257:19: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:257:23: LEXER: Found symbol: '#55' with value: 'Butcher'
DEBUG - generator_C2.mj:257:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:258:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:258:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:258:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:258:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:258:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:259:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:259:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:259:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:259:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:259:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:259:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:259:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:259:26: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:259:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:259:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:260:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:260:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:260:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:260:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:260:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:260:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:260:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:260:20: LEXER: Found symbol: '#53' with value: 'M'
DEBUG - generator_C2.mj:260:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:260:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:260:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:260:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:260:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:260:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:260:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:260:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:260:36: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:260:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:260:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:260:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:260:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:260:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:260:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:260:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:260:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:260:52: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:260:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:260:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:260:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:260:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:260:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:260:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:260:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:260:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:260:68: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_C2.mj:260:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:261:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:261:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:261:17: LEXER: Found symbol: '#55' with value: 'setShopName'
DEBUG - generator_C2.mj:261:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:261:29: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:261:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:261:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:262:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:262:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:262:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:262:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:262:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:263:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:263:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:263:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:263:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:263:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:263:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:263:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:263:26: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:263:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:263:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:264:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:264:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:264:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:264:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:264:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:264:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:264:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:264:20: LEXER: Found symbol: '#53' with value: 'S'
DEBUG - generator_C2.mj:264:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:264:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:264:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:264:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:264:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:264:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:264:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:264:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:264:36: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:264:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:264:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:264:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:264:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:264:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:264:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:264:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:264:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:264:52: LEXER: Found symbol: '#53' with value: 'm'
DEBUG - generator_C2.mj:264:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:264:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:264:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:264:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:264:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:264:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:264:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:264:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:264:68: LEXER: Found symbol: '#53' with value: 'u'
DEBUG - generator_C2.mj:264:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:264:73: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:264:74: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:264:75: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:264:78: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:264:79: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:264:80: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:264:82: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:264:84: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:264:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:264:89: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:264:90: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:264:91: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:264:94: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:264:95: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:264:96: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:264:98: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:264:100: LEXER: Found symbol: '#53' with value: 'l'
DEBUG - generator_C2.mj:264:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:265:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:265:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:265:17: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:265:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:265:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:265:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:265:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:266:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:266:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:266:17: LEXER: Found symbol: '#55' with value: 'helper'
DEBUG - generator_C2.mj:266:24: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:266:26: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:266:33: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:266:34: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:266:35: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:266:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:267:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:267:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:267:17: LEXER: Found symbol: '#55' with value: 'setYearOfBirth'
DEBUG - generator_C2.mj:267:31: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:267:32: LEXER: Found symbol: '#52' with value: '1963'
DEBUG - generator_C2.mj:267:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:267:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:268:9: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:268:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:268:17: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:268:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:268:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:268:22: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:268:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:271:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:271:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:271:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:271:21: LEXER: Found symbol: '#55' with value: 'Baker'
DEBUG - generator_C2.mj:271:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:272:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:272:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:272:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:272:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:272:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:273:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:273:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:273:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:273:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:273:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:273:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:273:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:273:26: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:273:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:273:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:274:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:274:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:274:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:274:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:274:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:274:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:274:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:274:20: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_C2.mj:274:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:274:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:274:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:274:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:274:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:274:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:274:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:274:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:274:36: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:274:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:274:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:274:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:274:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:274:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:274:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:274:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:274:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:274:52: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_C2.mj:274:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:274:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:274:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:274:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:274:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:274:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:274:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:274:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:274:68: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:274:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:274:73: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:274:74: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:274:75: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:274:78: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:274:79: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:274:80: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:274:82: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:274:84: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_C2.mj:274:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:275:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:275:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:275:15: LEXER: Found symbol: '#55' with value: 'setShopName'
DEBUG - generator_C2.mj:275:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:275:27: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:275:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:275:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:276:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:276:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:276:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:276:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:276:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:277:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:277:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:277:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:277:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:277:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:277:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:277:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:277:26: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_C2.mj:277:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:277:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:278:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:20: LEXER: Found symbol: '#53' with value: 'M'
DEBUG - generator_C2.mj:278:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:278:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:36: LEXER: Found symbol: '#53' with value: 'i'
DEBUG - generator_C2.mj:278:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:278:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:52: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:278:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:278:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:68: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:278:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:73: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:74: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:75: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:78: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:79: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:278:80: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:82: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:84: LEXER: Found symbol: '#53' with value: 'n'
DEBUG - generator_C2.mj:278:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:89: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:90: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:91: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:94: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:95: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:278:96: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:98: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:100: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_C2.mj:278:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:278:105: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:278:106: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:278:107: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:278:110: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:278:111: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_C2.mj:278:112: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:278:114: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:278:116: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:278:119: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:279:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:279:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:279:15: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:279:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:279:23: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:279:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:279:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:280:9: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:280:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:280:15: LEXER: Found symbol: '#55' with value: 'setYearOfBirth'
DEBUG - generator_C2.mj:280:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:280:30: LEXER: Found symbol: '#52' with value: '1985'
DEBUG - generator_C2.mj:280:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:280:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:281:9: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:281:16: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:281:17: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:281:18: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:281:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:281:22: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:281:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:284:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:284:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:284:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:284:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:284:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:285:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:285:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:285:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:285:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:285:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:285:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:285:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:285:26: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:285:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:285:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:286:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:286:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:286:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:286:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:286:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:286:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:286:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:286:20: LEXER: Found symbol: '#53' with value: 'E'
DEBUG - generator_C2.mj:286:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:286:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:286:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:286:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:286:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:286:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:286:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:286:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:286:36: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_C2.mj:286:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:286:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:286:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:286:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:286:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:286:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:286:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:286:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:286:52: LEXER: Found symbol: '#53' with value: 'i'
DEBUG - generator_C2.mj:286:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:286:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:286:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:286:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:286:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:286:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:286:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:286:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:286:68: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_C2.mj:286:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:287:9: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:287:16: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:287:17: LEXER: Found symbol: '#55' with value: 'helper'
DEBUG - generator_C2.mj:287:23: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:287:24: LEXER: Found symbol: '#55' with value: 'setName'
DEBUG - generator_C2.mj:287:31: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:287:32: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:287:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:287:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:290:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_C2.mj:290:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:290:18: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:290:25: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_C2.mj:290:27: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:290:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:290:36: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:291:13: LEXER: Found symbol: '#55' with value: 'printlnString'
DEBUG - generator_C2.mj:291:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:291:27: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:291:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:291:34: LEXER: Found symbol: '#55' with value: 'getName'
DEBUG - generator_C2.mj:291:41: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:291:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:291:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:291:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:292:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:294:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:294:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:294:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:294:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:294:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:295:9: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - generator_C2.mj:295:12: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:295:14: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:295:21: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:295:22: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:295:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:295:24: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:295:25: LEXER: Found symbol: '#55' with value: 'getName'
DEBUG - generator_C2.mj:295:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:295:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:295:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:296:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:296:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:296:13: LEXER: Found symbol: '#55' with value: 's2'
DEBUG - generator_C2.mj:296:15: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:296:16: LEXER: Found symbol: '#55' with value: 'equals'
DEBUG - generator_C2.mj:296:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:296:23: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:296:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:296:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:296:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:296:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:296:34: LEXER: Found symbol: '#55' with value: 'getName'
DEBUG - generator_C2.mj:296:41: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:296:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:296:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:296:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:296:46: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:297:13: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:297:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:297:15: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:297:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:297:21: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:297:25: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:297:29: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:297:30: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:297:31: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:297:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:298:13: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:298:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:298:15: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:298:18: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:298:19: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:298:20: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:298:22: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:298:24: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_C2.mj:298:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:298:29: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:298:30: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:298:31: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:298:34: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:298:35: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:298:36: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:298:38: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:298:40: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_C2.mj:298:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:298:45: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:298:46: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:298:47: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:298:50: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:298:51: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:298:52: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:298:54: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:298:56: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_C2.mj:298:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:299:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:299:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_C2.mj:299:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:300:13: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:300:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:300:15: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:300:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:300:21: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:300:25: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:300:29: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:300:30: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:300:31: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:300:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:301:13: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:301:14: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:301:15: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:301:18: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:301:19: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:301:20: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:301:22: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:301:24: LEXER: Found symbol: '#53' with value: 'G'
DEBUG - generator_C2.mj:301:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:301:29: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:301:30: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:301:31: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:301:34: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:301:35: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:301:36: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:301:38: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:301:40: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_C2.mj:301:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:301:45: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:301:46: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:301:47: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:301:50: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:301:51: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:301:52: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:301:54: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:301:56: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_C2.mj:301:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:301:61: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:301:62: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:301:63: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:301:66: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:301:67: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:301:68: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:301:70: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:301:72: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_C2.mj:301:75: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:302:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:303:9: LEXER: Found symbol: '#55' with value: 'printlnString'
DEBUG - generator_C2.mj:303:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:303:23: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:303:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:303:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:305:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:305:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:305:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:305:17: LEXER: Found symbol: '#55' with value: 'String'
DEBUG - generator_C2.mj:305:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:306:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:306:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:306:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:306:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:306:17: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_C2.mj:306:21: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - generator_C2.mj:306:25: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:306:26: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_C2.mj:306:27: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:306:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:307:9: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:307:10: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:307:11: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:307:14: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:307:15: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:307:16: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:307:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:307:20: LEXER: Found symbol: '#53' with value: 's'
DEBUG - generator_C2.mj:307:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:307:25: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:307:26: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:307:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:307:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:307:31: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_C2.mj:307:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:307:34: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:307:36: LEXER: Found symbol: '#53' with value: 'w'
DEBUG - generator_C2.mj:307:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:307:41: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:307:42: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:307:43: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:307:46: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:307:47: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_C2.mj:307:48: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:307:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:307:52: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:307:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:307:57: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:307:58: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:307:59: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:307:62: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:307:63: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_C2.mj:307:64: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:307:66: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:307:68: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_C2.mj:307:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:307:73: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:307:74: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:307:75: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_C2.mj:307:78: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_C2.mj:307:79: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_C2.mj:307:80: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_C2.mj:307:82: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_C2.mj:307:84: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_C2.mj:307:87: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:308:9: LEXER: Found symbol: '#55' with value: 'printString'
DEBUG - generator_C2.mj:308:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:308:21: LEXER: Found symbol: '#55' with value: 's'
DEBUG - generator_C2.mj:308:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:308:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:309:9: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_C2.mj:309:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:309:14: LEXER: Found symbol: '#55' with value: 'sw'
DEBUG - generator_C2.mj:309:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:309:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:310:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_C2.mj:310:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:310:13: LEXER: Found symbol: '#55' with value: 'sw'
DEBUG - generator_C2.mj:310:16: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_C2.mj:310:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_C2.mj:310:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:310:21: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:311:13: LEXER: Found symbol: '#55' with value: 'printlnString'
DEBUG - generator_C2.mj:311:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:311:27: LEXER: Found symbol: '#55' with value: 'baker'
DEBUG - generator_C2.mj:311:32: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:311:33: LEXER: Found symbol: '#55' with value: 'getName'
DEBUG - generator_C2.mj:311:40: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:311:41: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:311:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:311:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:312:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:312:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_C2.mj:312:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:313:13: LEXER: Found symbol: '#55' with value: 'printlnString'
DEBUG - generator_C2.mj:313:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:313:27: LEXER: Found symbol: '#55' with value: 'butcher'
DEBUG - generator_C2.mj:313:34: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:313:35: LEXER: Found symbol: '#55' with value: 'getName'
DEBUG - generator_C2.mj:313:42: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:313:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:313:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:313:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:314:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:316:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_C2.mj:316:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:316:18: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:316:25: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_C2.mj:316:27: LEXER: Found symbol: '#55' with value: 'workers'
DEBUG - generator_C2.mj:316:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:316:36: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_C2.mj:317:13: LEXER: Found symbol: '#55' with value: 'printlnString'
DEBUG - generator_C2.mj:317:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:317:27: LEXER: Found symbol: '#55' with value: 'worker'
DEBUG - generator_C2.mj:317:33: LEXER: Found symbol: '#51' with value: '.'
DEBUG - generator_C2.mj:317:34: LEXER: Found symbol: '#55' with value: 'toString'
DEBUG - generator_C2.mj:317:42: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_C2.mj:317:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:317:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_C2.mj:317:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_C2.mj:318:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:319:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:320:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_C2.mj:320:2: LEXER: Found symbol: '#0' with value: ''
DEBUG - generator_C2.mj:320:2: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree: Program(
  ProgramHeader(
   level_c_code_generation_2
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    MultipleProgramDeclarations(
      MultipleProgramDeclarations(
        MultipleProgramDeclarations(
          MultipleProgramDeclarations(
            MultipleProgramDeclarations(
              MultipleProgramDeclarations(
                NoProgramDeclarations(
                ) [NoProgramDeclarations]
                ClassProgramDeclaration(
                  ClassDeclaration(
                    ClassHeader(
                     String
                      NoClassBaseType(
                      ) [NoClassBaseType]
                    ) [ClassHeader]
                    MultipleClassVarDeclarations(
                      NoClassVarDeclarations(
                      ) [NoClassVarDeclarations]
                      ClassVarDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        Type(
                         char
                        ) [Type]
                        SingleClassVariable(
                          ClassVariable(
                           arr
                            ArrayBrackets(
                            ) [ArrayBrackets]
                          ) [ClassVariable]
                        ) [SingleClassVariable]
                      ) [ClassVarDeclaration]
                    ) [MultipleClassVarDeclarations]
                    ClassMethodDeclarations(
                      MultipleClassMethodDeclarations(
                        MultipleClassMethodDeclarations(
                          MultipleClassMethodDeclarations(
                            SingleClassMethodDeclaration(
                              ClassMethodDeclaration(
                                PublicAccessModifier(
                                ) [PublicAccessModifier]
                                MethodDeclaration(
                                  MethodHeader(
                                    ReturnType(
                                      Type(
                                       int
                                      ) [Type]
                                    ) [ReturnType]
                                   length
                                  ) [MethodHeader]
                                  NoFormalParameters(
                                  ) [NoFormalParameters]
                                  NoLocalVarDeclarations(
                                  ) [NoLocalVarDeclarations]
                                  MethodStatementListStart(
                                  ) [MethodStatementListStart]
                                  MultipleStatements(
                                    MultipleStatements(
                                      NoStatements(
                                      ) [NoStatements]
                                      IfOptElseStatement(
                                        IfStatementHeader(
                                          IfStatementHeaderStart(
                                          ) [IfStatementHeaderStart]
                                          SingleTermCondition(
                                            SingleFactConditionTerm(
                                              ComplexConditionFact(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         arr
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                EqOperator(
                                                ) [EqOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         null
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ComplexConditionFact]
                                            ) [SingleFactConditionTerm]
                                          ) [SingleTermCondition]
                                        ) [IfStatementHeader]
                                        ReturnStatement(
                                          ReturnValue(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     0
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ReturnValue]
                                        ) [ReturnStatement]
                                        NoElseStatment(
                                        ) [NoElseStatment]
                                      ) [IfOptElseStatement]
                                    ) [MultipleStatements]
                                    ReturnStatement(
                                      ReturnValue(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              MethodCallFactor(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    IdentifierDesignator(
                                                     len
                                                    ) [IdentifierDesignator]
                                                  ) [MethodCallHeader]
                                                  ActualParameters(
                                                    SingleActualParameter(
                                                      ActualParameter(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 arr
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ActualParameter]
                                                    ) [SingleActualParameter]
                                                  ) [ActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ReturnValue]
                                    ) [ReturnStatement]
                                  ) [MultipleStatements]
                                ) [MethodDeclaration]
                              ) [ClassMethodDeclaration]
                            ) [SingleClassMethodDeclaration]
                            ClassMethodDeclaration(
                              PublicAccessModifier(
                              ) [PublicAccessModifier]
                              MethodDeclaration(
                                MethodHeader(
                                  ReturnType(
                                    Type(
                                     bool
                                    ) [Type]
                                  ) [ReturnType]
                                 isEmpty
                                ) [MethodHeader]
                                NoFormalParameters(
                                ) [NoFormalParameters]
                                NoLocalVarDeclarations(
                                ) [NoLocalVarDeclarations]
                                MethodStatementListStart(
                                ) [MethodStatementListStart]
                                MultipleStatements(
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    IfOptElseStatement(
                                      IfStatementHeader(
                                        IfStatementHeaderStart(
                                        ) [IfStatementHeaderStart]
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    MethodCallFactor(
                                                      MethodCall(
                                                        MethodCallHeader(
                                                          IdentifierDesignator(
                                                           length
                                                          ) [IdentifierDesignator]
                                                        ) [MethodCallHeader]
                                                        NoActualParameters(
                                                        ) [NoActualParameters]
                                                      ) [MethodCall]
                                                    ) [MethodCallFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              EqOperator(
                                              ) [EqOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       0
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [IfStatementHeader]
                                      ReturnStatement(
                                        ReturnValue(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  BoolConstantFactor(
                                                   true
                                                  ) [BoolConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ReturnValue]
                                      ) [ReturnStatement]
                                      NoElseStatment(
                                      ) [NoElseStatment]
                                    ) [IfOptElseStatement]
                                  ) [MultipleStatements]
                                  ReturnStatement(
                                    ReturnValue(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              BoolConstantFactor(
                                               false
                                              ) [BoolConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ReturnValue]
                                  ) [ReturnStatement]
                                ) [MultipleStatements]
                              ) [MethodDeclaration]
                            ) [ClassMethodDeclaration]
                          ) [MultipleClassMethodDeclarations]
                          ClassMethodDeclaration(
                            PublicAccessModifier(
                            ) [PublicAccessModifier]
                            MethodDeclaration(
                              MethodHeader(
                                ReturnType(
                                  Type(
                                   String
                                  ) [Type]
                                ) [ReturnType]
                               concat
                              ) [MethodHeader]
                              FormalParameters(
                                SingleFormalParameter(
                                  FormalParameter(
                                    Type(
                                     String
                                    ) [Type]
                                   s
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [FormalParameter]
                                ) [SingleFormalParameter]
                              ) [FormalParameters]
                              MultipleLocalVarDeclarations(
                                MultipleLocalVarDeclarations(
                                  NoLocalVarDeclarations(
                                  ) [NoLocalVarDeclarations]
                                  LocalVarDeclaration(
                                    Type(
                                     String
                                    ) [Type]
                                    SingleLocalVariable(
                                      LocalVariable(
                                       result
                                        NoArrayBrackets(
                                        ) [NoArrayBrackets]
                                      ) [LocalVariable]
                                    ) [SingleLocalVariable]
                                  ) [LocalVarDeclaration]
                                ) [MultipleLocalVarDeclarations]
                                LocalVarDeclaration(
                                  Type(
                                   int
                                  ) [Type]
                                  MultipleLocalVariables(
                                    SingleLocalVariable(
                                      LocalVariable(
                                       i
                                        NoArrayBrackets(
                                        ) [NoArrayBrackets]
                                      ) [LocalVariable]
                                    ) [SingleLocalVariable]
                                    LocalVariable(
                                     offset
                                      NoArrayBrackets(
                                      ) [NoArrayBrackets]
                                    ) [LocalVariable]
                                  ) [MultipleLocalVariables]
                                ) [LocalVarDeclaration]
                              ) [MultipleLocalVarDeclarations]
                              MethodStatementListStart(
                              ) [MethodStatementListStart]
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              NoStatements(
                                              ) [NoStatements]
                                              IfOptElseStatement(
                                                IfStatementHeader(
                                                  IfStatementHeaderStart(
                                                  ) [IfStatementHeaderStart]
                                                  MultipleTermsCondition(
                                                    SingleTermCondition(
                                                      SingleFactConditionTerm(
                                                        ComplexConditionFact(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   s
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          EqOperator(
                                                          ) [EqOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   null
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ComplexConditionFact]
                                                      ) [SingleFactConditionTerm]
                                                    ) [SingleTermCondition]
                                                    SingleFactConditionTerm(
                                                      SimpleConditionFact(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              MethodCallFactor(
                                                                MethodCall(
                                                                  MethodCallHeader(
                                                                    MemberAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       s
                                                                      ) [IdentifierDesignator]
                                                                     isEmpty
                                                                    ) [MemberAccessDesignator]
                                                                  ) [MethodCallHeader]
                                                                  NoActualParameters(
                                                                  ) [NoActualParameters]
                                                                ) [MethodCall]
                                                              ) [MethodCallFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [SimpleConditionFact]
                                                    ) [SingleFactConditionTerm]
                                                  ) [MultipleTermsCondition]
                                                ) [IfStatementHeader]
                                                ReturnStatement(
                                                  ReturnValue(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             this
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ReturnValue]
                                                ) [ReturnStatement]
                                                NoElseStatment(
                                                ) [NoElseStatment]
                                              ) [IfOptElseStatement]
                                            ) [MultipleStatements]
                                            IfOptElseStatement(
                                              IfStatementHeader(
                                                IfStatementHeaderStart(
                                                ) [IfStatementHeaderStart]
                                                SingleTermCondition(
                                                  SingleFactConditionTerm(
                                                    SimpleConditionFact(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            MethodCallFactor(
                                                              MethodCall(
                                                                MethodCallHeader(
                                                                  IdentifierDesignator(
                                                                   isEmpty
                                                                  ) [IdentifierDesignator]
                                                                ) [MethodCallHeader]
                                                                NoActualParameters(
                                                                ) [NoActualParameters]
                                                              ) [MethodCall]
                                                            ) [MethodCallFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [SimpleConditionFact]
                                                  ) [SingleFactConditionTerm]
                                                ) [SingleTermCondition]
                                              ) [IfStatementHeader]
                                              ReturnStatement(
                                                ReturnValue(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ReturnValue]
                                              ) [ReturnStatement]
                                              NoElseStatment(
                                              ) [NoElseStatment]
                                            ) [IfOptElseStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                IdentifierDesignator(
                                                 result
                                                ) [IdentifierDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      AllocatorFactor(
                                                        Type(
                                                         String
                                                        ) [Type]
                                                        NoArrayIndexer(
                                                        ) [NoArrayIndexer]
                                                      ) [AllocatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 result
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    AllocatorFactor(
                                                      Type(
                                                       char
                                                      ) [Type]
                                                      SingleArrayIndexer(
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            MultipleTermsExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  MethodCallFactor(
                                                                    MethodCall(
                                                                      MethodCallHeader(
                                                                        IdentifierDesignator(
                                                                         length
                                                                        ) [IdentifierDesignator]
                                                                      ) [MethodCallHeader]
                                                                      NoActualParameters(
                                                                      ) [NoActualParameters]
                                                                    ) [MethodCall]
                                                                  ) [MethodCallFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                              AddOperator(
                                                              ) [AddOperator]
                                                              SingleFactorTerm(
                                                                MethodCallFactor(
                                                                  MethodCall(
                                                                    MethodCallHeader(
                                                                      MemberAccessDesignator(
                                                                        IdentifierDesignator(
                                                                         s
                                                                        ) [IdentifierDesignator]
                                                                       length
                                                                      ) [MemberAccessDesignator]
                                                                    ) [MethodCallHeader]
                                                                    NoActualParameters(
                                                                    ) [NoActualParameters]
                                                                  ) [MethodCall]
                                                                ) [MethodCallFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [MultipleTermsExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [SingleArrayIndexer]
                                                    ) [AllocatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             offset
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  MethodCallFactor(
                                                    MethodCall(
                                                      MethodCallHeader(
                                                        IdentifierDesignator(
                                                         length
                                                        ) [IdentifierDesignator]
                                                      ) [MethodCallHeader]
                                                      NoActualParameters(
                                                      ) [NoActualParameters]
                                                    ) [MethodCall]
                                                  ) [MethodCallFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    ForStatement(
                                      ForStatementHeader(
                                        ForStatementHeaderStart(
                                        ) [ForStatementHeaderStart]
                                        SingleDesignatorStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              IdentifierDesignator(
                                               i
                                              ) [IdentifierDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       0
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [SingleDesignatorStatement]
                                        SingleCondition(
                                          SingleTermCondition(
                                            SingleFactConditionTerm(
                                              ComplexConditionFact(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         i
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                LssOperator(
                                                ) [LssOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         offset
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ComplexConditionFact]
                                            ) [SingleFactConditionTerm]
                                          ) [SingleTermCondition]
                                        ) [SingleCondition]
                                        SingleDesignatorStatement(
                                          IncrementDesignatorStatement(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [IncrementDesignatorStatement]
                                        ) [SingleDesignatorStatement]
                                      ) [ForStatementHeader]
                                      StatementBlock(
                                        MultipleStatements(
                                          NoStatements(
                                          ) [NoStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     result
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             i
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        ElementAccessDesignator(
                                                          IdentifierDesignator(
                                                           arr
                                                          ) [IdentifierDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                      ) [StatementBlock]
                                    ) [ForStatement]
                                  ) [MultipleStatements]
                                  ForStatement(
                                    ForStatementHeader(
                                      ForStatementHeaderStart(
                                      ) [ForStatementHeaderStart]
                                      SingleDesignatorStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     0
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [SingleDesignatorStatement]
                                      SingleCondition(
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              LssOperator(
                                              ) [LssOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    MethodCallFactor(
                                                      MethodCall(
                                                        MethodCallHeader(
                                                          MemberAccessDesignator(
                                                            IdentifierDesignator(
                                                             s
                                                            ) [IdentifierDesignator]
                                                           length
                                                          ) [MemberAccessDesignator]
                                                        ) [MethodCallHeader]
                                                        NoActualParameters(
                                                        ) [NoActualParameters]
                                                      ) [MethodCall]
                                                    ) [MethodCallFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [SingleCondition]
                                      SingleDesignatorStatement(
                                        IncrementDesignatorStatement(
                                          IdentifierDesignator(
                                           i
                                          ) [IdentifierDesignator]
                                        ) [IncrementDesignatorStatement]
                                      ) [SingleDesignatorStatement]
                                    ) [ForStatementHeader]
                                    StatementBlock(
                                      MultipleStatements(
                                        NoStatements(
                                        ) [NoStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   result
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    MultipleTermsExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             offset
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                      AddOperator(
                                                      ) [AddOperator]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           i
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [MultipleTermsExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      ElementAccessDesignator(
                                                        MemberAccessDesignator(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                         arr
                                                        ) [MemberAccessDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   i
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                    ) [StatementBlock]
                                  ) [ForStatement]
                                ) [MultipleStatements]
                                ReturnStatement(
                                  ReturnValue(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             result
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ReturnValue]
                                ) [ReturnStatement]
                              ) [MultipleStatements]
                            ) [MethodDeclaration]
                          ) [ClassMethodDeclaration]
                        ) [MultipleClassMethodDeclarations]
                        ClassMethodDeclaration(
                          PublicAccessModifier(
                          ) [PublicAccessModifier]
                          MethodDeclaration(
                            MethodHeader(
                              ReturnType(
                                Type(
                                 bool
                                ) [Type]
                              ) [ReturnType]
                             equals
                            ) [MethodHeader]
                            FormalParameters(
                              SingleFormalParameter(
                                FormalParameter(
                                  Type(
                                   String
                                  ) [Type]
                                 s
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [FormalParameter]
                              ) [SingleFormalParameter]
                            ) [FormalParameters]
                            MultipleLocalVarDeclarations(
                              NoLocalVarDeclarations(
                              ) [NoLocalVarDeclarations]
                              LocalVarDeclaration(
                                Type(
                                 int
                                ) [Type]
                                MultipleLocalVariables(
                                  SingleLocalVariable(
                                    LocalVariable(
                                     i
                                      NoArrayBrackets(
                                      ) [NoArrayBrackets]
                                    ) [LocalVariable]
                                  ) [SingleLocalVariable]
                                  LocalVariable(
                                   l
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [LocalVariable]
                                ) [MultipleLocalVariables]
                              ) [LocalVarDeclaration]
                            ) [MultipleLocalVarDeclarations]
                            MethodStatementListStart(
                            ) [MethodStatementListStart]
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        NoStatements(
                                        ) [NoStatements]
                                        IfOptElseStatement(
                                          IfStatementHeader(
                                            IfStatementHeaderStart(
                                            ) [IfStatementHeaderStart]
                                            SingleTermCondition(
                                              SingleFactConditionTerm(
                                                ComplexConditionFact(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           this
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  EqOperator(
                                                  ) [EqOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ComplexConditionFact]
                                              ) [SingleFactConditionTerm]
                                            ) [SingleTermCondition]
                                          ) [IfStatementHeader]
                                          ReturnStatement(
                                            ReturnValue(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      BoolConstantFactor(
                                                       true
                                                      ) [BoolConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ReturnValue]
                                          ) [ReturnStatement]
                                          NoElseStatment(
                                          ) [NoElseStatment]
                                        ) [IfOptElseStatement]
                                      ) [MultipleStatements]
                                      IfOptElseStatement(
                                        IfStatementHeader(
                                          IfStatementHeaderStart(
                                          ) [IfStatementHeaderStart]
                                          MultipleTermsCondition(
                                            SingleTermCondition(
                                              SingleFactConditionTerm(
                                                ComplexConditionFact(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           this
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  EqOperator(
                                                  ) [EqOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           null
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ComplexConditionFact]
                                              ) [SingleFactConditionTerm]
                                            ) [SingleTermCondition]
                                            SingleFactConditionTerm(
                                              ComplexConditionFact(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         s
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                EqOperator(
                                                ) [EqOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         null
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ComplexConditionFact]
                                            ) [SingleFactConditionTerm]
                                          ) [MultipleTermsCondition]
                                        ) [IfStatementHeader]
                                        ReturnStatement(
                                          ReturnValue(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    BoolConstantFactor(
                                                     false
                                                    ) [BoolConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ReturnValue]
                                        ) [ReturnStatement]
                                        NoElseStatment(
                                        ) [NoElseStatment]
                                      ) [IfOptElseStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           l
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                MethodCallFactor(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      IdentifierDesignator(
                                                       length
                                                      ) [IdentifierDesignator]
                                                    ) [MethodCallHeader]
                                                    NoActualParameters(
                                                    ) [NoActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  IfOptElseStatement(
                                    IfStatementHeader(
                                      IfStatementHeaderStart(
                                      ) [IfStatementHeaderStart]
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     l
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            NeqOperator(
                                            ) [NeqOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  MethodCallFactor(
                                                    MethodCall(
                                                      MethodCallHeader(
                                                        MemberAccessDesignator(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                         length
                                                        ) [MemberAccessDesignator]
                                                      ) [MethodCallHeader]
                                                      NoActualParameters(
                                                      ) [NoActualParameters]
                                                    ) [MethodCall]
                                                  ) [MethodCallFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                    ) [IfStatementHeader]
                                    ReturnStatement(
                                      ReturnValue(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                BoolConstantFactor(
                                                 false
                                                ) [BoolConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ReturnValue]
                                    ) [ReturnStatement]
                                    NoElseStatment(
                                    ) [NoElseStatment]
                                  ) [IfOptElseStatement]
                                ) [MultipleStatements]
                                ForStatement(
                                  ForStatementHeader(
                                    ForStatementHeaderStart(
                                    ) [ForStatementHeaderStart]
                                    SingleDesignatorStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           i
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   0
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [SingleDesignatorStatement]
                                    SingleCondition(
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     i
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            LssOperator(
                                            ) [LssOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     l
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                    ) [SingleCondition]
                                    SingleDesignatorStatement(
                                      IncrementDesignatorStatement(
                                        IdentifierDesignator(
                                         i
                                        ) [IdentifierDesignator]
                                      ) [IncrementDesignatorStatement]
                                    ) [SingleDesignatorStatement]
                                  ) [ForStatementHeader]
                                  StatementBlock(
                                    MultipleStatements(
                                      NoStatements(
                                      ) [NoStatements]
                                      IfOptElseStatement(
                                        IfStatementHeader(
                                          IfStatementHeaderStart(
                                          ) [IfStatementHeaderStart]
                                          SingleTermCondition(
                                            SingleFactConditionTerm(
                                              ComplexConditionFact(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        ElementAccessDesignator(
                                                          IdentifierDesignator(
                                                           arr
                                                          ) [IdentifierDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                NeqOperator(
                                                ) [NeqOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        ElementAccessDesignator(
                                                          MemberAccessDesignator(
                                                            IdentifierDesignator(
                                                             s
                                                            ) [IdentifierDesignator]
                                                           arr
                                                          ) [MemberAccessDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ComplexConditionFact]
                                            ) [SingleFactConditionTerm]
                                          ) [SingleTermCondition]
                                        ) [IfStatementHeader]
                                        ReturnStatement(
                                          ReturnValue(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    BoolConstantFactor(
                                                     false
                                                    ) [BoolConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ReturnValue]
                                        ) [ReturnStatement]
                                        NoElseStatment(
                                        ) [NoElseStatment]
                                      ) [IfOptElseStatement]
                                    ) [MultipleStatements]
                                  ) [StatementBlock]
                                ) [ForStatement]
                              ) [MultipleStatements]
                              ReturnStatement(
                                ReturnValue(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          BoolConstantFactor(
                                           true
                                          ) [BoolConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ReturnValue]
                              ) [ReturnStatement]
                            ) [MultipleStatements]
                          ) [MethodDeclaration]
                        ) [ClassMethodDeclaration]
                      ) [MultipleClassMethodDeclarations]
                    ) [ClassMethodDeclarations]
                  ) [ClassDeclaration]
                ) [ClassProgramDeclaration]
              ) [MultipleProgramDeclarations]
              VarProgramDeclaration(
                VarDeclaration(
                  Type(
                   String
                  ) [Type]
                  MultipleVariables(
                    MultipleVariables(
                      MultipleVariables(
                        MultipleVariables(
                          SingleVariable(
                            Variable(
                             shopHeader
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [Variable]
                          ) [SingleVariable]
                          Variable(
                           ownerHeader
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [Variable]
                        ) [MultipleVariables]
                        Variable(
                         bakerHeader
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [Variable]
                      ) [MultipleVariables]
                      Variable(
                       butcherHeader
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [Variable]
                    ) [MultipleVariables]
                    Variable(
                     helperHeader
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [Variable]
                  ) [MultipleVariables]
                ) [VarDeclaration]
              ) [VarProgramDeclaration]
            ) [MultipleProgramDeclarations]
            AbstractClassProgramDeclaration(
              AbstractClassDeclaration(
                AbstractClassHeader(
                 AbsWorker
                  NoClassBaseType(
                  ) [NoClassBaseType]
                ) [AbstractClassHeader]
                MultipleClassVarDeclarations(
                  MultipleClassVarDeclarations(
                    NoClassVarDeclarations(
                    ) [NoClassVarDeclarations]
                    ClassVarDeclaration(
                      ProtectedAccessModifier(
                      ) [ProtectedAccessModifier]
                      Type(
                       String
                      ) [Type]
                      SingleClassVariable(
                        ClassVariable(
                         name
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [ClassVariable]
                      ) [SingleClassVariable]
                    ) [ClassVarDeclaration]
                  ) [MultipleClassVarDeclarations]
                  ClassVarDeclaration(
                    ProtectedAccessModifier(
                    ) [ProtectedAccessModifier]
                    Type(
                     int
                    ) [Type]
                    SingleClassVariable(
                      ClassVariable(
                       yearOfBirth
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [ClassVariable]
                    ) [SingleClassVariable]
                  ) [ClassVarDeclaration]
                ) [MultipleClassVarDeclarations]
                AbstractClassMethods(
                  MultipleAbstractClassMethods(
                    MultipleAbstractClassMethods(
                      MultipleAbstractClassMethods(
                        MultipleAbstractClassMethods(
                          SingleAbstractClassMethod(
                            AbstractClassMethodDeclaration(
                              PublicAccessModifier(
                              ) [PublicAccessModifier]
                              MethodDeclaration(
                                MethodHeader(
                                  ReturnType(
                                    Type(
                                     String
                                    ) [Type]
                                  ) [ReturnType]
                                 getName
                                ) [MethodHeader]
                                NoFormalParameters(
                                ) [NoFormalParameters]
                                NoLocalVarDeclarations(
                                ) [NoLocalVarDeclarations]
                                MethodStatementListStart(
                                ) [MethodStatementListStart]
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  ReturnStatement(
                                    ReturnValue(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               name
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ReturnValue]
                                  ) [ReturnStatement]
                                ) [MultipleStatements]
                              ) [MethodDeclaration]
                            ) [AbstractClassMethodDeclaration]
                          ) [SingleAbstractClassMethod]
                          AbstractClassMethodDeclaration(
                            PublicAccessModifier(
                            ) [PublicAccessModifier]
                            MethodDeclaration(
                              MethodHeader(
                                ReturnVoid(
                                ) [ReturnVoid]
                               setName
                              ) [MethodHeader]
                              FormalParameters(
                                SingleFormalParameter(
                                  FormalParameter(
                                    Type(
                                     String
                                    ) [Type]
                                   name
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [FormalParameter]
                                ) [SingleFormalParameter]
                              ) [FormalParameters]
                              NoLocalVarDeclarations(
                              ) [NoLocalVarDeclarations]
                              MethodStatementListStart(
                              ) [MethodStatementListStart]
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         this
                                        ) [IdentifierDesignator]
                                       name
                                      ) [MemberAccessDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               name
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                            ) [MethodDeclaration]
                          ) [AbstractClassMethodDeclaration]
                        ) [MultipleAbstractClassMethods]
                        AbstractClassMethodDeclaration(
                          PublicAccessModifier(
                          ) [PublicAccessModifier]
                          MethodDeclaration(
                            MethodHeader(
                              ReturnType(
                                Type(
                                 int
                                ) [Type]
                              ) [ReturnType]
                             getYearOfBirth
                            ) [MethodHeader]
                            NoFormalParameters(
                            ) [NoFormalParameters]
                            NoLocalVarDeclarations(
                            ) [NoLocalVarDeclarations]
                            MethodStatementListStart(
                            ) [MethodStatementListStart]
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              ReturnStatement(
                                ReturnValue(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           yearOfBirth
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ReturnValue]
                              ) [ReturnStatement]
                            ) [MultipleStatements]
                          ) [MethodDeclaration]
                        ) [AbstractClassMethodDeclaration]
                      ) [MultipleAbstractClassMethods]
                      AbstractClassMethodDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        MethodDeclaration(
                          MethodHeader(
                            ReturnVoid(
                            ) [ReturnVoid]
                           setYearOfBirth
                          ) [MethodHeader]
                          FormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               yearOfBirth
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                          ) [FormalParameters]
                          NoLocalVarDeclarations(
                          ) [NoLocalVarDeclarations]
                          MethodStatementListStart(
                          ) [MethodStatementListStart]
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     this
                                    ) [IdentifierDesignator]
                                   yearOfBirth
                                  ) [MemberAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           yearOfBirth
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                        ) [MethodDeclaration]
                      ) [AbstractClassMethodDeclaration]
                    ) [MultipleAbstractClassMethods]
                    AbstractClassAbstractMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      AbstractMethodDeclaration(
                        AbstractMethodHeader(
                          ReturnType(
                            Type(
                             String
                            ) [Type]
                          ) [ReturnType]
                         toString
                        ) [AbstractMethodHeader]
                        NoFormalParameters(
                        ) [NoFormalParameters]
                      ) [AbstractMethodDeclaration]
                    ) [AbstractClassAbstractMethodDeclaration]
                  ) [MultipleAbstractClassMethods]
                ) [AbstractClassMethods]
              ) [AbstractClassDeclaration]
            ) [AbstractClassProgramDeclaration]
          ) [MultipleProgramDeclarations]
          ClassProgramDeclaration(
            ClassDeclaration(
              ClassHeader(
               Worker
                ClassBaseType(
                  Type(
                   AbsWorker
                  ) [Type]
                ) [ClassBaseType]
              ) [ClassHeader]
              NoClassVarDeclarations(
              ) [NoClassVarDeclarations]
              ClassMethodDeclarations(
                SingleClassMethodDeclaration(
                  ClassMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnType(
                          Type(
                           String
                          ) [Type]
                        ) [ReturnType]
                       toString
                      ) [MethodHeader]
                      NoFormalParameters(
                      ) [NoFormalParameters]
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        NoStatements(
                        ) [NoStatements]
                        ReturnStatement(
                          ReturnValue(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     name
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ReturnValue]
                        ) [ReturnStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [SingleClassMethodDeclaration]
              ) [ClassMethodDeclarations]
            ) [ClassDeclaration]
          ) [ClassProgramDeclaration]
        ) [MultipleProgramDeclarations]
        ClassProgramDeclaration(
          ClassDeclaration(
            ClassHeader(
             ShopOwner
              ClassBaseType(
                Type(
                 AbsWorker
                ) [Type]
              ) [ClassBaseType]
            ) [ClassHeader]
            MultipleClassVarDeclarations(
              NoClassVarDeclarations(
              ) [NoClassVarDeclarations]
              ClassVarDeclaration(
                ProtectedAccessModifier(
                ) [ProtectedAccessModifier]
                Type(
                 String
                ) [Type]
                SingleClassVariable(
                  ClassVariable(
                   shopName
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [ClassVariable]
                ) [SingleClassVariable]
              ) [ClassVarDeclaration]
            ) [MultipleClassVarDeclarations]
            ClassMethodDeclarations(
              MultipleClassMethodDeclarations(
                MultipleClassMethodDeclarations(
                  MultipleClassMethodDeclarations(
                    SingleClassMethodDeclaration(
                      ClassMethodDeclaration(
                        PublicAccessModifier(
                        ) [PublicAccessModifier]
                        MethodDeclaration(
                          MethodHeader(
                            ReturnType(
                              Type(
                               String
                              ) [Type]
                            ) [ReturnType]
                           getShopName
                          ) [MethodHeader]
                          NoFormalParameters(
                          ) [NoFormalParameters]
                          NoLocalVarDeclarations(
                          ) [NoLocalVarDeclarations]
                          MethodStatementListStart(
                          ) [MethodStatementListStart]
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            ReturnStatement(
                              ReturnValue(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         shopName
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ReturnValue]
                            ) [ReturnStatement]
                          ) [MultipleStatements]
                        ) [MethodDeclaration]
                      ) [ClassMethodDeclaration]
                    ) [SingleClassMethodDeclaration]
                    ClassMethodDeclaration(
                      PublicAccessModifier(
                      ) [PublicAccessModifier]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnVoid(
                          ) [ReturnVoid]
                         setShopName
                        ) [MethodHeader]
                        FormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               String
                              ) [Type]
                             shopName
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                        ) [FormalParameters]
                        NoLocalVarDeclarations(
                        ) [NoLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            IfOptElseStatement(
                              IfStatementHeader(
                                IfStatementHeaderStart(
                                ) [IfStatementHeaderStart]
                                SingleTermCondition(
                                  SingleFactConditionTerm(
                                    ComplexConditionFact(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               shopHeader
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      EqOperator(
                                      ) [EqOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               null
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ComplexConditionFact]
                                  ) [SingleFactConditionTerm]
                                ) [SingleTermCondition]
                              ) [IfStatementHeader]
                              StatementBlock(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                NoStatements(
                                                ) [NoStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      IdentifierDesignator(
                                                       shopHeader
                                                      ) [IdentifierDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            AllocatorFactor(
                                                              Type(
                                                               String
                                                              ) [Type]
                                                              NoArrayIndexer(
                                                              ) [NoArrayIndexer]
                                                            ) [AllocatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       shopHeader
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          AllocatorFactor(
                                                            Type(
                                                             char
                                                            ) [Type]
                                                            SingleArrayIndexer(
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         6
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [SingleArrayIndexer]
                                                          ) [AllocatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  ElementAccessDesignator(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       shopHeader
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               0
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           S
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     shopHeader
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             1
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         h
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   shopHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           2
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       o
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 shopHeader
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         3
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                     p
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          ElementAccessDesignator(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               shopHeader
                                              ) [IdentifierDesignator]
                                             arr
                                            ) [MemberAccessDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       4
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  CharConstantFactor(
                                                   :
                                                  ) [CharConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        ElementAccessDesignator(
                                          MemberAccessDesignator(
                                            IdentifierDesignator(
                                             shopHeader
                                            ) [IdentifierDesignator]
                                           arr
                                          ) [MemberAccessDesignator]
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     5
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [ElementAccessDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                  
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                              ) [StatementBlock]
                              NoElseStatment(
                              ) [NoElseStatment]
                            ) [IfOptElseStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   this
                                  ) [IdentifierDesignator]
                                 shopName
                                ) [MemberAccessDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      MethodCallFactor(
                                        MethodCall(
                                          MethodCallHeader(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               shopHeader
                                              ) [IdentifierDesignator]
                                             concat
                                            ) [MemberAccessDesignator]
                                          ) [MethodCallHeader]
                                          ActualParameters(
                                            SingleActualParameter(
                                              ActualParameter(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         shopName
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ActualParameter]
                                            ) [SingleActualParameter]
                                          ) [ActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [ClassMethodDeclaration]
                  ) [MultipleClassMethodDeclarations]
                  ClassMethodDeclaration(
                    ProtectedAccessModifier(
                    ) [ProtectedAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnVoid(
                        ) [ReturnVoid]
                       initOwnerHeader
                      ) [MethodHeader]
                      NoFormalParameters(
                      ) [NoFormalParameters]
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  IdentifierDesignator(
                                                   ownerHeader
                                                  ) [IdentifierDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        AllocatorFactor(
                                                          Type(
                                                           String
                                                          ) [Type]
                                                          NoArrayIndexer(
                                                          ) [NoArrayIndexer]
                                                        ) [AllocatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   ownerHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      AllocatorFactor(
                                                        Type(
                                                         char
                                                        ) [Type]
                                                        SingleArrayIndexer(
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     9
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [SingleArrayIndexer]
                                                      ) [AllocatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   ownerHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           0
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       ;
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 ownerHeader
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         1
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                      
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          ElementAccessDesignator(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               ownerHeader
                                              ) [IdentifierDesignator]
                                             arr
                                            ) [MemberAccessDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       2
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  CharConstantFactor(
                                                   O
                                                  ) [CharConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        ElementAccessDesignator(
                                          MemberAccessDesignator(
                                            IdentifierDesignator(
                                             ownerHeader
                                            ) [IdentifierDesignator]
                                           arr
                                          ) [MemberAccessDesignator]
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     3
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [ElementAccessDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 w
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      ElementAccessDesignator(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           ownerHeader
                                          ) [IdentifierDesignator]
                                         arr
                                        ) [MemberAccessDesignator]
                                        ArrayIndexer(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   4
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ArrayIndexer]
                                      ) [ElementAccessDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               n
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    ElementAccessDesignator(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         ownerHeader
                                        ) [IdentifierDesignator]
                                       arr
                                      ) [MemberAccessDesignator]
                                      ArrayIndexer(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 5
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ArrayIndexer]
                                    ) [ElementAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             e
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  ElementAccessDesignator(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       ownerHeader
                                      ) [IdentifierDesignator]
                                     arr
                                    ) [MemberAccessDesignator]
                                    ArrayIndexer(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               6
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ArrayIndexer]
                                  ) [ElementAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                           r
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                ElementAccessDesignator(
                                  MemberAccessDesignator(
                                    IdentifierDesignator(
                                     ownerHeader
                                    ) [IdentifierDesignator]
                                   arr
                                  ) [MemberAccessDesignator]
                                  ArrayIndexer(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             7
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ArrayIndexer]
                                ) [ElementAccessDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        CharConstantFactor(
                                         :
                                        ) [CharConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              ElementAccessDesignator(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   ownerHeader
                                  ) [IdentifierDesignator]
                                 arr
                                ) [MemberAccessDesignator]
                                ArrayIndexer(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           8
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ArrayIndexer]
                              ) [ElementAccessDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                        
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [ClassMethodDeclaration]
                ) [MultipleClassMethodDeclarations]
                ClassMethodDeclaration(
                  PublicAccessModifier(
                  ) [PublicAccessModifier]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnType(
                        Type(
                         String
                        ) [Type]
                      ) [ReturnType]
                     toString
                    ) [MethodHeader]
                    NoFormalParameters(
                    ) [NoFormalParameters]
                    MultipleLocalVarDeclarations(
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      LocalVarDeclaration(
                        Type(
                         String
                        ) [Type]
                        SingleLocalVariable(
                          LocalVariable(
                           s
                            NoArrayBrackets(
                            ) [NoArrayBrackets]
                          ) [LocalVariable]
                        ) [SingleLocalVariable]
                      ) [LocalVarDeclaration]
                    ) [MultipleLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            IfOptElseStatement(
                              IfStatementHeader(
                                IfStatementHeaderStart(
                                ) [IfStatementHeaderStart]
                                SingleTermCondition(
                                  SingleFactConditionTerm(
                                    ComplexConditionFact(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               ownerHeader
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      EqOperator(
                                      ) [EqOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              IdentifierDesignator(
                                               null
                                              ) [IdentifierDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ComplexConditionFact]
                                  ) [SingleFactConditionTerm]
                                ) [SingleTermCondition]
                              ) [IfStatementHeader]
                              StatementBlock(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  DesignatorBasedStatement(
                                    MethodCallDesignatorStatement(
                                      MethodCall(
                                        MethodCallHeader(
                                          IdentifierDesignator(
                                           initOwnerHeader
                                          ) [IdentifierDesignator]
                                        ) [MethodCallHeader]
                                        NoActualParameters(
                                        ) [NoActualParameters]
                                      ) [MethodCall]
                                    ) [MethodCallDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                              ) [StatementBlock]
                              NoElseStatment(
                              ) [NoElseStatment]
                            ) [IfOptElseStatement]
                          ) [MultipleStatements]
                          IfOptElseStatement(
                            IfStatementHeader(
                              IfStatementHeaderStart(
                              ) [IfStatementHeaderStart]
                              SingleTermCondition(
                                SingleFactConditionTerm(
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             shopName
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    EqOperator(
                                    ) [EqOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             null
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [SingleFactConditionTerm]
                              ) [SingleTermCondition]
                            ) [IfStatementHeader]
                            ReturnStatement(
                              ReturnValue(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         name
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ReturnValue]
                            ) [ReturnStatement]
                            NoElseStatment(
                            ) [NoElseStatment]
                          ) [IfOptElseStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              IdentifierDesignator(
                               s
                              ) [IdentifierDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    MethodCallFactor(
                                      MethodCall(
                                        MethodCallHeader(
                                          MemberAccessDesignator(
                                            IdentifierDesignator(
                                             shopName
                                            ) [IdentifierDesignator]
                                           concat
                                          ) [MemberAccessDesignator]
                                        ) [MethodCallHeader]
                                        ActualParameters(
                                          SingleActualParameter(
                                            ActualParameter(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       ownerHeader
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ActualParameter]
                                          ) [SingleActualParameter]
                                        ) [ActualParameters]
                                      ) [MethodCall]
                                    ) [MethodCallFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                      ReturnStatement(
                        ReturnValue(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         s
                                        ) [IdentifierDesignator]
                                       concat
                                      ) [MemberAccessDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   name
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ReturnValue]
                      ) [ReturnStatement]
                    ) [MultipleStatements]
                  ) [MethodDeclaration]
                ) [ClassMethodDeclaration]
              ) [MultipleClassMethodDeclarations]
            ) [ClassMethodDeclarations]
          ) [ClassDeclaration]
        ) [ClassProgramDeclaration]
      ) [MultipleProgramDeclarations]
      ClassProgramDeclaration(
        ClassDeclaration(
          ClassHeader(
           Baker
            ClassBaseType(
              Type(
               ShopOwner
              ) [Type]
            ) [ClassBaseType]
          ) [ClassHeader]
          NoClassVarDeclarations(
          ) [NoClassVarDeclarations]
          ClassMethodDeclarations(
            SingleClassMethodDeclaration(
              ClassMethodDeclaration(
                PublicAccessModifier(
                ) [PublicAccessModifier]
                MethodDeclaration(
                  MethodHeader(
                    ReturnVoid(
                    ) [ReturnVoid]
                   setName
                  ) [MethodHeader]
                  FormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         String
                        ) [Type]
                       name
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                  ) [FormalParameters]
                  MultipleLocalVarDeclarations(
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    LocalVarDeclaration(
                      Type(
                       int
                      ) [Type]
                      SingleLocalVariable(
                        LocalVariable(
                         i
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [LocalVariable]
                      ) [SingleLocalVariable]
                    ) [LocalVarDeclaration]
                  ) [MultipleLocalVarDeclarations]
                  MethodStatementListStart(
                  ) [MethodStatementListStart]
                  MultipleStatements(
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          SingleTermCondition(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         bakerHeader
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                EqOperator(
                                ) [EqOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         null
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [SingleTermCondition]
                        ) [IfStatementHeader]
                        StatementBlock(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  IdentifierDesignator(
                                                   bakerHeader
                                                  ) [IdentifierDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        AllocatorFactor(
                                                          Type(
                                                           String
                                                          ) [Type]
                                                          NoArrayIndexer(
                                                          ) [NoArrayIndexer]
                                                        ) [AllocatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   bakerHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      AllocatorFactor(
                                                        Type(
                                                         char
                                                        ) [Type]
                                                        SingleArrayIndexer(
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     7
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [SingleArrayIndexer]
                                                      ) [AllocatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   bakerHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           0
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       B
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 bakerHeader
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         1
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                     a
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          ElementAccessDesignator(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               bakerHeader
                                              ) [IdentifierDesignator]
                                             arr
                                            ) [MemberAccessDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       2
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  CharConstantFactor(
                                                   k
                                                  ) [CharConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        ElementAccessDesignator(
                                          MemberAccessDesignator(
                                            IdentifierDesignator(
                                             bakerHeader
                                            ) [IdentifierDesignator]
                                           arr
                                          ) [MemberAccessDesignator]
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     3
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [ElementAccessDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 e
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      ElementAccessDesignator(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           bakerHeader
                                          ) [IdentifierDesignator]
                                         arr
                                        ) [MemberAccessDesignator]
                                        ArrayIndexer(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   4
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ArrayIndexer]
                                      ) [ElementAccessDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               r
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    ElementAccessDesignator(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         bakerHeader
                                        ) [IdentifierDesignator]
                                       arr
                                      ) [MemberAccessDesignator]
                                      ArrayIndexer(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 5
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ArrayIndexer]
                                    ) [ElementAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             :
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  ElementAccessDesignator(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       bakerHeader
                                      ) [IdentifierDesignator]
                                     arr
                                    ) [MemberAccessDesignator]
                                    ArrayIndexer(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               6
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ArrayIndexer]
                                  ) [ElementAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                            
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                        ) [StatementBlock]
                        NoElseStatment(
                        ) [NoElseStatment]
                      ) [IfOptElseStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          MemberAccessDesignator(
                            IdentifierDesignator(
                             this
                            ) [IdentifierDesignator]
                           name
                          ) [MemberAccessDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         bakerHeader
                                        ) [IdentifierDesignator]
                                       concat
                                      ) [MemberAccessDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   name
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                ) [MethodDeclaration]
              ) [ClassMethodDeclaration]
            ) [SingleClassMethodDeclaration]
          ) [ClassMethodDeclarations]
        ) [ClassDeclaration]
      ) [ClassProgramDeclaration]
    ) [MultipleProgramDeclarations]
    ClassProgramDeclaration(
      ClassDeclaration(
        ClassHeader(
         Butcher
          ClassBaseType(
            Type(
             ShopOwner
            ) [Type]
          ) [ClassBaseType]
        ) [ClassHeader]
        MultipleClassVarDeclarations(
          NoClassVarDeclarations(
          ) [NoClassVarDeclarations]
          ClassVarDeclaration(
            PublicAccessModifier(
            ) [PublicAccessModifier]
            Type(
             AbsWorker
            ) [Type]
            SingleClassVariable(
              ClassVariable(
               helper
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [ClassVariable]
            ) [SingleClassVariable]
          ) [ClassVarDeclaration]
        ) [MultipleClassVarDeclarations]
        ClassMethodDeclarations(
          MultipleClassMethodDeclarations(
            SingleClassMethodDeclaration(
              ClassMethodDeclaration(
                PublicAccessModifier(
                ) [PublicAccessModifier]
                MethodDeclaration(
                  MethodHeader(
                    ReturnVoid(
                    ) [ReturnVoid]
                   setName
                  ) [MethodHeader]
                  FormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         String
                        ) [Type]
                       name
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                  ) [FormalParameters]
                  MultipleLocalVarDeclarations(
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    LocalVarDeclaration(
                      Type(
                       int
                      ) [Type]
                      SingleLocalVariable(
                        LocalVariable(
                         i
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [LocalVariable]
                      ) [SingleLocalVariable]
                    ) [LocalVarDeclaration]
                  ) [MultipleLocalVarDeclarations]
                  MethodStatementListStart(
                  ) [MethodStatementListStart]
                  MultipleStatements(
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          SingleTermCondition(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         butcherHeader
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                EqOperator(
                                ) [EqOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         null
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [SingleTermCondition]
                        ) [IfStatementHeader]
                        StatementBlock(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                NoStatements(
                                                ) [NoStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      IdentifierDesignator(
                                                       butcherHeader
                                                      ) [IdentifierDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            AllocatorFactor(
                                                              Type(
                                                               String
                                                              ) [Type]
                                                              NoArrayIndexer(
                                                              ) [NoArrayIndexer]
                                                            ) [AllocatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       butcherHeader
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          AllocatorFactor(
                                                            Type(
                                                             char
                                                            ) [Type]
                                                            SingleArrayIndexer(
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         9
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [SingleArrayIndexer]
                                                          ) [AllocatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  ElementAccessDesignator(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       butcherHeader
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               0
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           B
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     butcherHeader
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             1
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         u
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   butcherHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           2
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       t
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 butcherHeader
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         3
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                     c
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          ElementAccessDesignator(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               butcherHeader
                                              ) [IdentifierDesignator]
                                             arr
                                            ) [MemberAccessDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      IntConstantFactor(
                                                       4
                                                      ) [IntConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  CharConstantFactor(
                                                   h
                                                  ) [CharConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        ElementAccessDesignator(
                                          MemberAccessDesignator(
                                            IdentifierDesignator(
                                             butcherHeader
                                            ) [IdentifierDesignator]
                                           arr
                                          ) [MemberAccessDesignator]
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     5
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [ElementAccessDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 e
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      ElementAccessDesignator(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           butcherHeader
                                          ) [IdentifierDesignator]
                                         arr
                                        ) [MemberAccessDesignator]
                                        ArrayIndexer(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   6
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ArrayIndexer]
                                      ) [ElementAccessDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               r
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    ElementAccessDesignator(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         butcherHeader
                                        ) [IdentifierDesignator]
                                       arr
                                      ) [MemberAccessDesignator]
                                      ArrayIndexer(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 7
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ArrayIndexer]
                                    ) [ElementAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             :
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  ElementAccessDesignator(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       butcherHeader
                                      ) [IdentifierDesignator]
                                     arr
                                    ) [MemberAccessDesignator]
                                    ArrayIndexer(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               8
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [ArrayIndexer]
                                  ) [ElementAccessDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                            
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                        ) [StatementBlock]
                        NoElseStatment(
                        ) [NoElseStatment]
                      ) [IfOptElseStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          MemberAccessDesignator(
                            IdentifierDesignator(
                             this
                            ) [IdentifierDesignator]
                           name
                          ) [MemberAccessDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         butcherHeader
                                        ) [IdentifierDesignator]
                                       concat
                                      ) [MemberAccessDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   name
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                ) [MethodDeclaration]
              ) [ClassMethodDeclaration]
            ) [SingleClassMethodDeclaration]
            ClassMethodDeclaration(
              PublicAccessModifier(
              ) [PublicAccessModifier]
              MethodDeclaration(
                MethodHeader(
                  ReturnType(
                    Type(
                     String
                    ) [Type]
                  ) [ReturnType]
                 toString
                ) [MethodHeader]
                NoFormalParameters(
                ) [NoFormalParameters]
                MultipleLocalVarDeclarations(
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  LocalVarDeclaration(
                    Type(
                     String
                    ) [Type]
                    SingleLocalVariable(
                      LocalVariable(
                       s
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [LocalVariable]
                    ) [SingleLocalVariable]
                  ) [LocalVarDeclaration]
                ) [MultipleLocalVarDeclarations]
                MethodStatementListStart(
                ) [MethodStatementListStart]
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  IfOptElseStatement(
                                    IfStatementHeader(
                                      IfStatementHeaderStart(
                                      ) [IfStatementHeaderStart]
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     ownerHeader
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            EqOperator(
                                            ) [EqOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     null
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                    ) [IfStatementHeader]
                                    StatementBlock(
                                      MultipleStatements(
                                        NoStatements(
                                        ) [NoStatements]
                                        DesignatorBasedStatement(
                                          MethodCallDesignatorStatement(
                                            MethodCall(
                                              MethodCallHeader(
                                                IdentifierDesignator(
                                                 initOwnerHeader
                                                ) [IdentifierDesignator]
                                              ) [MethodCallHeader]
                                              NoActualParameters(
                                              ) [NoActualParameters]
                                            ) [MethodCall]
                                          ) [MethodCallDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                    ) [StatementBlock]
                                    NoElseStatment(
                                    ) [NoElseStatment]
                                  ) [IfOptElseStatement]
                                ) [MultipleStatements]
                                IfOptElseStatement(
                                  IfStatementHeader(
                                    IfStatementHeaderStart(
                                    ) [IfStatementHeaderStart]
                                    SingleTermCondition(
                                      SingleFactConditionTerm(
                                        ComplexConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   helperHeader
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          EqOperator(
                                          ) [EqOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   null
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ComplexConditionFact]
                                      ) [SingleFactConditionTerm]
                                    ) [SingleTermCondition]
                                  ) [IfStatementHeader]
                                  StatementBlock(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            NoStatements(
                                                            ) [NoStatements]
                                                            DesignatorBasedStatement(
                                                              AssignmentDesignatorStatement(
                                                                AssignmentHeader(
                                                                  IdentifierDesignator(
                                                                   helperHeader
                                                                  ) [IdentifierDesignator]
                                                                ) [AssignmentHeader]
                                                                AssignmentFooter(
                                                                  AssignOperator(
                                                                  ) [AssignOperator]
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        AllocatorFactor(
                                                                          Type(
                                                                           String
                                                                          ) [Type]
                                                                          NoArrayIndexer(
                                                                          ) [NoArrayIndexer]
                                                                        ) [AllocatorFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [AssignmentFooter]
                                                              ) [AssignmentDesignatorStatement]
                                                            ) [DesignatorBasedStatement]
                                                          ) [MultipleStatements]
                                                          DesignatorBasedStatement(
                                                            AssignmentDesignatorStatement(
                                                              AssignmentHeader(
                                                                MemberAccessDesignator(
                                                                  IdentifierDesignator(
                                                                   helperHeader
                                                                  ) [IdentifierDesignator]
                                                                 arr
                                                                ) [MemberAccessDesignator]
                                                              ) [AssignmentHeader]
                                                              AssignmentFooter(
                                                                AssignOperator(
                                                                ) [AssignOperator]
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      AllocatorFactor(
                                                                        Type(
                                                                         char
                                                                        ) [Type]
                                                                        SingleArrayIndexer(
                                                                          ArrayIndexer(
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     10
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                          ) [ArrayIndexer]
                                                                        ) [SingleArrayIndexer]
                                                                      ) [AllocatorFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [AssignmentFooter]
                                                            ) [AssignmentDesignatorStatement]
                                                          ) [DesignatorBasedStatement]
                                                        ) [MultipleStatements]
                                                        DesignatorBasedStatement(
                                                          AssignmentDesignatorStatement(
                                                            AssignmentHeader(
                                                              ElementAccessDesignator(
                                                                MemberAccessDesignator(
                                                                  IdentifierDesignator(
                                                                   helperHeader
                                                                  ) [IdentifierDesignator]
                                                                 arr
                                                                ) [MemberAccessDesignator]
                                                                ArrayIndexer(
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          IntConstantFactor(
                                                                           0
                                                                          ) [IntConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [ArrayIndexer]
                                                              ) [ElementAccessDesignator]
                                                            ) [AssignmentHeader]
                                                            AssignmentFooter(
                                                              AssignOperator(
                                                              ) [AssignOperator]
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      CharConstantFactor(
                                                                       ;
                                                                      ) [CharConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [AssignmentFooter]
                                                          ) [AssignmentDesignatorStatement]
                                                        ) [DesignatorBasedStatement]
                                                      ) [MultipleStatements]
                                                      DesignatorBasedStatement(
                                                        AssignmentDesignatorStatement(
                                                          AssignmentHeader(
                                                            ElementAccessDesignator(
                                                              MemberAccessDesignator(
                                                                IdentifierDesignator(
                                                                 helperHeader
                                                                ) [IdentifierDesignator]
                                                               arr
                                                              ) [MemberAccessDesignator]
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         1
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [ElementAccessDesignator]
                                                          ) [AssignmentHeader]
                                                          AssignmentFooter(
                                                            AssignOperator(
                                                            ) [AssignOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    CharConstantFactor(
                                                                      
                                                                    ) [CharConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [AssignmentFooter]
                                                        ) [AssignmentDesignatorStatement]
                                                      ) [DesignatorBasedStatement]
                                                    ) [MultipleStatements]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          ElementAccessDesignator(
                                                            MemberAccessDesignator(
                                                              IdentifierDesignator(
                                                               helperHeader
                                                              ) [IdentifierDesignator]
                                                             arr
                                                            ) [MemberAccessDesignator]
                                                            ArrayIndexer(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      IntConstantFactor(
                                                                       2
                                                                      ) [IntConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ArrayIndexer]
                                                          ) [ElementAccessDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  CharConstantFactor(
                                                                   H
                                                                  ) [CharConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [MultipleStatements]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        ElementAccessDesignator(
                                                          MemberAccessDesignator(
                                                            IdentifierDesignator(
                                                             helperHeader
                                                            ) [IdentifierDesignator]
                                                           arr
                                                          ) [MemberAccessDesignator]
                                                          ArrayIndexer(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    IntConstantFactor(
                                                                     3
                                                                    ) [IntConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ArrayIndexer]
                                                        ) [ElementAccessDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                CharConstantFactor(
                                                                 e
                                                                ) [CharConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      ElementAccessDesignator(
                                                        MemberAccessDesignator(
                                                          IdentifierDesignator(
                                                           helperHeader
                                                          ) [IdentifierDesignator]
                                                         arr
                                                        ) [MemberAccessDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   4
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              CharConstantFactor(
                                                               l
                                                              ) [CharConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    ElementAccessDesignator(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         helperHeader
                                                        ) [IdentifierDesignator]
                                                       arr
                                                      ) [MemberAccessDesignator]
                                                      ArrayIndexer(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 5
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ArrayIndexer]
                                                    ) [ElementAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            CharConstantFactor(
                                                             p
                                                            ) [CharConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  ElementAccessDesignator(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       helperHeader
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               6
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           e
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     helperHeader
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             7
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         r
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   helperHeader
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           8
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       :
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 helperHeader
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         9
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                      
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                  ) [StatementBlock]
                                  NoElseStatment(
                                  ) [NoElseStatment]
                                ) [IfOptElseStatement]
                              ) [MultipleStatements]
                              IfOptElseStatement(
                                IfStatementHeader(
                                  IfStatementHeaderStart(
                                  ) [IfStatementHeaderStart]
                                  SingleTermCondition(
                                    SingleFactConditionTerm(
                                      ComplexConditionFact(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 shopName
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        EqOperator(
                                        ) [EqOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 null
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ComplexConditionFact]
                                    ) [SingleFactConditionTerm]
                                  ) [SingleTermCondition]
                                ) [IfStatementHeader]
                                ReturnStatement(
                                  ReturnValue(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             name
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ReturnValue]
                                ) [ReturnStatement]
                                NoElseStatment(
                                ) [NoElseStatment]
                              ) [IfOptElseStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   s
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        MethodCallFactor(
                                          MethodCall(
                                            MethodCallHeader(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 shopName
                                                ) [IdentifierDesignator]
                                               concat
                                              ) [MemberAccessDesignator]
                                            ) [MethodCallHeader]
                                            ActualParameters(
                                              SingleActualParameter(
                                                ActualParameter(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           ownerHeader
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ActualParameter]
                                              ) [SingleActualParameter]
                                            ) [ActualParameters]
                                          ) [MethodCall]
                                        ) [MethodCallFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                IdentifierDesignator(
                                 s
                                ) [IdentifierDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      MethodCallFactor(
                                        MethodCall(
                                          MethodCallHeader(
                                            MemberAccessDesignator(
                                              IdentifierDesignator(
                                               s
                                              ) [IdentifierDesignator]
                                             concat
                                            ) [MemberAccessDesignator]
                                          ) [MethodCallHeader]
                                          ActualParameters(
                                            SingleActualParameter(
                                              ActualParameter(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         name
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ActualParameter]
                                            ) [SingleActualParameter]
                                          ) [ActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        IfOptElseStatement(
                          IfStatementHeader(
                            IfStatementHeaderStart(
                            ) [IfStatementHeaderStart]
                            SingleTermCondition(
                              SingleFactConditionTerm(
                                ComplexConditionFact(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           helper
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  EqOperator(
                                  ) [EqOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          IdentifierDesignator(
                                           null
                                          ) [IdentifierDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ComplexConditionFact]
                              ) [SingleFactConditionTerm]
                            ) [SingleTermCondition]
                          ) [IfStatementHeader]
                          ReturnStatement(
                            ReturnValue(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       s
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ReturnValue]
                          ) [ReturnStatement]
                          NoElseStatment(
                          ) [NoElseStatment]
                        ) [IfOptElseStatement]
                      ) [MultipleStatements]
                      DesignatorBasedStatement(
                        AssignmentDesignatorStatement(
                          AssignmentHeader(
                            IdentifierDesignator(
                             s
                            ) [IdentifierDesignator]
                          ) [AssignmentHeader]
                          AssignmentFooter(
                            AssignOperator(
                            ) [AssignOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  MethodCallFactor(
                                    MethodCall(
                                      MethodCallHeader(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           s
                                          ) [IdentifierDesignator]
                                         concat
                                        ) [MemberAccessDesignator]
                                      ) [MethodCallHeader]
                                      ActualParameters(
                                        SingleActualParameter(
                                          ActualParameter(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     helperHeader
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ActualParameter]
                                        ) [SingleActualParameter]
                                      ) [ActualParameters]
                                    ) [MethodCall]
                                  ) [MethodCallFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [AssignmentFooter]
                        ) [AssignmentDesignatorStatement]
                      ) [DesignatorBasedStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          IdentifierDesignator(
                           s
                          ) [IdentifierDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         s
                                        ) [IdentifierDesignator]
                                       concat
                                      ) [MemberAccessDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                MethodCallFactor(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         helper
                                                        ) [IdentifierDesignator]
                                                       toString
                                                      ) [MemberAccessDesignator]
                                                    ) [MethodCallHeader]
                                                    NoActualParameters(
                                                    ) [NoActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                  ReturnStatement(
                    ReturnValue(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               s
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [ReturnValue]
                  ) [ReturnStatement]
                ) [MultipleStatements]
              ) [MethodDeclaration]
            ) [ClassMethodDeclaration]
          ) [MultipleClassMethodDeclarations]
        ) [ClassMethodDeclarations]
      ) [ClassDeclaration]
    ) [ClassProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      MultipleMethodDeclarations(
        NoMethodDeclarations(
        ) [NoMethodDeclarations]
        MethodDeclaration(
          MethodHeader(
            ReturnVoid(
            ) [ReturnVoid]
           printString
          ) [MethodHeader]
          FormalParameters(
            SingleFormalParameter(
              FormalParameter(
                Type(
                 String
                ) [Type]
               s
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [FormalParameter]
            ) [SingleFormalParameter]
          ) [FormalParameters]
          MultipleLocalVarDeclarations(
            NoLocalVarDeclarations(
            ) [NoLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               char
              ) [Type]
              SingleLocalVariable(
                LocalVariable(
                 c
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          MethodStatementListStart(
          ) [MethodStatementListStart]
          MultipleStatements(
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              IfOptElseStatement(
                IfStatementHeader(
                  IfStatementHeaderStart(
                  ) [IfStatementHeaderStart]
                  MultipleTermsCondition(
                    SingleTermCondition(
                      SingleFactConditionTerm(
                        ComplexConditionFact(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   s
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          EqOperator(
                          ) [EqOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   null
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ComplexConditionFact]
                      ) [SingleFactConditionTerm]
                    ) [SingleTermCondition]
                    SingleFactConditionTerm(
                      SimpleConditionFact(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              MethodCallFactor(
                                MethodCall(
                                  MethodCallHeader(
                                    MemberAccessDesignator(
                                      IdentifierDesignator(
                                       s
                                      ) [IdentifierDesignator]
                                     isEmpty
                                    ) [MemberAccessDesignator]
                                  ) [MethodCallHeader]
                                  NoActualParameters(
                                  ) [NoActualParameters]
                                ) [MethodCall]
                              ) [MethodCallFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [SimpleConditionFact]
                    ) [SingleFactConditionTerm]
                  ) [MultipleTermsCondition]
                ) [IfStatementHeader]
                ReturnStatement(
                  NoReturnValue(
                  ) [NoReturnValue]
                ) [ReturnStatement]
                NoElseStatment(
                ) [NoElseStatment]
              ) [IfOptElseStatement]
            ) [MultipleStatements]
            ForEachStatement(
              ForEachStatementHeader(
                ForEachStatementHeaderStart(
                ) [ForEachStatementHeaderStart]
               c
                MemberAccessDesignator(
                  IdentifierDesignator(
                   s
                  ) [IdentifierDesignator]
                 arr
                ) [MemberAccessDesignator]
              ) [ForEachStatementHeader]
              StatementBlock(
                MultipleStatements(
                  NoStatements(
                  ) [NoStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             c
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
              ) [StatementBlock]
            ) [ForEachStatement]
          ) [MultipleStatements]
        ) [MethodDeclaration]
      ) [MultipleMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnVoid(
          ) [ReturnVoid]
         printlnString
        ) [MethodHeader]
        FormalParameters(
          SingleFormalParameter(
            FormalParameter(
              Type(
               String
              ) [Type]
             s
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [FormalParameter]
          ) [SingleFormalParameter]
        ) [FormalParameters]
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          MultipleStatements(
            NoStatements(
            ) [NoStatements]
            DesignatorBasedStatement(
              MethodCallDesignatorStatement(
                MethodCall(
                  MethodCallHeader(
                    IdentifierDesignator(
                     printString
                    ) [IdentifierDesignator]
                  ) [MethodCallHeader]
                  ActualParameters(
                    SingleActualParameter(
                      ActualParameter(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              DesignatorFactor(
                                IdentifierDesignator(
                                 s
                                ) [IdentifierDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [ActualParameter]
                    ) [SingleActualParameter]
                  ) [ActualParameters]
                ) [MethodCall]
              ) [MethodCallDesignatorStatement]
            ) [DesignatorBasedStatement]
          ) [MultipleStatements]
          PrintStatement(
            LeftExpression(
              SingleTermExpression(
                NoSign(
                ) [NoSign]
                SingleFactorTerm(
                  DesignatorFactor(
                    IdentifierDesignator(
                     eol
                    ) [IdentifierDesignator]
                  ) [DesignatorFactor]
                ) [SingleFactorTerm]
              ) [SingleTermExpression]
            ) [LeftExpression]
            NoPrintWidth(
            ) [NoPrintWidth]
          ) [PrintStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        MultipleLocalVarDeclarations(
          MultipleLocalVarDeclarations(
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   String
                  ) [Type]
                  MultipleLocalVariables(
                    SingleLocalVariable(
                      LocalVariable(
                       s
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [LocalVariable]
                    ) [SingleLocalVariable]
                    LocalVariable(
                     s2
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [MultipleLocalVariables]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 int
                ) [Type]
                SingleLocalVariable(
                  LocalVariable(
                   sw
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               AbsWorker
              ) [Type]
              MultipleLocalVariables(
                SingleLocalVariable(
                  LocalVariable(
                   workers
                    ArrayBrackets(
                    ) [ArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
                LocalVariable(
                 worker
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [MultipleLocalVariables]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             Baker
            ) [Type]
            SingleLocalVariable(
              LocalVariable(
               baker
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [SingleLocalVariable]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           Butcher
          ) [Type]
          SingleLocalVariable(
            LocalVariable(
             butcher
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [LocalVariable]
          ) [SingleLocalVariable]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            MultipleStatements(
                                                              MultipleStatements(
                                                                MultipleStatements(
                                                                  MultipleStatements(
                                                                    MultipleStatements(
                                                                      MultipleStatements(
                                                                        MultipleStatements(
                                                                          MultipleStatements(
                                                                            MultipleStatements(
                                                                              MultipleStatements(
                                                                                MultipleStatements(
                                                                                  MultipleStatements(
                                                                                    MultipleStatements(
                                                                                      MultipleStatements(
                                                                                        MultipleStatements(
                                                                                          MultipleStatements(
                                                                                            MultipleStatements(
                                                                                              MultipleStatements(
                                                                                                MultipleStatements(
                                                                                                  MultipleStatements(
                                                                                                    MultipleStatements(
                                                                                                      MultipleStatements(
                                                                                                        MultipleStatements(
                                                                                                          MultipleStatements(
                                                                                                            MultipleStatements(
                                                                                                              MultipleStatements(
                                                                                                                MultipleStatements(
                                                                                                                  MultipleStatements(
                                                                                                                    MultipleStatements(
                                                                                                                      MultipleStatements(
                                                                                                                        MultipleStatements(
                                                                                                                          MultipleStatements(
                                                                                                                            MultipleStatements(
                                                                                                                              MultipleStatements(
                                                                                                                                MultipleStatements(
                                                                                                                                  MultipleStatements(
                                                                                                                                    MultipleStatements(
                                                                                                                                      MultipleStatements(
                                                                                                                                        MultipleStatements(
                                                                                                                                          MultipleStatements(
                                                                                                                                            MultipleStatements(
                                                                                                                                              MultipleStatements(
                                                                                                                                                MultipleStatements(
                                                                                                                                                  MultipleStatements(
                                                                                                                                                    MultipleStatements(
                                                                                                                                                      MultipleStatements(
                                                                                                                                                        MultipleStatements(
                                                                                                                                                          MultipleStatements(
                                                                                                                                                            MultipleStatements(
                                                                                                                                                              MultipleStatements(
                                                                                                                                                                MultipleStatements(
                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                        MultipleStatements(
                                                                                                                                                                          MultipleStatements(
                                                                                                                                                                            MultipleStatements(
                                                                                                                                                                              MultipleStatements(
                                                                                                                                                                                MultipleStatements(
                                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                                        MultipleStatements(
                                                                                                                                                                                          MultipleStatements(
                                                                                                                                                                                            MultipleStatements(
                                                                                                                                                                                              MultipleStatements(
                                                                                                                                                                                                MultipleStatements(
                                                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                                                        MultipleStatements(
                                                                                                                                                                                                          MultipleStatements(
                                                                                                                                                                                                            MultipleStatements(
                                                                                                                                                                                                              MultipleStatements(
                                                                                                                                                                                                                MultipleStatements(
                                                                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                                                                      NoStatements(
                                                                                                                                                                                                                      ) [NoStatements]
                                                                                                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                                                                                                        AssignmentDesignatorStatement(
                                                                                                                                                                                                                          AssignmentHeader(
                                                                                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                                                                                             workers
                                                                                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                                                                                          ) [AssignmentHeader]
                                                                                                                                                                                                                          AssignmentFooter(
                                                                                                                                                                                                                            AssignOperator(
                                                                                                                                                                                                                            ) [AssignOperator]
                                                                                                                                                                                                                            LeftExpression(
                                                                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                                                                NoSign(
                                                                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                                                                  AllocatorFactor(
                                                                                                                                                                                                                                    Type(
                                                                                                                                                                                                                                     AbsWorker
                                                                                                                                                                                                                                    ) [Type]
                                                                                                                                                                                                                                    SingleArrayIndexer(
                                                                                                                                                                                                                                      ArrayIndexer(
                                                                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                                                                            NoSign(
                                                                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                                                                                IntConstantFactor(
                                                                                                                                                                                                                                                 5
                                                                                                                                                                                                                                                ) [IntConstantFactor]
                                                                                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                                                                      ) [ArrayIndexer]
                                                                                                                                                                                                                                    ) [SingleArrayIndexer]
                                                                                                                                                                                                                                  ) [AllocatorFactor]
                                                                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                                                                          ) [AssignmentFooter]
                                                                                                                                                                                                                        ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                                                                                                        AssignmentHeader(
                                                                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                                                                           worker
                                                                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                                                                                                        AssignmentFooter(
                                                                                                                                                                                                                          AssignOperator(
                                                                                                                                                                                                                          ) [AssignOperator]
                                                                                                                                                                                                                          LeftExpression(
                                                                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                                                                              NoSign(
                                                                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                                                                AllocatorFactor(
                                                                                                                                                                                                                                  Type(
                                                                                                                                                                                                                                   Worker
                                                                                                                                                                                                                                  ) [Type]
                                                                                                                                                                                                                                  NoArrayIndexer(
                                                                                                                                                                                                                                  ) [NoArrayIndexer]
                                                                                                                                                                                                                                ) [AllocatorFactor]
                                                                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                                                                                                                      AssignmentHeader(
                                                                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                                                                         s
                                                                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                                                                      ) [AssignmentHeader]
                                                                                                                                                                                                                      AssignmentFooter(
                                                                                                                                                                                                                        AssignOperator(
                                                                                                                                                                                                                        ) [AssignOperator]
                                                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                                                            NoSign(
                                                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                                                              AllocatorFactor(
                                                                                                                                                                                                                                Type(
                                                                                                                                                                                                                                 String
                                                                                                                                                                                                                                ) [Type]
                                                                                                                                                                                                                                NoArrayIndexer(
                                                                                                                                                                                                                                ) [NoArrayIndexer]
                                                                                                                                                                                                                              ) [AllocatorFactor]
                                                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                                                      ) [AssignmentFooter]
                                                                                                                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                                                                                  AssignmentDesignatorStatement(
                                                                                                                                                                                                                    AssignmentHeader(
                                                                                                                                                                                                                      MemberAccessDesignator(
                                                                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                                                                         s
                                                                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                                                                       arr
                                                                                                                                                                                                                      ) [MemberAccessDesignator]
                                                                                                                                                                                                                    ) [AssignmentHeader]
                                                                                                                                                                                                                    AssignmentFooter(
                                                                                                                                                                                                                      AssignOperator(
                                                                                                                                                                                                                      ) [AssignOperator]
                                                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                                                          NoSign(
                                                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                                                            AllocatorFactor(
                                                                                                                                                                                                                              Type(
                                                                                                                                                                                                                               char
                                                                                                                                                                                                                              ) [Type]
                                                                                                                                                                                                                              SingleArrayIndexer(
                                                                                                                                                                                                                                ArrayIndexer(
                                                                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                                                                      NoSign(
                                                                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                                                                          IntConstantFactor(
                                                                                                                                                                                                                                           3
                                                                                                                                                                                                                                          ) [IntConstantFactor]
                                                                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                                                                ) [ArrayIndexer]
                                                                                                                                                                                                                              ) [SingleArrayIndexer]
                                                                                                                                                                                                                            ) [AllocatorFactor]
                                                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                                                    ) [AssignmentFooter]
                                                                                                                                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                                                                              DesignatorBasedStatement(
                                                                                                                                                                                                                AssignmentDesignatorStatement(
                                                                                                                                                                                                                  AssignmentHeader(
                                                                                                                                                                                                                    ElementAccessDesignator(
                                                                                                                                                                                                                      MemberAccessDesignator(
                                                                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                                                                         s
                                                                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                                                                       arr
                                                                                                                                                                                                                      ) [MemberAccessDesignator]
                                                                                                                                                                                                                      ArrayIndexer(
                                                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                                                            NoSign(
                                                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                                                                IntConstantFactor(
                                                                                                                                                                                                                                 0
                                                                                                                                                                                                                                ) [IntConstantFactor]
                                                                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                                                      ) [ArrayIndexer]
                                                                                                                                                                                                                    ) [ElementAccessDesignator]
                                                                                                                                                                                                                  ) [AssignmentHeader]
                                                                                                                                                                                                                  AssignmentFooter(
                                                                                                                                                                                                                    AssignOperator(
                                                                                                                                                                                                                    ) [AssignOperator]
                                                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                                                        NoSign(
                                                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                                                                            CharConstantFactor(
                                                                                                                                                                                                                             J
                                                                                                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                                                  ) [AssignmentFooter]
                                                                                                                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                                                                            DesignatorBasedStatement(
                                                                                                                                                                                                              AssignmentDesignatorStatement(
                                                                                                                                                                                                                AssignmentHeader(
                                                                                                                                                                                                                  ElementAccessDesignator(
                                                                                                                                                                                                                    MemberAccessDesignator(
                                                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                                                       s
                                                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                                                     arr
                                                                                                                                                                                                                    ) [MemberAccessDesignator]
                                                                                                                                                                                                                    ArrayIndexer(
                                                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                                                          NoSign(
                                                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                                                            ConstantFactor(
                                                                                                                                                                                                                              IntConstantFactor(
                                                                                                                                                                                                                               1
                                                                                                                                                                                                                              ) [IntConstantFactor]
                                                                                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                                                    ) [ArrayIndexer]
                                                                                                                                                                                                                  ) [ElementAccessDesignator]
                                                                                                                                                                                                                ) [AssignmentHeader]
                                                                                                                                                                                                                AssignmentFooter(
                                                                                                                                                                                                                  AssignOperator(
                                                                                                                                                                                                                  ) [AssignOperator]
                                                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                                                      NoSign(
                                                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                                                          CharConstantFactor(
                                                                                                                                                                                                                           o
                                                                                                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                                                ) [AssignmentFooter]
                                                                                                                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                                                                          DesignatorBasedStatement(
                                                                                                                                                                                                            AssignmentDesignatorStatement(
                                                                                                                                                                                                              AssignmentHeader(
                                                                                                                                                                                                                ElementAccessDesignator(
                                                                                                                                                                                                                  MemberAccessDesignator(
                                                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                                                     s
                                                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                                                   arr
                                                                                                                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                                                                                                                  ArrayIndexer(
                                                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                                                        NoSign(
                                                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                                                                            IntConstantFactor(
                                                                                                                                                                                                                             2
                                                                                                                                                                                                                            ) [IntConstantFactor]
                                                                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                                                  ) [ArrayIndexer]
                                                                                                                                                                                                                ) [ElementAccessDesignator]
                                                                                                                                                                                                              ) [AssignmentHeader]
                                                                                                                                                                                                              AssignmentFooter(
                                                                                                                                                                                                                AssignOperator(
                                                                                                                                                                                                                ) [AssignOperator]
                                                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                                                    NoSign(
                                                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                                                        CharConstantFactor(
                                                                                                                                                                                                                         e
                                                                                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                                              ) [AssignmentFooter]
                                                                                                                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                                                                                          MethodCallDesignatorStatement(
                                                                                                                                                                                                            MethodCall(
                                                                                                                                                                                                              MethodCallHeader(
                                                                                                                                                                                                                MemberAccessDesignator(
                                                                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                                                                   worker
                                                                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                                                                 setName
                                                                                                                                                                                                                ) [MemberAccessDesignator]
                                                                                                                                                                                                              ) [MethodCallHeader]
                                                                                                                                                                                                              ActualParameters(
                                                                                                                                                                                                                SingleActualParameter(
                                                                                                                                                                                                                  ActualParameter(
                                                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                                                        NoSign(
                                                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                                                          DesignatorFactor(
                                                                                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                                                                                             s
                                                                                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                                                                                          ) [DesignatorFactor]
                                                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                                                  ) [ActualParameter]
                                                                                                                                                                                                                ) [SingleActualParameter]
                                                                                                                                                                                                              ) [ActualParameters]
                                                                                                                                                                                                            ) [MethodCall]
                                                                                                                                                                                                          ) [MethodCallDesignatorStatement]
                                                                                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                                                                                        MethodCallDesignatorStatement(
                                                                                                                                                                                                          MethodCall(
                                                                                                                                                                                                            MethodCallHeader(
                                                                                                                                                                                                              MemberAccessDesignator(
                                                                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                                                                 worker
                                                                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                                                                               setYearOfBirth
                                                                                                                                                                                                              ) [MemberAccessDesignator]
                                                                                                                                                                                                            ) [MethodCallHeader]
                                                                                                                                                                                                            ActualParameters(
                                                                                                                                                                                                              SingleActualParameter(
                                                                                                                                                                                                                ActualParameter(
                                                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                                                      NoSign(
                                                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                                                          IntConstantFactor(
                                                                                                                                                                                                                           1968
                                                                                                                                                                                                                          ) [IntConstantFactor]
                                                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                                                ) [ActualParameter]
                                                                                                                                                                                                              ) [SingleActualParameter]
                                                                                                                                                                                                            ) [ActualParameters]
                                                                                                                                                                                                          ) [MethodCall]
                                                                                                                                                                                                        ) [MethodCallDesignatorStatement]
                                                                                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                                                                                        AssignmentHeader(
                                                                                                                                                                                                          ElementAccessDesignator(
                                                                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                                                                             workers
                                                                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                                                                            ArrayIndexer(
                                                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                                                  NoSign(
                                                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                                                      IntConstantFactor(
                                                                                                                                                                                                                       0
                                                                                                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                                                            ) [ArrayIndexer]
                                                                                                                                                                                                          ) [ElementAccessDesignator]
                                                                                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                                                                                        AssignmentFooter(
                                                                                                                                                                                                          AssignOperator(
                                                                                                                                                                                                          ) [AssignOperator]
                                                                                                                                                                                                          LeftExpression(
                                                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                                                              NoSign(
                                                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                                                DesignatorFactor(
                                                                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                                                                   worker
                                                                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                                                                ) [DesignatorFactor]
                                                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                                                                                                      AssignmentHeader(
                                                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                                                         baker
                                                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                                                      ) [AssignmentHeader]
                                                                                                                                                                                                      AssignmentFooter(
                                                                                                                                                                                                        AssignOperator(
                                                                                                                                                                                                        ) [AssignOperator]
                                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                                            NoSign(
                                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                                              AllocatorFactor(
                                                                                                                                                                                                                Type(
                                                                                                                                                                                                                 Baker
                                                                                                                                                                                                                ) [Type]
                                                                                                                                                                                                                NoArrayIndexer(
                                                                                                                                                                                                                ) [NoArrayIndexer]
                                                                                                                                                                                                              ) [AllocatorFactor]
                                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                                      ) [AssignmentFooter]
                                                                                                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                                                                  AssignmentDesignatorStatement(
                                                                                                                                                                                                    AssignmentHeader(
                                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                                       s
                                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                                    ) [AssignmentHeader]
                                                                                                                                                                                                    AssignmentFooter(
                                                                                                                                                                                                      AssignOperator(
                                                                                                                                                                                                      ) [AssignOperator]
                                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                                          NoSign(
                                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                                            AllocatorFactor(
                                                                                                                                                                                                              Type(
                                                                                                                                                                                                               String
                                                                                                                                                                                                              ) [Type]
                                                                                                                                                                                                              NoArrayIndexer(
                                                                                                                                                                                                              ) [NoArrayIndexer]
                                                                                                                                                                                                            ) [AllocatorFactor]
                                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                                    ) [AssignmentFooter]
                                                                                                                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                                                              DesignatorBasedStatement(
                                                                                                                                                                                                AssignmentDesignatorStatement(
                                                                                                                                                                                                  AssignmentHeader(
                                                                                                                                                                                                    MemberAccessDesignator(
                                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                                       s
                                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                                     arr
                                                                                                                                                                                                    ) [MemberAccessDesignator]
                                                                                                                                                                                                  ) [AssignmentHeader]
                                                                                                                                                                                                  AssignmentFooter(
                                                                                                                                                                                                    AssignOperator(
                                                                                                                                                                                                    ) [AssignOperator]
                                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                                        NoSign(
                                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                                          AllocatorFactor(
                                                                                                                                                                                                            Type(
                                                                                                                                                                                                             char
                                                                                                                                                                                                            ) [Type]
                                                                                                                                                                                                            SingleArrayIndexer(
                                                                                                                                                                                                              ArrayIndexer(
                                                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                                                    NoSign(
                                                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                                                        IntConstantFactor(
                                                                                                                                                                                                                         6
                                                                                                                                                                                                                        ) [IntConstantFactor]
                                                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                                              ) [ArrayIndexer]
                                                                                                                                                                                                            ) [SingleArrayIndexer]
                                                                                                                                                                                                          ) [AllocatorFactor]
                                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                                  ) [AssignmentFooter]
                                                                                                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                                                            DesignatorBasedStatement(
                                                                                                                                                                                              AssignmentDesignatorStatement(
                                                                                                                                                                                                AssignmentHeader(
                                                                                                                                                                                                  ElementAccessDesignator(
                                                                                                                                                                                                    MemberAccessDesignator(
                                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                                       s
                                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                                     arr
                                                                                                                                                                                                    ) [MemberAccessDesignator]
                                                                                                                                                                                                    ArrayIndexer(
                                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                                          NoSign(
                                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                                            ConstantFactor(
                                                                                                                                                                                                              IntConstantFactor(
                                                                                                                                                                                                               0
                                                                                                                                                                                                              ) [IntConstantFactor]
                                                                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                                    ) [ArrayIndexer]
                                                                                                                                                                                                  ) [ElementAccessDesignator]
                                                                                                                                                                                                ) [AssignmentHeader]
                                                                                                                                                                                                AssignmentFooter(
                                                                                                                                                                                                  AssignOperator(
                                                                                                                                                                                                  ) [AssignOperator]
                                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                                      NoSign(
                                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                                          CharConstantFactor(
                                                                                                                                                                                                           B
                                                                                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                                ) [AssignmentFooter]
                                                                                                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                                                          DesignatorBasedStatement(
                                                                                                                                                                                            AssignmentDesignatorStatement(
                                                                                                                                                                                              AssignmentHeader(
                                                                                                                                                                                                ElementAccessDesignator(
                                                                                                                                                                                                  MemberAccessDesignator(
                                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                                     s
                                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                                   arr
                                                                                                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                                                                                                  ArrayIndexer(
                                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                                        NoSign(
                                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                                                            IntConstantFactor(
                                                                                                                                                                                                             1
                                                                                                                                                                                                            ) [IntConstantFactor]
                                                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                                  ) [ArrayIndexer]
                                                                                                                                                                                                ) [ElementAccessDesignator]
                                                                                                                                                                                              ) [AssignmentHeader]
                                                                                                                                                                                              AssignmentFooter(
                                                                                                                                                                                                AssignOperator(
                                                                                                                                                                                                ) [AssignOperator]
                                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                                    NoSign(
                                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                                        CharConstantFactor(
                                                                                                                                                                                                         u
                                                                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                              ) [AssignmentFooter]
                                                                                                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                                                                          AssignmentDesignatorStatement(
                                                                                                                                                                                            AssignmentHeader(
                                                                                                                                                                                              ElementAccessDesignator(
                                                                                                                                                                                                MemberAccessDesignator(
                                                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                                                   s
                                                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                                                 arr
                                                                                                                                                                                                ) [MemberAccessDesignator]
                                                                                                                                                                                                ArrayIndexer(
                                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                                      NoSign(
                                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                                          IntConstantFactor(
                                                                                                                                                                                                           2
                                                                                                                                                                                                          ) [IntConstantFactor]
                                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                                ) [ArrayIndexer]
                                                                                                                                                                                              ) [ElementAccessDesignator]
                                                                                                                                                                                            ) [AssignmentHeader]
                                                                                                                                                                                            AssignmentFooter(
                                                                                                                                                                                              AssignOperator(
                                                                                                                                                                                              ) [AssignOperator]
                                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                                  NoSign(
                                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                                      CharConstantFactor(
                                                                                                                                                                                                       t
                                                                                                                                                                                                      ) [CharConstantFactor]
                                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                                            ) [AssignmentFooter]
                                                                                                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                                                                        AssignmentDesignatorStatement(
                                                                                                                                                                                          AssignmentHeader(
                                                                                                                                                                                            ElementAccessDesignator(
                                                                                                                                                                                              MemberAccessDesignator(
                                                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                                                 s
                                                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                                                               arr
                                                                                                                                                                                              ) [MemberAccessDesignator]
                                                                                                                                                                                              ArrayIndexer(
                                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                                    NoSign(
                                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                                        IntConstantFactor(
                                                                                                                                                                                                         3
                                                                                                                                                                                                        ) [IntConstantFactor]
                                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                              ) [ArrayIndexer]
                                                                                                                                                                                            ) [ElementAccessDesignator]
                                                                                                                                                                                          ) [AssignmentHeader]
                                                                                                                                                                                          AssignmentFooter(
                                                                                                                                                                                            AssignOperator(
                                                                                                                                                                                            ) [AssignOperator]
                                                                                                                                                                                            LeftExpression(
                                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                                NoSign(
                                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                                    CharConstantFactor(
                                                                                                                                                                                                     t
                                                                                                                                                                                                    ) [CharConstantFactor]
                                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                                          ) [AssignmentFooter]
                                                                                                                                                                                        ) [AssignmentDesignatorStatement]
                                                                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                                                                        AssignmentHeader(
                                                                                                                                                                                          ElementAccessDesignator(
                                                                                                                                                                                            MemberAccessDesignator(
                                                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                                                               s
                                                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                                                             arr
                                                                                                                                                                                            ) [MemberAccessDesignator]
                                                                                                                                                                                            ArrayIndexer(
                                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                                  NoSign(
                                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                                      IntConstantFactor(
                                                                                                                                                                                                       4
                                                                                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                                            ) [ArrayIndexer]
                                                                                                                                                                                          ) [ElementAccessDesignator]
                                                                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                                                                        AssignmentFooter(
                                                                                                                                                                                          AssignOperator(
                                                                                                                                                                                          ) [AssignOperator]
                                                                                                                                                                                          LeftExpression(
                                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                                              NoSign(
                                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                                ConstantFactor(
                                                                                                                                                                                                  CharConstantFactor(
                                                                                                                                                                                                   e
                                                                                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                                                                                      AssignmentHeader(
                                                                                                                                                                                        ElementAccessDesignator(
                                                                                                                                                                                          MemberAccessDesignator(
                                                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                                                             s
                                                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                                                           arr
                                                                                                                                                                                          ) [MemberAccessDesignator]
                                                                                                                                                                                          ArrayIndexer(
                                                                                                                                                                                            LeftExpression(
                                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                                NoSign(
                                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                                    IntConstantFactor(
                                                                                                                                                                                                     5
                                                                                                                                                                                                    ) [IntConstantFactor]
                                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                                          ) [ArrayIndexer]
                                                                                                                                                                                        ) [ElementAccessDesignator]
                                                                                                                                                                                      ) [AssignmentHeader]
                                                                                                                                                                                      AssignmentFooter(
                                                                                                                                                                                        AssignOperator(
                                                                                                                                                                                        ) [AssignOperator]
                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                            NoSign(
                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                                CharConstantFactor(
                                                                                                                                                                                                 r
                                                                                                                                                                                                ) [CharConstantFactor]
                                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                      ) [AssignmentFooter]
                                                                                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                                                  MethodCallDesignatorStatement(
                                                                                                                                                                                    MethodCall(
                                                                                                                                                                                      MethodCallHeader(
                                                                                                                                                                                        MemberAccessDesignator(
                                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                                           baker
                                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                                         setShopName
                                                                                                                                                                                        ) [MemberAccessDesignator]
                                                                                                                                                                                      ) [MethodCallHeader]
                                                                                                                                                                                      ActualParameters(
                                                                                                                                                                                        SingleActualParameter(
                                                                                                                                                                                          ActualParameter(
                                                                                                                                                                                            LeftExpression(
                                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                                NoSign(
                                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                                  DesignatorFactor(
                                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                                     s
                                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                                  ) [DesignatorFactor]
                                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                                          ) [ActualParameter]
                                                                                                                                                                                        ) [SingleActualParameter]
                                                                                                                                                                                      ) [ActualParameters]
                                                                                                                                                                                    ) [MethodCall]
                                                                                                                                                                                  ) [MethodCallDesignatorStatement]
                                                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                                              DesignatorBasedStatement(
                                                                                                                                                                                AssignmentDesignatorStatement(
                                                                                                                                                                                  AssignmentHeader(
                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                     s
                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                  ) [AssignmentHeader]
                                                                                                                                                                                  AssignmentFooter(
                                                                                                                                                                                    AssignOperator(
                                                                                                                                                                                    ) [AssignOperator]
                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                        NoSign(
                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                          AllocatorFactor(
                                                                                                                                                                                            Type(
                                                                                                                                                                                             String
                                                                                                                                                                                            ) [Type]
                                                                                                                                                                                            NoArrayIndexer(
                                                                                                                                                                                            ) [NoArrayIndexer]
                                                                                                                                                                                          ) [AllocatorFactor]
                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                  ) [AssignmentFooter]
                                                                                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                                            DesignatorBasedStatement(
                                                                                                                                                                              AssignmentDesignatorStatement(
                                                                                                                                                                                AssignmentHeader(
                                                                                                                                                                                  MemberAccessDesignator(
                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                     s
                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                   arr
                                                                                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                                                                                ) [AssignmentHeader]
                                                                                                                                                                                AssignmentFooter(
                                                                                                                                                                                  AssignOperator(
                                                                                                                                                                                  ) [AssignOperator]
                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                      NoSign(
                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                        AllocatorFactor(
                                                                                                                                                                                          Type(
                                                                                                                                                                                           char
                                                                                                                                                                                          ) [Type]
                                                                                                                                                                                          SingleArrayIndexer(
                                                                                                                                                                                            ArrayIndexer(
                                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                                  NoSign(
                                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                                      IntConstantFactor(
                                                                                                                                                                                                       5
                                                                                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                                            ) [ArrayIndexer]
                                                                                                                                                                                          ) [SingleArrayIndexer]
                                                                                                                                                                                        ) [AllocatorFactor]
                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                ) [AssignmentFooter]
                                                                                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                                          DesignatorBasedStatement(
                                                                                                                                                                            AssignmentDesignatorStatement(
                                                                                                                                                                              AssignmentHeader(
                                                                                                                                                                                ElementAccessDesignator(
                                                                                                                                                                                  MemberAccessDesignator(
                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                     s
                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                   arr
                                                                                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                                                                                  ArrayIndexer(
                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                        NoSign(
                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                                            IntConstantFactor(
                                                                                                                                                                                             0
                                                                                                                                                                                            ) [IntConstantFactor]
                                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                  ) [ArrayIndexer]
                                                                                                                                                                                ) [ElementAccessDesignator]
                                                                                                                                                                              ) [AssignmentHeader]
                                                                                                                                                                              AssignmentFooter(
                                                                                                                                                                                AssignOperator(
                                                                                                                                                                                ) [AssignOperator]
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                        CharConstantFactor(
                                                                                                                                                                                         M
                                                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                              ) [AssignmentFooter]
                                                                                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                                                          AssignmentDesignatorStatement(
                                                                                                                                                                            AssignmentHeader(
                                                                                                                                                                              ElementAccessDesignator(
                                                                                                                                                                                MemberAccessDesignator(
                                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                                   s
                                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                                 arr
                                                                                                                                                                                ) [MemberAccessDesignator]
                                                                                                                                                                                ArrayIndexer(
                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                      NoSign(
                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                          IntConstantFactor(
                                                                                                                                                                                           1
                                                                                                                                                                                          ) [IntConstantFactor]
                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                ) [ArrayIndexer]
                                                                                                                                                                              ) [ElementAccessDesignator]
                                                                                                                                                                            ) [AssignmentHeader]
                                                                                                                                                                            AssignmentFooter(
                                                                                                                                                                              AssignOperator(
                                                                                                                                                                              ) [AssignOperator]
                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                  NoSign(
                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                      CharConstantFactor(
                                                                                                                                                                                       e
                                                                                                                                                                                      ) [CharConstantFactor]
                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                            ) [AssignmentFooter]
                                                                                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                                                        AssignmentDesignatorStatement(
                                                                                                                                                                          AssignmentHeader(
                                                                                                                                                                            ElementAccessDesignator(
                                                                                                                                                                              MemberAccessDesignator(
                                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                                 s
                                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                                               arr
                                                                                                                                                                              ) [MemberAccessDesignator]
                                                                                                                                                                              ArrayIndexer(
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                        IntConstantFactor(
                                                                                                                                                                                         2
                                                                                                                                                                                        ) [IntConstantFactor]
                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                              ) [ArrayIndexer]
                                                                                                                                                                            ) [ElementAccessDesignator]
                                                                                                                                                                          ) [AssignmentHeader]
                                                                                                                                                                          AssignmentFooter(
                                                                                                                                                                            AssignOperator(
                                                                                                                                                                            ) [AssignOperator]
                                                                                                                                                                            LeftExpression(
                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                NoSign(
                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                    CharConstantFactor(
                                                                                                                                                                                     a
                                                                                                                                                                                    ) [CharConstantFactor]
                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                          ) [AssignmentFooter]
                                                                                                                                                                        ) [AssignmentDesignatorStatement]
                                                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                                                        AssignmentHeader(
                                                                                                                                                                          ElementAccessDesignator(
                                                                                                                                                                            MemberAccessDesignator(
                                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                                               s
                                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                                             arr
                                                                                                                                                                            ) [MemberAccessDesignator]
                                                                                                                                                                            ArrayIndexer(
                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                  NoSign(
                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                      IntConstantFactor(
                                                                                                                                                                                       3
                                                                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                            ) [ArrayIndexer]
                                                                                                                                                                          ) [ElementAccessDesignator]
                                                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                                                        AssignmentFooter(
                                                                                                                                                                          AssignOperator(
                                                                                                                                                                          ) [AssignOperator]
                                                                                                                                                                          LeftExpression(
                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                              NoSign(
                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                ConstantFactor(
                                                                                                                                                                                  CharConstantFactor(
                                                                                                                                                                                   v
                                                                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                                                                      AssignmentHeader(
                                                                                                                                                                        ElementAccessDesignator(
                                                                                                                                                                          MemberAccessDesignator(
                                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                                             s
                                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                                           arr
                                                                                                                                                                          ) [MemberAccessDesignator]
                                                                                                                                                                          ArrayIndexer(
                                                                                                                                                                            LeftExpression(
                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                NoSign(
                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                    IntConstantFactor(
                                                                                                                                                                                     4
                                                                                                                                                                                    ) [IntConstantFactor]
                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                          ) [ArrayIndexer]
                                                                                                                                                                        ) [ElementAccessDesignator]
                                                                                                                                                                      ) [AssignmentHeader]
                                                                                                                                                                      AssignmentFooter(
                                                                                                                                                                        AssignOperator(
                                                                                                                                                                        ) [AssignOperator]
                                                                                                                                                                        LeftExpression(
                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                            NoSign(
                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                CharConstantFactor(
                                                                                                                                                                                 e
                                                                                                                                                                                ) [CharConstantFactor]
                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                      ) [AssignmentFooter]
                                                                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                                  MethodCallDesignatorStatement(
                                                                                                                                                                    MethodCall(
                                                                                                                                                                      MethodCallHeader(
                                                                                                                                                                        MemberAccessDesignator(
                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                           baker
                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                         setName
                                                                                                                                                                        ) [MemberAccessDesignator]
                                                                                                                                                                      ) [MethodCallHeader]
                                                                                                                                                                      ActualParameters(
                                                                                                                                                                        SingleActualParameter(
                                                                                                                                                                          ActualParameter(
                                                                                                                                                                            LeftExpression(
                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                NoSign(
                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                  DesignatorFactor(
                                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                                     s
                                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                                  ) [DesignatorFactor]
                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                          ) [ActualParameter]
                                                                                                                                                                        ) [SingleActualParameter]
                                                                                                                                                                      ) [ActualParameters]
                                                                                                                                                                    ) [MethodCall]
                                                                                                                                                                  ) [MethodCallDesignatorStatement]
                                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                              DesignatorBasedStatement(
                                                                                                                                                                MethodCallDesignatorStatement(
                                                                                                                                                                  MethodCall(
                                                                                                                                                                    MethodCallHeader(
                                                                                                                                                                      MemberAccessDesignator(
                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                         baker
                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                       setYearOfBirth
                                                                                                                                                                      ) [MemberAccessDesignator]
                                                                                                                                                                    ) [MethodCallHeader]
                                                                                                                                                                    ActualParameters(
                                                                                                                                                                      SingleActualParameter(
                                                                                                                                                                        ActualParameter(
                                                                                                                                                                          LeftExpression(
                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                              NoSign(
                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                ConstantFactor(
                                                                                                                                                                                  IntConstantFactor(
                                                                                                                                                                                   1971
                                                                                                                                                                                  ) [IntConstantFactor]
                                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                        ) [ActualParameter]
                                                                                                                                                                      ) [SingleActualParameter]
                                                                                                                                                                    ) [ActualParameters]
                                                                                                                                                                  ) [MethodCall]
                                                                                                                                                                ) [MethodCallDesignatorStatement]
                                                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                            DesignatorBasedStatement(
                                                                                                                                                              AssignmentDesignatorStatement(
                                                                                                                                                                AssignmentHeader(
                                                                                                                                                                  ElementAccessDesignator(
                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                     workers
                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                    ArrayIndexer(
                                                                                                                                                                      LeftExpression(
                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                          NoSign(
                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                            ConstantFactor(
                                                                                                                                                                              IntConstantFactor(
                                                                                                                                                                               1
                                                                                                                                                                              ) [IntConstantFactor]
                                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                    ) [ArrayIndexer]
                                                                                                                                                                  ) [ElementAccessDesignator]
                                                                                                                                                                ) [AssignmentHeader]
                                                                                                                                                                AssignmentFooter(
                                                                                                                                                                  AssignOperator(
                                                                                                                                                                  ) [AssignOperator]
                                                                                                                                                                  LeftExpression(
                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                      NoSign(
                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                        DesignatorFactor(
                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                           baker
                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                        ) [DesignatorFactor]
                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                ) [AssignmentFooter]
                                                                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                          DesignatorBasedStatement(
                                                                                                                                                            AssignmentDesignatorStatement(
                                                                                                                                                              AssignmentHeader(
                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                 butcher
                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                              ) [AssignmentHeader]
                                                                                                                                                              AssignmentFooter(
                                                                                                                                                                AssignOperator(
                                                                                                                                                                ) [AssignOperator]
                                                                                                                                                                LeftExpression(
                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                    NoSign(
                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                      AllocatorFactor(
                                                                                                                                                                        Type(
                                                                                                                                                                         Butcher
                                                                                                                                                                        ) [Type]
                                                                                                                                                                        NoArrayIndexer(
                                                                                                                                                                        ) [NoArrayIndexer]
                                                                                                                                                                      ) [AllocatorFactor]
                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                              ) [AssignmentFooter]
                                                                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                                          AssignmentDesignatorStatement(
                                                                                                                                                            AssignmentHeader(
                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                               s
                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                            ) [AssignmentHeader]
                                                                                                                                                            AssignmentFooter(
                                                                                                                                                              AssignOperator(
                                                                                                                                                              ) [AssignOperator]
                                                                                                                                                              LeftExpression(
                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                  NoSign(
                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                    AllocatorFactor(
                                                                                                                                                                      Type(
                                                                                                                                                                       String
                                                                                                                                                                      ) [Type]
                                                                                                                                                                      NoArrayIndexer(
                                                                                                                                                                      ) [NoArrayIndexer]
                                                                                                                                                                    ) [AllocatorFactor]
                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                            ) [AssignmentFooter]
                                                                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                                        AssignmentDesignatorStatement(
                                                                                                                                                          AssignmentHeader(
                                                                                                                                                            MemberAccessDesignator(
                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                               s
                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                             arr
                                                                                                                                                            ) [MemberAccessDesignator]
                                                                                                                                                          ) [AssignmentHeader]
                                                                                                                                                          AssignmentFooter(
                                                                                                                                                            AssignOperator(
                                                                                                                                                            ) [AssignOperator]
                                                                                                                                                            LeftExpression(
                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                NoSign(
                                                                                                                                                                ) [NoSign]
                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                  AllocatorFactor(
                                                                                                                                                                    Type(
                                                                                                                                                                     char
                                                                                                                                                                    ) [Type]
                                                                                                                                                                    SingleArrayIndexer(
                                                                                                                                                                      ArrayIndexer(
                                                                                                                                                                        LeftExpression(
                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                            NoSign(
                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                IntConstantFactor(
                                                                                                                                                                                 4
                                                                                                                                                                                ) [IntConstantFactor]
                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                      ) [ArrayIndexer]
                                                                                                                                                                    ) [SingleArrayIndexer]
                                                                                                                                                                  ) [AllocatorFactor]
                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                          ) [AssignmentFooter]
                                                                                                                                                        ) [AssignmentDesignatorStatement]
                                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                                        AssignmentHeader(
                                                                                                                                                          ElementAccessDesignator(
                                                                                                                                                            MemberAccessDesignator(
                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                               s
                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                             arr
                                                                                                                                                            ) [MemberAccessDesignator]
                                                                                                                                                            ArrayIndexer(
                                                                                                                                                              LeftExpression(
                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                  NoSign(
                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                      IntConstantFactor(
                                                                                                                                                                       0
                                                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                            ) [ArrayIndexer]
                                                                                                                                                          ) [ElementAccessDesignator]
                                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                                        AssignmentFooter(
                                                                                                                                                          AssignOperator(
                                                                                                                                                          ) [AssignOperator]
                                                                                                                                                          LeftExpression(
                                                                                                                                                            SingleTermExpression(
                                                                                                                                                              NoSign(
                                                                                                                                                              ) [NoSign]
                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                ConstantFactor(
                                                                                                                                                                  CharConstantFactor(
                                                                                                                                                                   B
                                                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                                                      AssignmentHeader(
                                                                                                                                                        ElementAccessDesignator(
                                                                                                                                                          MemberAccessDesignator(
                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                             s
                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                           arr
                                                                                                                                                          ) [MemberAccessDesignator]
                                                                                                                                                          ArrayIndexer(
                                                                                                                                                            LeftExpression(
                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                NoSign(
                                                                                                                                                                ) [NoSign]
                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                    IntConstantFactor(
                                                                                                                                                                     1
                                                                                                                                                                    ) [IntConstantFactor]
                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                          ) [ArrayIndexer]
                                                                                                                                                        ) [ElementAccessDesignator]
                                                                                                                                                      ) [AssignmentHeader]
                                                                                                                                                      AssignmentFooter(
                                                                                                                                                        AssignOperator(
                                                                                                                                                        ) [AssignOperator]
                                                                                                                                                        LeftExpression(
                                                                                                                                                          SingleTermExpression(
                                                                                                                                                            NoSign(
                                                                                                                                                            ) [NoSign]
                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                              ConstantFactor(
                                                                                                                                                                CharConstantFactor(
                                                                                                                                                                 i
                                                                                                                                                                ) [CharConstantFactor]
                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                      ) [AssignmentFooter]
                                                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                  AssignmentDesignatorStatement(
                                                                                                                                                    AssignmentHeader(
                                                                                                                                                      ElementAccessDesignator(
                                                                                                                                                        MemberAccessDesignator(
                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                           s
                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                         arr
                                                                                                                                                        ) [MemberAccessDesignator]
                                                                                                                                                        ArrayIndexer(
                                                                                                                                                          LeftExpression(
                                                                                                                                                            SingleTermExpression(
                                                                                                                                                              NoSign(
                                                                                                                                                              ) [NoSign]
                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                ConstantFactor(
                                                                                                                                                                  IntConstantFactor(
                                                                                                                                                                   2
                                                                                                                                                                  ) [IntConstantFactor]
                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                        ) [ArrayIndexer]
                                                                                                                                                      ) [ElementAccessDesignator]
                                                                                                                                                    ) [AssignmentHeader]
                                                                                                                                                    AssignmentFooter(
                                                                                                                                                      AssignOperator(
                                                                                                                                                      ) [AssignOperator]
                                                                                                                                                      LeftExpression(
                                                                                                                                                        SingleTermExpression(
                                                                                                                                                          NoSign(
                                                                                                                                                          ) [NoSign]
                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                            ConstantFactor(
                                                                                                                                                              CharConstantFactor(
                                                                                                                                                               f
                                                                                                                                                              ) [CharConstantFactor]
                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                    ) [AssignmentFooter]
                                                                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                              ) [MultipleStatements]
                                                                                                                                              DesignatorBasedStatement(
                                                                                                                                                AssignmentDesignatorStatement(
                                                                                                                                                  AssignmentHeader(
                                                                                                                                                    ElementAccessDesignator(
                                                                                                                                                      MemberAccessDesignator(
                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                         s
                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                       arr
                                                                                                                                                      ) [MemberAccessDesignator]
                                                                                                                                                      ArrayIndexer(
                                                                                                                                                        LeftExpression(
                                                                                                                                                          SingleTermExpression(
                                                                                                                                                            NoSign(
                                                                                                                                                            ) [NoSign]
                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                              ConstantFactor(
                                                                                                                                                                IntConstantFactor(
                                                                                                                                                                 3
                                                                                                                                                                ) [IntConstantFactor]
                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                      ) [ArrayIndexer]
                                                                                                                                                    ) [ElementAccessDesignator]
                                                                                                                                                  ) [AssignmentHeader]
                                                                                                                                                  AssignmentFooter(
                                                                                                                                                    AssignOperator(
                                                                                                                                                    ) [AssignOperator]
                                                                                                                                                    LeftExpression(
                                                                                                                                                      SingleTermExpression(
                                                                                                                                                        NoSign(
                                                                                                                                                        ) [NoSign]
                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                          ConstantFactor(
                                                                                                                                                            CharConstantFactor(
                                                                                                                                                             f
                                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                  ) [AssignmentFooter]
                                                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                                            ) [MultipleStatements]
                                                                                                                                            DesignatorBasedStatement(
                                                                                                                                              MethodCallDesignatorStatement(
                                                                                                                                                MethodCall(
                                                                                                                                                  MethodCallHeader(
                                                                                                                                                    MemberAccessDesignator(
                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                       butcher
                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                     setName
                                                                                                                                                    ) [MemberAccessDesignator]
                                                                                                                                                  ) [MethodCallHeader]
                                                                                                                                                  ActualParameters(
                                                                                                                                                    SingleActualParameter(
                                                                                                                                                      ActualParameter(
                                                                                                                                                        LeftExpression(
                                                                                                                                                          SingleTermExpression(
                                                                                                                                                            NoSign(
                                                                                                                                                            ) [NoSign]
                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                              DesignatorFactor(
                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                 s
                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                              ) [DesignatorFactor]
                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                      ) [ActualParameter]
                                                                                                                                                    ) [SingleActualParameter]
                                                                                                                                                  ) [ActualParameters]
                                                                                                                                                ) [MethodCall]
                                                                                                                                              ) [MethodCallDesignatorStatement]
                                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                                          ) [MultipleStatements]
                                                                                                                                          DesignatorBasedStatement(
                                                                                                                                            MethodCallDesignatorStatement(
                                                                                                                                              MethodCall(
                                                                                                                                                MethodCallHeader(
                                                                                                                                                  MemberAccessDesignator(
                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                     butcher
                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                   setYearOfBirth
                                                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                                                ) [MethodCallHeader]
                                                                                                                                                ActualParameters(
                                                                                                                                                  SingleActualParameter(
                                                                                                                                                    ActualParameter(
                                                                                                                                                      LeftExpression(
                                                                                                                                                        SingleTermExpression(
                                                                                                                                                          NoSign(
                                                                                                                                                          ) [NoSign]
                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                            ConstantFactor(
                                                                                                                                                              IntConstantFactor(
                                                                                                                                                               1978
                                                                                                                                                              ) [IntConstantFactor]
                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                    ) [ActualParameter]
                                                                                                                                                  ) [SingleActualParameter]
                                                                                                                                                ) [ActualParameters]
                                                                                                                                              ) [MethodCall]
                                                                                                                                            ) [MethodCallDesignatorStatement]
                                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                                        ) [MultipleStatements]
                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                          AssignmentDesignatorStatement(
                                                                                                                                            AssignmentHeader(
                                                                                                                                              ElementAccessDesignator(
                                                                                                                                                IdentifierDesignator(
                                                                                                                                                 workers
                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                ArrayIndexer(
                                                                                                                                                  LeftExpression(
                                                                                                                                                    SingleTermExpression(
                                                                                                                                                      NoSign(
                                                                                                                                                      ) [NoSign]
                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                        ConstantFactor(
                                                                                                                                                          IntConstantFactor(
                                                                                                                                                           2
                                                                                                                                                          ) [IntConstantFactor]
                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                ) [ArrayIndexer]
                                                                                                                                              ) [ElementAccessDesignator]
                                                                                                                                            ) [AssignmentHeader]
                                                                                                                                            AssignmentFooter(
                                                                                                                                              AssignOperator(
                                                                                                                                              ) [AssignOperator]
                                                                                                                                              LeftExpression(
                                                                                                                                                SingleTermExpression(
                                                                                                                                                  NoSign(
                                                                                                                                                  ) [NoSign]
                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                    DesignatorFactor(
                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                       butcher
                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                    ) [DesignatorFactor]
                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                              ) [LeftExpression]
                                                                                                                                            ) [AssignmentFooter]
                                                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                      ) [MultipleStatements]
                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                        AssignmentDesignatorStatement(
                                                                                                                                          AssignmentHeader(
                                                                                                                                            IdentifierDesignator(
                                                                                                                                             butcher
                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                          ) [AssignmentHeader]
                                                                                                                                          AssignmentFooter(
                                                                                                                                            AssignOperator(
                                                                                                                                            ) [AssignOperator]
                                                                                                                                            LeftExpression(
                                                                                                                                              SingleTermExpression(
                                                                                                                                                NoSign(
                                                                                                                                                ) [NoSign]
                                                                                                                                                SingleFactorTerm(
                                                                                                                                                  AllocatorFactor(
                                                                                                                                                    Type(
                                                                                                                                                     Butcher
                                                                                                                                                    ) [Type]
                                                                                                                                                    NoArrayIndexer(
                                                                                                                                                    ) [NoArrayIndexer]
                                                                                                                                                  ) [AllocatorFactor]
                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                            ) [LeftExpression]
                                                                                                                                          ) [AssignmentFooter]
                                                                                                                                        ) [AssignmentDesignatorStatement]
                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                    ) [MultipleStatements]
                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                        AssignmentHeader(
                                                                                                                                          IdentifierDesignator(
                                                                                                                                           s
                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                        AssignmentFooter(
                                                                                                                                          AssignOperator(
                                                                                                                                          ) [AssignOperator]
                                                                                                                                          LeftExpression(
                                                                                                                                            SingleTermExpression(
                                                                                                                                              NoSign(
                                                                                                                                              ) [NoSign]
                                                                                                                                              SingleFactorTerm(
                                                                                                                                                AllocatorFactor(
                                                                                                                                                  Type(
                                                                                                                                                   String
                                                                                                                                                  ) [Type]
                                                                                                                                                  NoArrayIndexer(
                                                                                                                                                  ) [NoArrayIndexer]
                                                                                                                                                ) [AllocatorFactor]
                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                          ) [LeftExpression]
                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                  ) [MultipleStatements]
                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                                      AssignmentHeader(
                                                                                                                                        MemberAccessDesignator(
                                                                                                                                          IdentifierDesignator(
                                                                                                                                           s
                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                         arr
                                                                                                                                        ) [MemberAccessDesignator]
                                                                                                                                      ) [AssignmentHeader]
                                                                                                                                      AssignmentFooter(
                                                                                                                                        AssignOperator(
                                                                                                                                        ) [AssignOperator]
                                                                                                                                        LeftExpression(
                                                                                                                                          SingleTermExpression(
                                                                                                                                            NoSign(
                                                                                                                                            ) [NoSign]
                                                                                                                                            SingleFactorTerm(
                                                                                                                                              AllocatorFactor(
                                                                                                                                                Type(
                                                                                                                                                 char
                                                                                                                                                ) [Type]
                                                                                                                                                SingleArrayIndexer(
                                                                                                                                                  ArrayIndexer(
                                                                                                                                                    LeftExpression(
                                                                                                                                                      SingleTermExpression(
                                                                                                                                                        NoSign(
                                                                                                                                                        ) [NoSign]
                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                          ConstantFactor(
                                                                                                                                                            IntConstantFactor(
                                                                                                                                                             4
                                                                                                                                                            ) [IntConstantFactor]
                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                  ) [ArrayIndexer]
                                                                                                                                                ) [SingleArrayIndexer]
                                                                                                                                              ) [AllocatorFactor]
                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                        ) [LeftExpression]
                                                                                                                                      ) [AssignmentFooter]
                                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                ) [MultipleStatements]
                                                                                                                                DesignatorBasedStatement(
                                                                                                                                  AssignmentDesignatorStatement(
                                                                                                                                    AssignmentHeader(
                                                                                                                                      ElementAccessDesignator(
                                                                                                                                        MemberAccessDesignator(
                                                                                                                                          IdentifierDesignator(
                                                                                                                                           s
                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                         arr
                                                                                                                                        ) [MemberAccessDesignator]
                                                                                                                                        ArrayIndexer(
                                                                                                                                          LeftExpression(
                                                                                                                                            SingleTermExpression(
                                                                                                                                              NoSign(
                                                                                                                                              ) [NoSign]
                                                                                                                                              SingleFactorTerm(
                                                                                                                                                ConstantFactor(
                                                                                                                                                  IntConstantFactor(
                                                                                                                                                   0
                                                                                                                                                  ) [IntConstantFactor]
                                                                                                                                                ) [ConstantFactor]
                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                          ) [LeftExpression]
                                                                                                                                        ) [ArrayIndexer]
                                                                                                                                      ) [ElementAccessDesignator]
                                                                                                                                    ) [AssignmentHeader]
                                                                                                                                    AssignmentFooter(
                                                                                                                                      AssignOperator(
                                                                                                                                      ) [AssignOperator]
                                                                                                                                      LeftExpression(
                                                                                                                                        SingleTermExpression(
                                                                                                                                          NoSign(
                                                                                                                                          ) [NoSign]
                                                                                                                                          SingleFactorTerm(
                                                                                                                                            ConstantFactor(
                                                                                                                                              CharConstantFactor(
                                                                                                                                               M
                                                                                                                                              ) [CharConstantFactor]
                                                                                                                                            ) [ConstantFactor]
                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                      ) [LeftExpression]
                                                                                                                                    ) [AssignmentFooter]
                                                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                              ) [MultipleStatements]
                                                                                                                              DesignatorBasedStatement(
                                                                                                                                AssignmentDesignatorStatement(
                                                                                                                                  AssignmentHeader(
                                                                                                                                    ElementAccessDesignator(
                                                                                                                                      MemberAccessDesignator(
                                                                                                                                        IdentifierDesignator(
                                                                                                                                         s
                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                       arr
                                                                                                                                      ) [MemberAccessDesignator]
                                                                                                                                      ArrayIndexer(
                                                                                                                                        LeftExpression(
                                                                                                                                          SingleTermExpression(
                                                                                                                                            NoSign(
                                                                                                                                            ) [NoSign]
                                                                                                                                            SingleFactorTerm(
                                                                                                                                              ConstantFactor(
                                                                                                                                                IntConstantFactor(
                                                                                                                                                 1
                                                                                                                                                ) [IntConstantFactor]
                                                                                                                                              ) [ConstantFactor]
                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                        ) [LeftExpression]
                                                                                                                                      ) [ArrayIndexer]
                                                                                                                                    ) [ElementAccessDesignator]
                                                                                                                                  ) [AssignmentHeader]
                                                                                                                                  AssignmentFooter(
                                                                                                                                    AssignOperator(
                                                                                                                                    ) [AssignOperator]
                                                                                                                                    LeftExpression(
                                                                                                                                      SingleTermExpression(
                                                                                                                                        NoSign(
                                                                                                                                        ) [NoSign]
                                                                                                                                        SingleFactorTerm(
                                                                                                                                          ConstantFactor(
                                                                                                                                            CharConstantFactor(
                                                                                                                                             e
                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                          ) [ConstantFactor]
                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                    ) [LeftExpression]
                                                                                                                                  ) [AssignmentFooter]
                                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                            ) [MultipleStatements]
                                                                                                                            DesignatorBasedStatement(
                                                                                                                              AssignmentDesignatorStatement(
                                                                                                                                AssignmentHeader(
                                                                                                                                  ElementAccessDesignator(
                                                                                                                                    MemberAccessDesignator(
                                                                                                                                      IdentifierDesignator(
                                                                                                                                       s
                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                     arr
                                                                                                                                    ) [MemberAccessDesignator]
                                                                                                                                    ArrayIndexer(
                                                                                                                                      LeftExpression(
                                                                                                                                        SingleTermExpression(
                                                                                                                                          NoSign(
                                                                                                                                          ) [NoSign]
                                                                                                                                          SingleFactorTerm(
                                                                                                                                            ConstantFactor(
                                                                                                                                              IntConstantFactor(
                                                                                                                                               2
                                                                                                                                              ) [IntConstantFactor]
                                                                                                                                            ) [ConstantFactor]
                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                      ) [LeftExpression]
                                                                                                                                    ) [ArrayIndexer]
                                                                                                                                  ) [ElementAccessDesignator]
                                                                                                                                ) [AssignmentHeader]
                                                                                                                                AssignmentFooter(
                                                                                                                                  AssignOperator(
                                                                                                                                  ) [AssignOperator]
                                                                                                                                  LeftExpression(
                                                                                                                                    SingleTermExpression(
                                                                                                                                      NoSign(
                                                                                                                                      ) [NoSign]
                                                                                                                                      SingleFactorTerm(
                                                                                                                                        ConstantFactor(
                                                                                                                                          CharConstantFactor(
                                                                                                                                           a
                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                        ) [ConstantFactor]
                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                  ) [LeftExpression]
                                                                                                                                ) [AssignmentFooter]
                                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                          ) [MultipleStatements]
                                                                                                                          DesignatorBasedStatement(
                                                                                                                            AssignmentDesignatorStatement(
                                                                                                                              AssignmentHeader(
                                                                                                                                ElementAccessDesignator(
                                                                                                                                  MemberAccessDesignator(
                                                                                                                                    IdentifierDesignator(
                                                                                                                                     s
                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                   arr
                                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                                  ArrayIndexer(
                                                                                                                                    LeftExpression(
                                                                                                                                      SingleTermExpression(
                                                                                                                                        NoSign(
                                                                                                                                        ) [NoSign]
                                                                                                                                        SingleFactorTerm(
                                                                                                                                          ConstantFactor(
                                                                                                                                            IntConstantFactor(
                                                                                                                                             3
                                                                                                                                            ) [IntConstantFactor]
                                                                                                                                          ) [ConstantFactor]
                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                    ) [LeftExpression]
                                                                                                                                  ) [ArrayIndexer]
                                                                                                                                ) [ElementAccessDesignator]
                                                                                                                              ) [AssignmentHeader]
                                                                                                                              AssignmentFooter(
                                                                                                                                AssignOperator(
                                                                                                                                ) [AssignOperator]
                                                                                                                                LeftExpression(
                                                                                                                                  SingleTermExpression(
                                                                                                                                    NoSign(
                                                                                                                                    ) [NoSign]
                                                                                                                                    SingleFactorTerm(
                                                                                                                                      ConstantFactor(
                                                                                                                                        CharConstantFactor(
                                                                                                                                         t
                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                      ) [ConstantFactor]
                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                ) [LeftExpression]
                                                                                                                              ) [AssignmentFooter]
                                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                        ) [MultipleStatements]
                                                                                                                        DesignatorBasedStatement(
                                                                                                                          MethodCallDesignatorStatement(
                                                                                                                            MethodCall(
                                                                                                                              MethodCallHeader(
                                                                                                                                MemberAccessDesignator(
                                                                                                                                  IdentifierDesignator(
                                                                                                                                   butcher
                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                 setShopName
                                                                                                                                ) [MemberAccessDesignator]
                                                                                                                              ) [MethodCallHeader]
                                                                                                                              ActualParameters(
                                                                                                                                SingleActualParameter(
                                                                                                                                  ActualParameter(
                                                                                                                                    LeftExpression(
                                                                                                                                      SingleTermExpression(
                                                                                                                                        NoSign(
                                                                                                                                        ) [NoSign]
                                                                                                                                        SingleFactorTerm(
                                                                                                                                          DesignatorFactor(
                                                                                                                                            IdentifierDesignator(
                                                                                                                                             s
                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                          ) [DesignatorFactor]
                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                    ) [LeftExpression]
                                                                                                                                  ) [ActualParameter]
                                                                                                                                ) [SingleActualParameter]
                                                                                                                              ) [ActualParameters]
                                                                                                                            ) [MethodCall]
                                                                                                                          ) [MethodCallDesignatorStatement]
                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                      ) [MultipleStatements]
                                                                                                                      DesignatorBasedStatement(
                                                                                                                        AssignmentDesignatorStatement(
                                                                                                                          AssignmentHeader(
                                                                                                                            IdentifierDesignator(
                                                                                                                             s
                                                                                                                            ) [IdentifierDesignator]
                                                                                                                          ) [AssignmentHeader]
                                                                                                                          AssignmentFooter(
                                                                                                                            AssignOperator(
                                                                                                                            ) [AssignOperator]
                                                                                                                            LeftExpression(
                                                                                                                              SingleTermExpression(
                                                                                                                                NoSign(
                                                                                                                                ) [NoSign]
                                                                                                                                SingleFactorTerm(
                                                                                                                                  AllocatorFactor(
                                                                                                                                    Type(
                                                                                                                                     String
                                                                                                                                    ) [Type]
                                                                                                                                    NoArrayIndexer(
                                                                                                                                    ) [NoArrayIndexer]
                                                                                                                                  ) [AllocatorFactor]
                                                                                                                                ) [SingleFactorTerm]
                                                                                                                              ) [SingleTermExpression]
                                                                                                                            ) [LeftExpression]
                                                                                                                          ) [AssignmentFooter]
                                                                                                                        ) [AssignmentDesignatorStatement]
                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                    ) [MultipleStatements]
                                                                                                                    DesignatorBasedStatement(
                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                        AssignmentHeader(
                                                                                                                          MemberAccessDesignator(
                                                                                                                            IdentifierDesignator(
                                                                                                                             s
                                                                                                                            ) [IdentifierDesignator]
                                                                                                                           arr
                                                                                                                          ) [MemberAccessDesignator]
                                                                                                                        ) [AssignmentHeader]
                                                                                                                        AssignmentFooter(
                                                                                                                          AssignOperator(
                                                                                                                          ) [AssignOperator]
                                                                                                                          LeftExpression(
                                                                                                                            SingleTermExpression(
                                                                                                                              NoSign(
                                                                                                                              ) [NoSign]
                                                                                                                              SingleFactorTerm(
                                                                                                                                AllocatorFactor(
                                                                                                                                  Type(
                                                                                                                                   char
                                                                                                                                  ) [Type]
                                                                                                                                  SingleArrayIndexer(
                                                                                                                                    ArrayIndexer(
                                                                                                                                      LeftExpression(
                                                                                                                                        SingleTermExpression(
                                                                                                                                          NoSign(
                                                                                                                                          ) [NoSign]
                                                                                                                                          SingleFactorTerm(
                                                                                                                                            ConstantFactor(
                                                                                                                                              IntConstantFactor(
                                                                                                                                               6
                                                                                                                                              ) [IntConstantFactor]
                                                                                                                                            ) [ConstantFactor]
                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                      ) [LeftExpression]
                                                                                                                                    ) [ArrayIndexer]
                                                                                                                                  ) [SingleArrayIndexer]
                                                                                                                                ) [AllocatorFactor]
                                                                                                                              ) [SingleFactorTerm]
                                                                                                                            ) [SingleTermExpression]
                                                                                                                          ) [LeftExpression]
                                                                                                                        ) [AssignmentFooter]
                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                  ) [MultipleStatements]
                                                                                                                  DesignatorBasedStatement(
                                                                                                                    AssignmentDesignatorStatement(
                                                                                                                      AssignmentHeader(
                                                                                                                        ElementAccessDesignator(
                                                                                                                          MemberAccessDesignator(
                                                                                                                            IdentifierDesignator(
                                                                                                                             s
                                                                                                                            ) [IdentifierDesignator]
                                                                                                                           arr
                                                                                                                          ) [MemberAccessDesignator]
                                                                                                                          ArrayIndexer(
                                                                                                                            LeftExpression(
                                                                                                                              SingleTermExpression(
                                                                                                                                NoSign(
                                                                                                                                ) [NoSign]
                                                                                                                                SingleFactorTerm(
                                                                                                                                  ConstantFactor(
                                                                                                                                    IntConstantFactor(
                                                                                                                                     0
                                                                                                                                    ) [IntConstantFactor]
                                                                                                                                  ) [ConstantFactor]
                                                                                                                                ) [SingleFactorTerm]
                                                                                                                              ) [SingleTermExpression]
                                                                                                                            ) [LeftExpression]
                                                                                                                          ) [ArrayIndexer]
                                                                                                                        ) [ElementAccessDesignator]
                                                                                                                      ) [AssignmentHeader]
                                                                                                                      AssignmentFooter(
                                                                                                                        AssignOperator(
                                                                                                                        ) [AssignOperator]
                                                                                                                        LeftExpression(
                                                                                                                          SingleTermExpression(
                                                                                                                            NoSign(
                                                                                                                            ) [NoSign]
                                                                                                                            SingleFactorTerm(
                                                                                                                              ConstantFactor(
                                                                                                                                CharConstantFactor(
                                                                                                                                 S
                                                                                                                                ) [CharConstantFactor]
                                                                                                                              ) [ConstantFactor]
                                                                                                                            ) [SingleFactorTerm]
                                                                                                                          ) [SingleTermExpression]
                                                                                                                        ) [LeftExpression]
                                                                                                                      ) [AssignmentFooter]
                                                                                                                    ) [AssignmentDesignatorStatement]
                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                ) [MultipleStatements]
                                                                                                                DesignatorBasedStatement(
                                                                                                                  AssignmentDesignatorStatement(
                                                                                                                    AssignmentHeader(
                                                                                                                      ElementAccessDesignator(
                                                                                                                        MemberAccessDesignator(
                                                                                                                          IdentifierDesignator(
                                                                                                                           s
                                                                                                                          ) [IdentifierDesignator]
                                                                                                                         arr
                                                                                                                        ) [MemberAccessDesignator]
                                                                                                                        ArrayIndexer(
                                                                                                                          LeftExpression(
                                                                                                                            SingleTermExpression(
                                                                                                                              NoSign(
                                                                                                                              ) [NoSign]
                                                                                                                              SingleFactorTerm(
                                                                                                                                ConstantFactor(
                                                                                                                                  IntConstantFactor(
                                                                                                                                   1
                                                                                                                                  ) [IntConstantFactor]
                                                                                                                                ) [ConstantFactor]
                                                                                                                              ) [SingleFactorTerm]
                                                                                                                            ) [SingleTermExpression]
                                                                                                                          ) [LeftExpression]
                                                                                                                        ) [ArrayIndexer]
                                                                                                                      ) [ElementAccessDesignator]
                                                                                                                    ) [AssignmentHeader]
                                                                                                                    AssignmentFooter(
                                                                                                                      AssignOperator(
                                                                                                                      ) [AssignOperator]
                                                                                                                      LeftExpression(
                                                                                                                        SingleTermExpression(
                                                                                                                          NoSign(
                                                                                                                          ) [NoSign]
                                                                                                                          SingleFactorTerm(
                                                                                                                            ConstantFactor(
                                                                                                                              CharConstantFactor(
                                                                                                                               a
                                                                                                                              ) [CharConstantFactor]
                                                                                                                            ) [ConstantFactor]
                                                                                                                          ) [SingleFactorTerm]
                                                                                                                        ) [SingleTermExpression]
                                                                                                                      ) [LeftExpression]
                                                                                                                    ) [AssignmentFooter]
                                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                                ) [DesignatorBasedStatement]
                                                                                                              ) [MultipleStatements]
                                                                                                              DesignatorBasedStatement(
                                                                                                                AssignmentDesignatorStatement(
                                                                                                                  AssignmentHeader(
                                                                                                                    ElementAccessDesignator(
                                                                                                                      MemberAccessDesignator(
                                                                                                                        IdentifierDesignator(
                                                                                                                         s
                                                                                                                        ) [IdentifierDesignator]
                                                                                                                       arr
                                                                                                                      ) [MemberAccessDesignator]
                                                                                                                      ArrayIndexer(
                                                                                                                        LeftExpression(
                                                                                                                          SingleTermExpression(
                                                                                                                            NoSign(
                                                                                                                            ) [NoSign]
                                                                                                                            SingleFactorTerm(
                                                                                                                              ConstantFactor(
                                                                                                                                IntConstantFactor(
                                                                                                                                 2
                                                                                                                                ) [IntConstantFactor]
                                                                                                                              ) [ConstantFactor]
                                                                                                                            ) [SingleFactorTerm]
                                                                                                                          ) [SingleTermExpression]
                                                                                                                        ) [LeftExpression]
                                                                                                                      ) [ArrayIndexer]
                                                                                                                    ) [ElementAccessDesignator]
                                                                                                                  ) [AssignmentHeader]
                                                                                                                  AssignmentFooter(
                                                                                                                    AssignOperator(
                                                                                                                    ) [AssignOperator]
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          ConstantFactor(
                                                                                                                            CharConstantFactor(
                                                                                                                             m
                                                                                                                            ) [CharConstantFactor]
                                                                                                                          ) [ConstantFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                  ) [AssignmentFooter]
                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                              ) [DesignatorBasedStatement]
                                                                                                            ) [MultipleStatements]
                                                                                                            DesignatorBasedStatement(
                                                                                                              AssignmentDesignatorStatement(
                                                                                                                AssignmentHeader(
                                                                                                                  ElementAccessDesignator(
                                                                                                                    MemberAccessDesignator(
                                                                                                                      IdentifierDesignator(
                                                                                                                       s
                                                                                                                      ) [IdentifierDesignator]
                                                                                                                     arr
                                                                                                                    ) [MemberAccessDesignator]
                                                                                                                    ArrayIndexer(
                                                                                                                      LeftExpression(
                                                                                                                        SingleTermExpression(
                                                                                                                          NoSign(
                                                                                                                          ) [NoSign]
                                                                                                                          SingleFactorTerm(
                                                                                                                            ConstantFactor(
                                                                                                                              IntConstantFactor(
                                                                                                                               3
                                                                                                                              ) [IntConstantFactor]
                                                                                                                            ) [ConstantFactor]
                                                                                                                          ) [SingleFactorTerm]
                                                                                                                        ) [SingleTermExpression]
                                                                                                                      ) [LeftExpression]
                                                                                                                    ) [ArrayIndexer]
                                                                                                                  ) [ElementAccessDesignator]
                                                                                                                ) [AssignmentHeader]
                                                                                                                AssignmentFooter(
                                                                                                                  AssignOperator(
                                                                                                                  ) [AssignOperator]
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        ConstantFactor(
                                                                                                                          CharConstantFactor(
                                                                                                                           u
                                                                                                                          ) [CharConstantFactor]
                                                                                                                        ) [ConstantFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                ) [AssignmentFooter]
                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                            ) [DesignatorBasedStatement]
                                                                                                          ) [MultipleStatements]
                                                                                                          DesignatorBasedStatement(
                                                                                                            AssignmentDesignatorStatement(
                                                                                                              AssignmentHeader(
                                                                                                                ElementAccessDesignator(
                                                                                                                  MemberAccessDesignator(
                                                                                                                    IdentifierDesignator(
                                                                                                                     s
                                                                                                                    ) [IdentifierDesignator]
                                                                                                                   arr
                                                                                                                  ) [MemberAccessDesignator]
                                                                                                                  ArrayIndexer(
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          ConstantFactor(
                                                                                                                            IntConstantFactor(
                                                                                                                             4
                                                                                                                            ) [IntConstantFactor]
                                                                                                                          ) [ConstantFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                  ) [ArrayIndexer]
                                                                                                                ) [ElementAccessDesignator]
                                                                                                              ) [AssignmentHeader]
                                                                                                              AssignmentFooter(
                                                                                                                AssignOperator(
                                                                                                                ) [AssignOperator]
                                                                                                                LeftExpression(
                                                                                                                  SingleTermExpression(
                                                                                                                    NoSign(
                                                                                                                    ) [NoSign]
                                                                                                                    SingleFactorTerm(
                                                                                                                      ConstantFactor(
                                                                                                                        CharConstantFactor(
                                                                                                                         e
                                                                                                                        ) [CharConstantFactor]
                                                                                                                      ) [ConstantFactor]
                                                                                                                    ) [SingleFactorTerm]
                                                                                                                  ) [SingleTermExpression]
                                                                                                                ) [LeftExpression]
                                                                                                              ) [AssignmentFooter]
                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                          ) [DesignatorBasedStatement]
                                                                                                        ) [MultipleStatements]
                                                                                                        DesignatorBasedStatement(
                                                                                                          AssignmentDesignatorStatement(
                                                                                                            AssignmentHeader(
                                                                                                              ElementAccessDesignator(
                                                                                                                MemberAccessDesignator(
                                                                                                                  IdentifierDesignator(
                                                                                                                   s
                                                                                                                  ) [IdentifierDesignator]
                                                                                                                 arr
                                                                                                                ) [MemberAccessDesignator]
                                                                                                                ArrayIndexer(
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        ConstantFactor(
                                                                                                                          IntConstantFactor(
                                                                                                                           5
                                                                                                                          ) [IntConstantFactor]
                                                                                                                        ) [ConstantFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                ) [ArrayIndexer]
                                                                                                              ) [ElementAccessDesignator]
                                                                                                            ) [AssignmentHeader]
                                                                                                            AssignmentFooter(
                                                                                                              AssignOperator(
                                                                                                              ) [AssignOperator]
                                                                                                              LeftExpression(
                                                                                                                SingleTermExpression(
                                                                                                                  NoSign(
                                                                                                                  ) [NoSign]
                                                                                                                  SingleFactorTerm(
                                                                                                                    ConstantFactor(
                                                                                                                      CharConstantFactor(
                                                                                                                       l
                                                                                                                      ) [CharConstantFactor]
                                                                                                                    ) [ConstantFactor]
                                                                                                                  ) [SingleFactorTerm]
                                                                                                                ) [SingleTermExpression]
                                                                                                              ) [LeftExpression]
                                                                                                            ) [AssignmentFooter]
                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                        ) [DesignatorBasedStatement]
                                                                                                      ) [MultipleStatements]
                                                                                                      DesignatorBasedStatement(
                                                                                                        MethodCallDesignatorStatement(
                                                                                                          MethodCall(
                                                                                                            MethodCallHeader(
                                                                                                              MemberAccessDesignator(
                                                                                                                IdentifierDesignator(
                                                                                                                 butcher
                                                                                                                ) [IdentifierDesignator]
                                                                                                               setName
                                                                                                              ) [MemberAccessDesignator]
                                                                                                            ) [MethodCallHeader]
                                                                                                            ActualParameters(
                                                                                                              SingleActualParameter(
                                                                                                                ActualParameter(
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        DesignatorFactor(
                                                                                                                          IdentifierDesignator(
                                                                                                                           s
                                                                                                                          ) [IdentifierDesignator]
                                                                                                                        ) [DesignatorFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                ) [ActualParameter]
                                                                                                              ) [SingleActualParameter]
                                                                                                            ) [ActualParameters]
                                                                                                          ) [MethodCall]
                                                                                                        ) [MethodCallDesignatorStatement]
                                                                                                      ) [DesignatorBasedStatement]
                                                                                                    ) [MultipleStatements]
                                                                                                    DesignatorBasedStatement(
                                                                                                      AssignmentDesignatorStatement(
                                                                                                        AssignmentHeader(
                                                                                                          MemberAccessDesignator(
                                                                                                            IdentifierDesignator(
                                                                                                             butcher
                                                                                                            ) [IdentifierDesignator]
                                                                                                           helper
                                                                                                          ) [MemberAccessDesignator]
                                                                                                        ) [AssignmentHeader]
                                                                                                        AssignmentFooter(
                                                                                                          AssignOperator(
                                                                                                          ) [AssignOperator]
                                                                                                          LeftExpression(
                                                                                                            SingleTermExpression(
                                                                                                              NoSign(
                                                                                                              ) [NoSign]
                                                                                                              SingleFactorTerm(
                                                                                                                DesignatorFactor(
                                                                                                                  ElementAccessDesignator(
                                                                                                                    IdentifierDesignator(
                                                                                                                     workers
                                                                                                                    ) [IdentifierDesignator]
                                                                                                                    ArrayIndexer(
                                                                                                                      LeftExpression(
                                                                                                                        SingleTermExpression(
                                                                                                                          NoSign(
                                                                                                                          ) [NoSign]
                                                                                                                          SingleFactorTerm(
                                                                                                                            ConstantFactor(
                                                                                                                              IntConstantFactor(
                                                                                                                               2
                                                                                                                              ) [IntConstantFactor]
                                                                                                                            ) [ConstantFactor]
                                                                                                                          ) [SingleFactorTerm]
                                                                                                                        ) [SingleTermExpression]
                                                                                                                      ) [LeftExpression]
                                                                                                                    ) [ArrayIndexer]
                                                                                                                  ) [ElementAccessDesignator]
                                                                                                                ) [DesignatorFactor]
                                                                                                              ) [SingleFactorTerm]
                                                                                                            ) [SingleTermExpression]
                                                                                                          ) [LeftExpression]
                                                                                                        ) [AssignmentFooter]
                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                    ) [DesignatorBasedStatement]
                                                                                                  ) [MultipleStatements]
                                                                                                  DesignatorBasedStatement(
                                                                                                    MethodCallDesignatorStatement(
                                                                                                      MethodCall(
                                                                                                        MethodCallHeader(
                                                                                                          MemberAccessDesignator(
                                                                                                            IdentifierDesignator(
                                                                                                             butcher
                                                                                                            ) [IdentifierDesignator]
                                                                                                           setYearOfBirth
                                                                                                          ) [MemberAccessDesignator]
                                                                                                        ) [MethodCallHeader]
                                                                                                        ActualParameters(
                                                                                                          SingleActualParameter(
                                                                                                            ActualParameter(
                                                                                                              LeftExpression(
                                                                                                                SingleTermExpression(
                                                                                                                  NoSign(
                                                                                                                  ) [NoSign]
                                                                                                                  SingleFactorTerm(
                                                                                                                    ConstantFactor(
                                                                                                                      IntConstantFactor(
                                                                                                                       1963
                                                                                                                      ) [IntConstantFactor]
                                                                                                                    ) [ConstantFactor]
                                                                                                                  ) [SingleFactorTerm]
                                                                                                                ) [SingleTermExpression]
                                                                                                              ) [LeftExpression]
                                                                                                            ) [ActualParameter]
                                                                                                          ) [SingleActualParameter]
                                                                                                        ) [ActualParameters]
                                                                                                      ) [MethodCall]
                                                                                                    ) [MethodCallDesignatorStatement]
                                                                                                  ) [DesignatorBasedStatement]
                                                                                                ) [MultipleStatements]
                                                                                                DesignatorBasedStatement(
                                                                                                  AssignmentDesignatorStatement(
                                                                                                    AssignmentHeader(
                                                                                                      ElementAccessDesignator(
                                                                                                        IdentifierDesignator(
                                                                                                         workers
                                                                                                        ) [IdentifierDesignator]
                                                                                                        ArrayIndexer(
                                                                                                          LeftExpression(
                                                                                                            SingleTermExpression(
                                                                                                              NoSign(
                                                                                                              ) [NoSign]
                                                                                                              SingleFactorTerm(
                                                                                                                ConstantFactor(
                                                                                                                  IntConstantFactor(
                                                                                                                   3
                                                                                                                  ) [IntConstantFactor]
                                                                                                                ) [ConstantFactor]
                                                                                                              ) [SingleFactorTerm]
                                                                                                            ) [SingleTermExpression]
                                                                                                          ) [LeftExpression]
                                                                                                        ) [ArrayIndexer]
                                                                                                      ) [ElementAccessDesignator]
                                                                                                    ) [AssignmentHeader]
                                                                                                    AssignmentFooter(
                                                                                                      AssignOperator(
                                                                                                      ) [AssignOperator]
                                                                                                      LeftExpression(
                                                                                                        SingleTermExpression(
                                                                                                          NoSign(
                                                                                                          ) [NoSign]
                                                                                                          SingleFactorTerm(
                                                                                                            DesignatorFactor(
                                                                                                              IdentifierDesignator(
                                                                                                               butcher
                                                                                                              ) [IdentifierDesignator]
                                                                                                            ) [DesignatorFactor]
                                                                                                          ) [SingleFactorTerm]
                                                                                                        ) [SingleTermExpression]
                                                                                                      ) [LeftExpression]
                                                                                                    ) [AssignmentFooter]
                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                ) [DesignatorBasedStatement]
                                                                                              ) [MultipleStatements]
                                                                                              DesignatorBasedStatement(
                                                                                                AssignmentDesignatorStatement(
                                                                                                  AssignmentHeader(
                                                                                                    IdentifierDesignator(
                                                                                                     baker
                                                                                                    ) [IdentifierDesignator]
                                                                                                  ) [AssignmentHeader]
                                                                                                  AssignmentFooter(
                                                                                                    AssignOperator(
                                                                                                    ) [AssignOperator]
                                                                                                    LeftExpression(
                                                                                                      SingleTermExpression(
                                                                                                        NoSign(
                                                                                                        ) [NoSign]
                                                                                                        SingleFactorTerm(
                                                                                                          AllocatorFactor(
                                                                                                            Type(
                                                                                                             Baker
                                                                                                            ) [Type]
                                                                                                            NoArrayIndexer(
                                                                                                            ) [NoArrayIndexer]
                                                                                                          ) [AllocatorFactor]
                                                                                                        ) [SingleFactorTerm]
                                                                                                      ) [SingleTermExpression]
                                                                                                    ) [LeftExpression]
                                                                                                  ) [AssignmentFooter]
                                                                                                ) [AssignmentDesignatorStatement]
                                                                                              ) [DesignatorBasedStatement]
                                                                                            ) [MultipleStatements]
                                                                                            DesignatorBasedStatement(
                                                                                              AssignmentDesignatorStatement(
                                                                                                AssignmentHeader(
                                                                                                  IdentifierDesignator(
                                                                                                   s
                                                                                                  ) [IdentifierDesignator]
                                                                                                ) [AssignmentHeader]
                                                                                                AssignmentFooter(
                                                                                                  AssignOperator(
                                                                                                  ) [AssignOperator]
                                                                                                  LeftExpression(
                                                                                                    SingleTermExpression(
                                                                                                      NoSign(
                                                                                                      ) [NoSign]
                                                                                                      SingleFactorTerm(
                                                                                                        AllocatorFactor(
                                                                                                          Type(
                                                                                                           String
                                                                                                          ) [Type]
                                                                                                          NoArrayIndexer(
                                                                                                          ) [NoArrayIndexer]
                                                                                                        ) [AllocatorFactor]
                                                                                                      ) [SingleFactorTerm]
                                                                                                    ) [SingleTermExpression]
                                                                                                  ) [LeftExpression]
                                                                                                ) [AssignmentFooter]
                                                                                              ) [AssignmentDesignatorStatement]
                                                                                            ) [DesignatorBasedStatement]
                                                                                          ) [MultipleStatements]
                                                                                          DesignatorBasedStatement(
                                                                                            AssignmentDesignatorStatement(
                                                                                              AssignmentHeader(
                                                                                                MemberAccessDesignator(
                                                                                                  IdentifierDesignator(
                                                                                                   s
                                                                                                  ) [IdentifierDesignator]
                                                                                                 arr
                                                                                                ) [MemberAccessDesignator]
                                                                                              ) [AssignmentHeader]
                                                                                              AssignmentFooter(
                                                                                                AssignOperator(
                                                                                                ) [AssignOperator]
                                                                                                LeftExpression(
                                                                                                  SingleTermExpression(
                                                                                                    NoSign(
                                                                                                    ) [NoSign]
                                                                                                    SingleFactorTerm(
                                                                                                      AllocatorFactor(
                                                                                                        Type(
                                                                                                         char
                                                                                                        ) [Type]
                                                                                                        SingleArrayIndexer(
                                                                                                          ArrayIndexer(
                                                                                                            LeftExpression(
                                                                                                              SingleTermExpression(
                                                                                                                NoSign(
                                                                                                                ) [NoSign]
                                                                                                                SingleFactorTerm(
                                                                                                                  ConstantFactor(
                                                                                                                    IntConstantFactor(
                                                                                                                     5
                                                                                                                    ) [IntConstantFactor]
                                                                                                                  ) [ConstantFactor]
                                                                                                                ) [SingleFactorTerm]
                                                                                                              ) [SingleTermExpression]
                                                                                                            ) [LeftExpression]
                                                                                                          ) [ArrayIndexer]
                                                                                                        ) [SingleArrayIndexer]
                                                                                                      ) [AllocatorFactor]
                                                                                                    ) [SingleFactorTerm]
                                                                                                  ) [SingleTermExpression]
                                                                                                ) [LeftExpression]
                                                                                              ) [AssignmentFooter]
                                                                                            ) [AssignmentDesignatorStatement]
                                                                                          ) [DesignatorBasedStatement]
                                                                                        ) [MultipleStatements]
                                                                                        DesignatorBasedStatement(
                                                                                          AssignmentDesignatorStatement(
                                                                                            AssignmentHeader(
                                                                                              ElementAccessDesignator(
                                                                                                MemberAccessDesignator(
                                                                                                  IdentifierDesignator(
                                                                                                   s
                                                                                                  ) [IdentifierDesignator]
                                                                                                 arr
                                                                                                ) [MemberAccessDesignator]
                                                                                                ArrayIndexer(
                                                                                                  LeftExpression(
                                                                                                    SingleTermExpression(
                                                                                                      NoSign(
                                                                                                      ) [NoSign]
                                                                                                      SingleFactorTerm(
                                                                                                        ConstantFactor(
                                                                                                          IntConstantFactor(
                                                                                                           0
                                                                                                          ) [IntConstantFactor]
                                                                                                        ) [ConstantFactor]
                                                                                                      ) [SingleFactorTerm]
                                                                                                    ) [SingleTermExpression]
                                                                                                  ) [LeftExpression]
                                                                                                ) [ArrayIndexer]
                                                                                              ) [ElementAccessDesignator]
                                                                                            ) [AssignmentHeader]
                                                                                            AssignmentFooter(
                                                                                              AssignOperator(
                                                                                              ) [AssignOperator]
                                                                                              LeftExpression(
                                                                                                SingleTermExpression(
                                                                                                  NoSign(
                                                                                                  ) [NoSign]
                                                                                                  SingleFactorTerm(
                                                                                                    ConstantFactor(
                                                                                                      CharConstantFactor(
                                                                                                       B
                                                                                                      ) [CharConstantFactor]
                                                                                                    ) [ConstantFactor]
                                                                                                  ) [SingleFactorTerm]
                                                                                                ) [SingleTermExpression]
                                                                                              ) [LeftExpression]
                                                                                            ) [AssignmentFooter]
                                                                                          ) [AssignmentDesignatorStatement]
                                                                                        ) [DesignatorBasedStatement]
                                                                                      ) [MultipleStatements]
                                                                                      DesignatorBasedStatement(
                                                                                        AssignmentDesignatorStatement(
                                                                                          AssignmentHeader(
                                                                                            ElementAccessDesignator(
                                                                                              MemberAccessDesignator(
                                                                                                IdentifierDesignator(
                                                                                                 s
                                                                                                ) [IdentifierDesignator]
                                                                                               arr
                                                                                              ) [MemberAccessDesignator]
                                                                                              ArrayIndexer(
                                                                                                LeftExpression(
                                                                                                  SingleTermExpression(
                                                                                                    NoSign(
                                                                                                    ) [NoSign]
                                                                                                    SingleFactorTerm(
                                                                                                      ConstantFactor(
                                                                                                        IntConstantFactor(
                                                                                                         1
                                                                                                        ) [IntConstantFactor]
                                                                                                      ) [ConstantFactor]
                                                                                                    ) [SingleFactorTerm]
                                                                                                  ) [SingleTermExpression]
                                                                                                ) [LeftExpression]
                                                                                              ) [ArrayIndexer]
                                                                                            ) [ElementAccessDesignator]
                                                                                          ) [AssignmentHeader]
                                                                                          AssignmentFooter(
                                                                                            AssignOperator(
                                                                                            ) [AssignOperator]
                                                                                            LeftExpression(
                                                                                              SingleTermExpression(
                                                                                                NoSign(
                                                                                                ) [NoSign]
                                                                                                SingleFactorTerm(
                                                                                                  ConstantFactor(
                                                                                                    CharConstantFactor(
                                                                                                     r
                                                                                                    ) [CharConstantFactor]
                                                                                                  ) [ConstantFactor]
                                                                                                ) [SingleFactorTerm]
                                                                                              ) [SingleTermExpression]
                                                                                            ) [LeftExpression]
                                                                                          ) [AssignmentFooter]
                                                                                        ) [AssignmentDesignatorStatement]
                                                                                      ) [DesignatorBasedStatement]
                                                                                    ) [MultipleStatements]
                                                                                    DesignatorBasedStatement(
                                                                                      AssignmentDesignatorStatement(
                                                                                        AssignmentHeader(
                                                                                          ElementAccessDesignator(
                                                                                            MemberAccessDesignator(
                                                                                              IdentifierDesignator(
                                                                                               s
                                                                                              ) [IdentifierDesignator]
                                                                                             arr
                                                                                            ) [MemberAccessDesignator]
                                                                                            ArrayIndexer(
                                                                                              LeftExpression(
                                                                                                SingleTermExpression(
                                                                                                  NoSign(
                                                                                                  ) [NoSign]
                                                                                                  SingleFactorTerm(
                                                                                                    ConstantFactor(
                                                                                                      IntConstantFactor(
                                                                                                       2
                                                                                                      ) [IntConstantFactor]
                                                                                                    ) [ConstantFactor]
                                                                                                  ) [SingleFactorTerm]
                                                                                                ) [SingleTermExpression]
                                                                                              ) [LeftExpression]
                                                                                            ) [ArrayIndexer]
                                                                                          ) [ElementAccessDesignator]
                                                                                        ) [AssignmentHeader]
                                                                                        AssignmentFooter(
                                                                                          AssignOperator(
                                                                                          ) [AssignOperator]
                                                                                          LeftExpression(
                                                                                            SingleTermExpression(
                                                                                              NoSign(
                                                                                              ) [NoSign]
                                                                                              SingleFactorTerm(
                                                                                                ConstantFactor(
                                                                                                  CharConstantFactor(
                                                                                                   e
                                                                                                  ) [CharConstantFactor]
                                                                                                ) [ConstantFactor]
                                                                                              ) [SingleFactorTerm]
                                                                                            ) [SingleTermExpression]
                                                                                          ) [LeftExpression]
                                                                                        ) [AssignmentFooter]
                                                                                      ) [AssignmentDesignatorStatement]
                                                                                    ) [DesignatorBasedStatement]
                                                                                  ) [MultipleStatements]
                                                                                  DesignatorBasedStatement(
                                                                                    AssignmentDesignatorStatement(
                                                                                      AssignmentHeader(
                                                                                        ElementAccessDesignator(
                                                                                          MemberAccessDesignator(
                                                                                            IdentifierDesignator(
                                                                                             s
                                                                                            ) [IdentifierDesignator]
                                                                                           arr
                                                                                          ) [MemberAccessDesignator]
                                                                                          ArrayIndexer(
                                                                                            LeftExpression(
                                                                                              SingleTermExpression(
                                                                                                NoSign(
                                                                                                ) [NoSign]
                                                                                                SingleFactorTerm(
                                                                                                  ConstantFactor(
                                                                                                    IntConstantFactor(
                                                                                                     3
                                                                                                    ) [IntConstantFactor]
                                                                                                  ) [ConstantFactor]
                                                                                                ) [SingleFactorTerm]
                                                                                              ) [SingleTermExpression]
                                                                                            ) [LeftExpression]
                                                                                          ) [ArrayIndexer]
                                                                                        ) [ElementAccessDesignator]
                                                                                      ) [AssignmentHeader]
                                                                                      AssignmentFooter(
                                                                                        AssignOperator(
                                                                                        ) [AssignOperator]
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              ConstantFactor(
                                                                                                CharConstantFactor(
                                                                                                 a
                                                                                                ) [CharConstantFactor]
                                                                                              ) [ConstantFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                      ) [AssignmentFooter]
                                                                                    ) [AssignmentDesignatorStatement]
                                                                                  ) [DesignatorBasedStatement]
                                                                                ) [MultipleStatements]
                                                                                DesignatorBasedStatement(
                                                                                  AssignmentDesignatorStatement(
                                                                                    AssignmentHeader(
                                                                                      ElementAccessDesignator(
                                                                                        MemberAccessDesignator(
                                                                                          IdentifierDesignator(
                                                                                           s
                                                                                          ) [IdentifierDesignator]
                                                                                         arr
                                                                                        ) [MemberAccessDesignator]
                                                                                        ArrayIndexer(
                                                                                          LeftExpression(
                                                                                            SingleTermExpression(
                                                                                              NoSign(
                                                                                              ) [NoSign]
                                                                                              SingleFactorTerm(
                                                                                                ConstantFactor(
                                                                                                  IntConstantFactor(
                                                                                                   4
                                                                                                  ) [IntConstantFactor]
                                                                                                ) [ConstantFactor]
                                                                                              ) [SingleFactorTerm]
                                                                                            ) [SingleTermExpression]
                                                                                          ) [LeftExpression]
                                                                                        ) [ArrayIndexer]
                                                                                      ) [ElementAccessDesignator]
                                                                                    ) [AssignmentHeader]
                                                                                    AssignmentFooter(
                                                                                      AssignOperator(
                                                                                      ) [AssignOperator]
                                                                                      LeftExpression(
                                                                                        SingleTermExpression(
                                                                                          NoSign(
                                                                                          ) [NoSign]
                                                                                          SingleFactorTerm(
                                                                                            ConstantFactor(
                                                                                              CharConstantFactor(
                                                                                               d
                                                                                              ) [CharConstantFactor]
                                                                                            ) [ConstantFactor]
                                                                                          ) [SingleFactorTerm]
                                                                                        ) [SingleTermExpression]
                                                                                      ) [LeftExpression]
                                                                                    ) [AssignmentFooter]
                                                                                  ) [AssignmentDesignatorStatement]
                                                                                ) [DesignatorBasedStatement]
                                                                              ) [MultipleStatements]
                                                                              DesignatorBasedStatement(
                                                                                MethodCallDesignatorStatement(
                                                                                  MethodCall(
                                                                                    MethodCallHeader(
                                                                                      MemberAccessDesignator(
                                                                                        IdentifierDesignator(
                                                                                         baker
                                                                                        ) [IdentifierDesignator]
                                                                                       setShopName
                                                                                      ) [MemberAccessDesignator]
                                                                                    ) [MethodCallHeader]
                                                                                    ActualParameters(
                                                                                      SingleActualParameter(
                                                                                        ActualParameter(
                                                                                          LeftExpression(
                                                                                            SingleTermExpression(
                                                                                              NoSign(
                                                                                              ) [NoSign]
                                                                                              SingleFactorTerm(
                                                                                                DesignatorFactor(
                                                                                                  IdentifierDesignator(
                                                                                                   s
                                                                                                  ) [IdentifierDesignator]
                                                                                                ) [DesignatorFactor]
                                                                                              ) [SingleFactorTerm]
                                                                                            ) [SingleTermExpression]
                                                                                          ) [LeftExpression]
                                                                                        ) [ActualParameter]
                                                                                      ) [SingleActualParameter]
                                                                                    ) [ActualParameters]
                                                                                  ) [MethodCall]
                                                                                ) [MethodCallDesignatorStatement]
                                                                              ) [DesignatorBasedStatement]
                                                                            ) [MultipleStatements]
                                                                            DesignatorBasedStatement(
                                                                              AssignmentDesignatorStatement(
                                                                                AssignmentHeader(
                                                                                  IdentifierDesignator(
                                                                                   s
                                                                                  ) [IdentifierDesignator]
                                                                                ) [AssignmentHeader]
                                                                                AssignmentFooter(
                                                                                  AssignOperator(
                                                                                  ) [AssignOperator]
                                                                                  LeftExpression(
                                                                                    SingleTermExpression(
                                                                                      NoSign(
                                                                                      ) [NoSign]
                                                                                      SingleFactorTerm(
                                                                                        AllocatorFactor(
                                                                                          Type(
                                                                                           String
                                                                                          ) [Type]
                                                                                          NoArrayIndexer(
                                                                                          ) [NoArrayIndexer]
                                                                                        ) [AllocatorFactor]
                                                                                      ) [SingleFactorTerm]
                                                                                    ) [SingleTermExpression]
                                                                                  ) [LeftExpression]
                                                                                ) [AssignmentFooter]
                                                                              ) [AssignmentDesignatorStatement]
                                                                            ) [DesignatorBasedStatement]
                                                                          ) [MultipleStatements]
                                                                          DesignatorBasedStatement(
                                                                            AssignmentDesignatorStatement(
                                                                              AssignmentHeader(
                                                                                MemberAccessDesignator(
                                                                                  IdentifierDesignator(
                                                                                   s
                                                                                  ) [IdentifierDesignator]
                                                                                 arr
                                                                                ) [MemberAccessDesignator]
                                                                              ) [AssignmentHeader]
                                                                              AssignmentFooter(
                                                                                AssignOperator(
                                                                                ) [AssignOperator]
                                                                                LeftExpression(
                                                                                  SingleTermExpression(
                                                                                    NoSign(
                                                                                    ) [NoSign]
                                                                                    SingleFactorTerm(
                                                                                      AllocatorFactor(
                                                                                        Type(
                                                                                         char
                                                                                        ) [Type]
                                                                                        SingleArrayIndexer(
                                                                                          ArrayIndexer(
                                                                                            LeftExpression(
                                                                                              SingleTermExpression(
                                                                                                NoSign(
                                                                                                ) [NoSign]
                                                                                                SingleFactorTerm(
                                                                                                  ConstantFactor(
                                                                                                    IntConstantFactor(
                                                                                                     7
                                                                                                    ) [IntConstantFactor]
                                                                                                  ) [ConstantFactor]
                                                                                                ) [SingleFactorTerm]
                                                                                              ) [SingleTermExpression]
                                                                                            ) [LeftExpression]
                                                                                          ) [ArrayIndexer]
                                                                                        ) [SingleArrayIndexer]
                                                                                      ) [AllocatorFactor]
                                                                                    ) [SingleFactorTerm]
                                                                                  ) [SingleTermExpression]
                                                                                ) [LeftExpression]
                                                                              ) [AssignmentFooter]
                                                                            ) [AssignmentDesignatorStatement]
                                                                          ) [DesignatorBasedStatement]
                                                                        ) [MultipleStatements]
                                                                        DesignatorBasedStatement(
                                                                          AssignmentDesignatorStatement(
                                                                            AssignmentHeader(
                                                                              ElementAccessDesignator(
                                                                                MemberAccessDesignator(
                                                                                  IdentifierDesignator(
                                                                                   s
                                                                                  ) [IdentifierDesignator]
                                                                                 arr
                                                                                ) [MemberAccessDesignator]
                                                                                ArrayIndexer(
                                                                                  LeftExpression(
                                                                                    SingleTermExpression(
                                                                                      NoSign(
                                                                                      ) [NoSign]
                                                                                      SingleFactorTerm(
                                                                                        ConstantFactor(
                                                                                          IntConstantFactor(
                                                                                           0
                                                                                          ) [IntConstantFactor]
                                                                                        ) [ConstantFactor]
                                                                                      ) [SingleFactorTerm]
                                                                                    ) [SingleTermExpression]
                                                                                  ) [LeftExpression]
                                                                                ) [ArrayIndexer]
                                                                              ) [ElementAccessDesignator]
                                                                            ) [AssignmentHeader]
                                                                            AssignmentFooter(
                                                                              AssignOperator(
                                                                              ) [AssignOperator]
                                                                              LeftExpression(
                                                                                SingleTermExpression(
                                                                                  NoSign(
                                                                                  ) [NoSign]
                                                                                  SingleFactorTerm(
                                                                                    ConstantFactor(
                                                                                      CharConstantFactor(
                                                                                       M
                                                                                      ) [CharConstantFactor]
                                                                                    ) [ConstantFactor]
                                                                                  ) [SingleFactorTerm]
                                                                                ) [SingleTermExpression]
                                                                              ) [LeftExpression]
                                                                            ) [AssignmentFooter]
                                                                          ) [AssignmentDesignatorStatement]
                                                                        ) [DesignatorBasedStatement]
                                                                      ) [MultipleStatements]
                                                                      DesignatorBasedStatement(
                                                                        AssignmentDesignatorStatement(
                                                                          AssignmentHeader(
                                                                            ElementAccessDesignator(
                                                                              MemberAccessDesignator(
                                                                                IdentifierDesignator(
                                                                                 s
                                                                                ) [IdentifierDesignator]
                                                                               arr
                                                                              ) [MemberAccessDesignator]
                                                                              ArrayIndexer(
                                                                                LeftExpression(
                                                                                  SingleTermExpression(
                                                                                    NoSign(
                                                                                    ) [NoSign]
                                                                                    SingleFactorTerm(
                                                                                      ConstantFactor(
                                                                                        IntConstantFactor(
                                                                                         1
                                                                                        ) [IntConstantFactor]
                                                                                      ) [ConstantFactor]
                                                                                    ) [SingleFactorTerm]
                                                                                  ) [SingleTermExpression]
                                                                                ) [LeftExpression]
                                                                              ) [ArrayIndexer]
                                                                            ) [ElementAccessDesignator]
                                                                          ) [AssignmentHeader]
                                                                          AssignmentFooter(
                                                                            AssignOperator(
                                                                            ) [AssignOperator]
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    CharConstantFactor(
                                                                                     i
                                                                                    ) [CharConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                          ) [AssignmentFooter]
                                                                        ) [AssignmentDesignatorStatement]
                                                                      ) [DesignatorBasedStatement]
                                                                    ) [MultipleStatements]
                                                                    DesignatorBasedStatement(
                                                                      AssignmentDesignatorStatement(
                                                                        AssignmentHeader(
                                                                          ElementAccessDesignator(
                                                                            MemberAccessDesignator(
                                                                              IdentifierDesignator(
                                                                               s
                                                                              ) [IdentifierDesignator]
                                                                             arr
                                                                            ) [MemberAccessDesignator]
                                                                            ArrayIndexer(
                                                                              LeftExpression(
                                                                                SingleTermExpression(
                                                                                  NoSign(
                                                                                  ) [NoSign]
                                                                                  SingleFactorTerm(
                                                                                    ConstantFactor(
                                                                                      IntConstantFactor(
                                                                                       2
                                                                                      ) [IntConstantFactor]
                                                                                    ) [ConstantFactor]
                                                                                  ) [SingleFactorTerm]
                                                                                ) [SingleTermExpression]
                                                                              ) [LeftExpression]
                                                                            ) [ArrayIndexer]
                                                                          ) [ElementAccessDesignator]
                                                                        ) [AssignmentHeader]
                                                                        AssignmentFooter(
                                                                          AssignOperator(
                                                                          ) [AssignOperator]
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                ConstantFactor(
                                                                                  CharConstantFactor(
                                                                                   r
                                                                                  ) [CharConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [AssignmentFooter]
                                                                      ) [AssignmentDesignatorStatement]
                                                                    ) [DesignatorBasedStatement]
                                                                  ) [MultipleStatements]
                                                                  DesignatorBasedStatement(
                                                                    AssignmentDesignatorStatement(
                                                                      AssignmentHeader(
                                                                        ElementAccessDesignator(
                                                                          MemberAccessDesignator(
                                                                            IdentifierDesignator(
                                                                             s
                                                                            ) [IdentifierDesignator]
                                                                           arr
                                                                          ) [MemberAccessDesignator]
                                                                          ArrayIndexer(
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     3
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                          ) [ArrayIndexer]
                                                                        ) [ElementAccessDesignator]
                                                                      ) [AssignmentHeader]
                                                                      AssignmentFooter(
                                                                        AssignOperator(
                                                                        ) [AssignOperator]
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                CharConstantFactor(
                                                                                 a
                                                                                ) [CharConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [AssignmentFooter]
                                                                    ) [AssignmentDesignatorStatement]
                                                                  ) [DesignatorBasedStatement]
                                                                ) [MultipleStatements]
                                                                DesignatorBasedStatement(
                                                                  AssignmentDesignatorStatement(
                                                                    AssignmentHeader(
                                                                      ElementAccessDesignator(
                                                                        MemberAccessDesignator(
                                                                          IdentifierDesignator(
                                                                           s
                                                                          ) [IdentifierDesignator]
                                                                         arr
                                                                        ) [MemberAccessDesignator]
                                                                        ArrayIndexer(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                ConstantFactor(
                                                                                  IntConstantFactor(
                                                                                   4
                                                                                  ) [IntConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [ArrayIndexer]
                                                                      ) [ElementAccessDesignator]
                                                                    ) [AssignmentHeader]
                                                                    AssignmentFooter(
                                                                      AssignOperator(
                                                                      ) [AssignOperator]
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              CharConstantFactor(
                                                                               n
                                                                              ) [CharConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [AssignmentFooter]
                                                                  ) [AssignmentDesignatorStatement]
                                                                ) [DesignatorBasedStatement]
                                                              ) [MultipleStatements]
                                                              DesignatorBasedStatement(
                                                                AssignmentDesignatorStatement(
                                                                  AssignmentHeader(
                                                                    ElementAccessDesignator(
                                                                      MemberAccessDesignator(
                                                                        IdentifierDesignator(
                                                                         s
                                                                        ) [IdentifierDesignator]
                                                                       arr
                                                                      ) [MemberAccessDesignator]
                                                                      ArrayIndexer(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 5
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ArrayIndexer]
                                                                    ) [ElementAccessDesignator]
                                                                  ) [AssignmentHeader]
                                                                  AssignmentFooter(
                                                                    AssignOperator(
                                                                    ) [AssignOperator]
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            CharConstantFactor(
                                                                             d
                                                                            ) [CharConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [AssignmentFooter]
                                                                ) [AssignmentDesignatorStatement]
                                                              ) [DesignatorBasedStatement]
                                                            ) [MultipleStatements]
                                                            DesignatorBasedStatement(
                                                              AssignmentDesignatorStatement(
                                                                AssignmentHeader(
                                                                  ElementAccessDesignator(
                                                                    MemberAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       s
                                                                      ) [IdentifierDesignator]
                                                                     arr
                                                                    ) [MemberAccessDesignator]
                                                                    ArrayIndexer(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               6
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ArrayIndexer]
                                                                  ) [ElementAccessDesignator]
                                                                ) [AssignmentHeader]
                                                                AssignmentFooter(
                                                                  AssignOperator(
                                                                  ) [AssignOperator]
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          CharConstantFactor(
                                                                           a
                                                                          ) [CharConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [AssignmentFooter]
                                                              ) [AssignmentDesignatorStatement]
                                                            ) [DesignatorBasedStatement]
                                                          ) [MultipleStatements]
                                                          DesignatorBasedStatement(
                                                            MethodCallDesignatorStatement(
                                                              MethodCall(
                                                                MethodCallHeader(
                                                                  MemberAccessDesignator(
                                                                    IdentifierDesignator(
                                                                     baker
                                                                    ) [IdentifierDesignator]
                                                                   setName
                                                                  ) [MemberAccessDesignator]
                                                                ) [MethodCallHeader]
                                                                ActualParameters(
                                                                  SingleActualParameter(
                                                                    ActualParameter(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            DesignatorFactor(
                                                                              IdentifierDesignator(
                                                                               s
                                                                              ) [IdentifierDesignator]
                                                                            ) [DesignatorFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ActualParameter]
                                                                  ) [SingleActualParameter]
                                                                ) [ActualParameters]
                                                              ) [MethodCall]
                                                            ) [MethodCallDesignatorStatement]
                                                          ) [DesignatorBasedStatement]
                                                        ) [MultipleStatements]
                                                        DesignatorBasedStatement(
                                                          MethodCallDesignatorStatement(
                                                            MethodCall(
                                                              MethodCallHeader(
                                                                MemberAccessDesignator(
                                                                  IdentifierDesignator(
                                                                   baker
                                                                  ) [IdentifierDesignator]
                                                                 setYearOfBirth
                                                                ) [MemberAccessDesignator]
                                                              ) [MethodCallHeader]
                                                              ActualParameters(
                                                                SingleActualParameter(
                                                                  ActualParameter(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            IntConstantFactor(
                                                                             1985
                                                                            ) [IntConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ActualParameter]
                                                                ) [SingleActualParameter]
                                                              ) [ActualParameters]
                                                            ) [MethodCall]
                                                          ) [MethodCallDesignatorStatement]
                                                        ) [DesignatorBasedStatement]
                                                      ) [MultipleStatements]
                                                      DesignatorBasedStatement(
                                                        AssignmentDesignatorStatement(
                                                          AssignmentHeader(
                                                            ElementAccessDesignator(
                                                              IdentifierDesignator(
                                                               workers
                                                              ) [IdentifierDesignator]
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        IntConstantFactor(
                                                                         4
                                                                        ) [IntConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [ElementAccessDesignator]
                                                          ) [AssignmentHeader]
                                                          AssignmentFooter(
                                                            AssignOperator(
                                                            ) [AssignOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     baker
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [AssignmentFooter]
                                                        ) [AssignmentDesignatorStatement]
                                                      ) [DesignatorBasedStatement]
                                                    ) [MultipleStatements]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                AllocatorFactor(
                                                                  Type(
                                                                   String
                                                                  ) [Type]
                                                                  NoArrayIndexer(
                                                                  ) [NoArrayIndexer]
                                                                ) [AllocatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [MultipleStatements]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        MemberAccessDesignator(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                         arr
                                                        ) [MemberAccessDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              AllocatorFactor(
                                                                Type(
                                                                 char
                                                                ) [Type]
                                                                SingleArrayIndexer(
                                                                  ArrayIndexer(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            IntConstantFactor(
                                                                             4
                                                                            ) [IntConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ArrayIndexer]
                                                                ) [SingleArrayIndexer]
                                                              ) [AllocatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      ElementAccessDesignator(
                                                        MemberAccessDesignator(
                                                          IdentifierDesignator(
                                                           s
                                                          ) [IdentifierDesignator]
                                                         arr
                                                        ) [MemberAccessDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   0
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              CharConstantFactor(
                                                               E
                                                              ) [CharConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    ElementAccessDesignator(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         s
                                                        ) [IdentifierDesignator]
                                                       arr
                                                      ) [MemberAccessDesignator]
                                                      ArrayIndexer(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 1
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ArrayIndexer]
                                                    ) [ElementAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            CharConstantFactor(
                                                             r
                                                            ) [CharConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  ElementAccessDesignator(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       s
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               2
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           i
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     s
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             3
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         c
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          MethodCallDesignatorStatement(
                                            MethodCall(
                                              MethodCallHeader(
                                                MemberAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     butcher
                                                    ) [IdentifierDesignator]
                                                   helper
                                                  ) [MemberAccessDesignator]
                                                 setName
                                                ) [MemberAccessDesignator]
                                              ) [MethodCallHeader]
                                              ActualParameters(
                                                SingleActualParameter(
                                                  ActualParameter(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             s
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ActualParameter]
                                                ) [SingleActualParameter]
                                              ) [ActualParameters]
                                            ) [MethodCall]
                                          ) [MethodCallDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      ForEachStatement(
                                        ForEachStatementHeader(
                                          ForEachStatementHeaderStart(
                                          ) [ForEachStatementHeaderStart]
                                         worker
                                          IdentifierDesignator(
                                           workers
                                          ) [IdentifierDesignator]
                                        ) [ForEachStatementHeader]
                                        StatementBlock(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              MethodCallDesignatorStatement(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    IdentifierDesignator(
                                                     printlnString
                                                    ) [IdentifierDesignator]
                                                  ) [MethodCallHeader]
                                                  ActualParameters(
                                                    SingleActualParameter(
                                                      ActualParameter(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              MethodCallFactor(
                                                                MethodCall(
                                                                  MethodCallHeader(
                                                                    MemberAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       worker
                                                                      ) [IdentifierDesignator]
                                                                     getName
                                                                    ) [MemberAccessDesignator]
                                                                  ) [MethodCallHeader]
                                                                  NoActualParameters(
                                                                  ) [NoActualParameters]
                                                                ) [MethodCall]
                                                              ) [MethodCallFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ActualParameter]
                                                    ) [SingleActualParameter]
                                                  ) [ActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                        ) [StatementBlock]
                                      ) [ForEachStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           s
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                AllocatorFactor(
                                                  Type(
                                                   String
                                                  ) [Type]
                                                  NoArrayIndexer(
                                                  ) [NoArrayIndexer]
                                                ) [AllocatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         s2
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              MethodCallFactor(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    MemberAccessDesignator(
                                                      ElementAccessDesignator(
                                                        IdentifierDesignator(
                                                         workers
                                                        ) [IdentifierDesignator]
                                                        ArrayIndexer(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   0
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ArrayIndexer]
                                                      ) [ElementAccessDesignator]
                                                     getName
                                                    ) [MemberAccessDesignator]
                                                  ) [MethodCallHeader]
                                                  NoActualParameters(
                                                  ) [NoActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                IfOptElseStatement(
                                  IfStatementHeader(
                                    IfStatementHeaderStart(
                                    ) [IfStatementHeaderStart]
                                    SingleTermCondition(
                                      SingleFactConditionTerm(
                                        SimpleConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                MethodCallFactor(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         s2
                                                        ) [IdentifierDesignator]
                                                       equals
                                                      ) [MemberAccessDesignator]
                                                    ) [MethodCallHeader]
                                                    ActualParameters(
                                                      SingleActualParameter(
                                                        ActualParameter(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                MethodCallFactor(
                                                                  MethodCall(
                                                                    MethodCallHeader(
                                                                      MemberAccessDesignator(
                                                                        ElementAccessDesignator(
                                                                          IdentifierDesignator(
                                                                           workers
                                                                          ) [IdentifierDesignator]
                                                                          ArrayIndexer(
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     1
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                          ) [ArrayIndexer]
                                                                        ) [ElementAccessDesignator]
                                                                       getName
                                                                      ) [MemberAccessDesignator]
                                                                    ) [MethodCallHeader]
                                                                    NoActualParameters(
                                                                    ) [NoActualParameters]
                                                                  ) [MethodCall]
                                                                ) [MethodCallFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ActualParameter]
                                                      ) [SingleActualParameter]
                                                    ) [ActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [SimpleConditionFact]
                                      ) [SingleFactConditionTerm]
                                    ) [SingleTermCondition]
                                  ) [IfStatementHeader]
                                  StatementBlock(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     s
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        AllocatorFactor(
                                                          Type(
                                                           char
                                                          ) [Type]
                                                          SingleArrayIndexer(
                                                            ArrayIndexer(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      IntConstantFactor(
                                                                       3
                                                                      ) [IntConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ArrayIndexer]
                                                          ) [SingleArrayIndexer]
                                                        ) [AllocatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     s
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             0
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         B
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   s
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           1
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       a
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            ElementAccessDesignator(
                                              MemberAccessDesignator(
                                                IdentifierDesignator(
                                                 s
                                                ) [IdentifierDesignator]
                                               arr
                                              ) [MemberAccessDesignator]
                                              ArrayIndexer(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         2
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ArrayIndexer]
                                            ) [ElementAccessDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                     d
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                  ) [StatementBlock]
                                  ElseStatement(
                                    ElseStatementStart(
                                    ) [ElseStatementStart]
                                    StatementBlock(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                NoStatements(
                                                ) [NoStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         s
                                                        ) [IdentifierDesignator]
                                                       arr
                                                      ) [MemberAccessDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            AllocatorFactor(
                                                              Type(
                                                               char
                                                              ) [Type]
                                                              SingleArrayIndexer(
                                                                ArrayIndexer(
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          IntConstantFactor(
                                                                           4
                                                                          ) [IntConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                ) [ArrayIndexer]
                                                              ) [SingleArrayIndexer]
                                                            ) [AllocatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    ElementAccessDesignator(
                                                      MemberAccessDesignator(
                                                        IdentifierDesignator(
                                                         s
                                                        ) [IdentifierDesignator]
                                                       arr
                                                      ) [MemberAccessDesignator]
                                                      ArrayIndexer(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 0
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ArrayIndexer]
                                                    ) [ElementAccessDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            CharConstantFactor(
                                                             G
                                                            ) [CharConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  ElementAccessDesignator(
                                                    MemberAccessDesignator(
                                                      IdentifierDesignator(
                                                       s
                                                      ) [IdentifierDesignator]
                                                     arr
                                                    ) [MemberAccessDesignator]
                                                    ArrayIndexer(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              IntConstantFactor(
                                                               1
                                                              ) [IntConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ArrayIndexer]
                                                  ) [ElementAccessDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           o
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                ElementAccessDesignator(
                                                  MemberAccessDesignator(
                                                    IdentifierDesignator(
                                                     s
                                                    ) [IdentifierDesignator]
                                                   arr
                                                  ) [MemberAccessDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             2
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         o
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              ElementAccessDesignator(
                                                MemberAccessDesignator(
                                                  IdentifierDesignator(
                                                   s
                                                  ) [IdentifierDesignator]
                                                 arr
                                                ) [MemberAccessDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           3
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       d
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                    ) [StatementBlock]
                                  ) [ElseStatement]
                                ) [IfOptElseStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                MethodCallDesignatorStatement(
                                  MethodCall(
                                    MethodCallHeader(
                                      IdentifierDesignator(
                                       printlnString
                                      ) [IdentifierDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   s
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   s
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        AllocatorFactor(
                                          Type(
                                           String
                                          ) [Type]
                                          NoArrayIndexer(
                                          ) [NoArrayIndexer]
                                        ) [AllocatorFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          DesignatorBasedStatement(
                            AssignmentDesignatorStatement(
                              AssignmentHeader(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   s
                                  ) [IdentifierDesignator]
                                 arr
                                ) [MemberAccessDesignator]
                              ) [AssignmentHeader]
                              AssignmentFooter(
                                AssignOperator(
                                ) [AssignOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      AllocatorFactor(
                                        Type(
                                         char
                                        ) [Type]
                                        SingleArrayIndexer(
                                          ArrayIndexer(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     5
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ArrayIndexer]
                                        ) [SingleArrayIndexer]
                                      ) [AllocatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [AssignmentFooter]
                            ) [AssignmentDesignatorStatement]
                          ) [DesignatorBasedStatement]
                        ) [MultipleStatements]
                        DesignatorBasedStatement(
                          AssignmentDesignatorStatement(
                            AssignmentHeader(
                              ElementAccessDesignator(
                                MemberAccessDesignator(
                                  IdentifierDesignator(
                                   s
                                  ) [IdentifierDesignator]
                                 arr
                                ) [MemberAccessDesignator]
                                ArrayIndexer(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           0
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [ArrayIndexer]
                              ) [ElementAccessDesignator]
                            ) [AssignmentHeader]
                            AssignmentFooter(
                              AssignOperator(
                              ) [AssignOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                       s
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [AssignmentFooter]
                          ) [AssignmentDesignatorStatement]
                        ) [DesignatorBasedStatement]
                      ) [MultipleStatements]
                      DesignatorBasedStatement(
                        AssignmentDesignatorStatement(
                          AssignmentHeader(
                            ElementAccessDesignator(
                              MemberAccessDesignator(
                                IdentifierDesignator(
                                 s
                                ) [IdentifierDesignator]
                               arr
                              ) [MemberAccessDesignator]
                              ArrayIndexer(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         1
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ArrayIndexer]
                            ) [ElementAccessDesignator]
                          ) [AssignmentHeader]
                          AssignmentFooter(
                            AssignOperator(
                            ) [AssignOperator]
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    CharConstantFactor(
                                     w
                                    ) [CharConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [AssignmentFooter]
                        ) [AssignmentDesignatorStatement]
                      ) [DesignatorBasedStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      AssignmentDesignatorStatement(
                        AssignmentHeader(
                          ElementAccessDesignator(
                            MemberAccessDesignator(
                              IdentifierDesignator(
                               s
                              ) [IdentifierDesignator]
                             arr
                            ) [MemberAccessDesignator]
                            ArrayIndexer(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       2
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ArrayIndexer]
                          ) [ElementAccessDesignator]
                        ) [AssignmentHeader]
                        AssignmentFooter(
                          AssignOperator(
                          ) [AssignOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  CharConstantFactor(
                                    
                                  ) [CharConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [AssignmentFooter]
                      ) [AssignmentDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                  DesignatorBasedStatement(
                    AssignmentDesignatorStatement(
                      AssignmentHeader(
                        ElementAccessDesignator(
                          MemberAccessDesignator(
                            IdentifierDesignator(
                             s
                            ) [IdentifierDesignator]
                           arr
                          ) [MemberAccessDesignator]
                          ArrayIndexer(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    IntConstantFactor(
                                     3
                                    ) [IntConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ArrayIndexer]
                        ) [ElementAccessDesignator]
                      ) [AssignmentHeader]
                      AssignmentFooter(
                        AssignOperator(
                        ) [AssignOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                CharConstantFactor(
                                 =
                                ) [CharConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [AssignmentFooter]
                    ) [AssignmentDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
                DesignatorBasedStatement(
                  AssignmentDesignatorStatement(
                    AssignmentHeader(
                      ElementAccessDesignator(
                        MemberAccessDesignator(
                          IdentifierDesignator(
                           s
                          ) [IdentifierDesignator]
                         arr
                        ) [MemberAccessDesignator]
                        ArrayIndexer(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   4
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ArrayIndexer]
                      ) [ElementAccessDesignator]
                    ) [AssignmentHeader]
                    AssignmentFooter(
                      AssignOperator(
                      ) [AssignOperator]
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              CharConstantFactor(
                                
                              ) [CharConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [AssignmentFooter]
                  ) [AssignmentDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
              DesignatorBasedStatement(
                MethodCallDesignatorStatement(
                  MethodCall(
                    MethodCallHeader(
                      IdentifierDesignator(
                       printString
                      ) [IdentifierDesignator]
                    ) [MethodCallHeader]
                    ActualParameters(
                      SingleActualParameter(
                        ActualParameter(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   s
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ActualParameter]
                      ) [SingleActualParameter]
                    ) [ActualParameters]
                  ) [MethodCall]
                ) [MethodCallDesignatorStatement]
              ) [DesignatorBasedStatement]
            ) [MultipleStatements]
            ReadStatement(
              IdentifierDesignator(
               sw
              ) [IdentifierDesignator]
            ) [ReadStatement]
          ) [MultipleStatements]
          IfOptElseStatement(
            IfStatementHeader(
              IfStatementHeaderStart(
              ) [IfStatementHeaderStart]
              SingleTermCondition(
                SingleFactConditionTerm(
                  ComplexConditionFact(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             sw
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    GrtOperator(
                    ) [GrtOperator]
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             0
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [ComplexConditionFact]
                ) [SingleFactConditionTerm]
              ) [SingleTermCondition]
            ) [IfStatementHeader]
            StatementBlock(
              MultipleStatements(
                NoStatements(
                ) [NoStatements]
                DesignatorBasedStatement(
                  MethodCallDesignatorStatement(
                    MethodCall(
                      MethodCallHeader(
                        IdentifierDesignator(
                         printlnString
                        ) [IdentifierDesignator]
                      ) [MethodCallHeader]
                      ActualParameters(
                        SingleActualParameter(
                          ActualParameter(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  MethodCallFactor(
                                    MethodCall(
                                      MethodCallHeader(
                                        MemberAccessDesignator(
                                          IdentifierDesignator(
                                           baker
                                          ) [IdentifierDesignator]
                                         getName
                                        ) [MemberAccessDesignator]
                                      ) [MethodCallHeader]
                                      NoActualParameters(
                                      ) [NoActualParameters]
                                    ) [MethodCall]
                                  ) [MethodCallFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ActualParameter]
                        ) [SingleActualParameter]
                      ) [ActualParameters]
                    ) [MethodCall]
                  ) [MethodCallDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
            ) [StatementBlock]
            ElseStatement(
              ElseStatementStart(
              ) [ElseStatementStart]
              StatementBlock(
                MultipleStatements(
                  NoStatements(
                  ) [NoStatements]
                  DesignatorBasedStatement(
                    MethodCallDesignatorStatement(
                      MethodCall(
                        MethodCallHeader(
                          IdentifierDesignator(
                           printlnString
                          ) [IdentifierDesignator]
                        ) [MethodCallHeader]
                        ActualParameters(
                          SingleActualParameter(
                            ActualParameter(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    MethodCallFactor(
                                      MethodCall(
                                        MethodCallHeader(
                                          MemberAccessDesignator(
                                            IdentifierDesignator(
                                             butcher
                                            ) [IdentifierDesignator]
                                           getName
                                          ) [MemberAccessDesignator]
                                        ) [MethodCallHeader]
                                        NoActualParameters(
                                        ) [NoActualParameters]
                                      ) [MethodCall]
                                    ) [MethodCallFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ActualParameter]
                          ) [SingleActualParameter]
                        ) [ActualParameters]
                      ) [MethodCall]
                    ) [MethodCallDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
              ) [StatementBlock]
            ) [ElseStatement]
          ) [IfOptElseStatement]
        ) [MultipleStatements]
        ForEachStatement(
          ForEachStatementHeader(
            ForEachStatementHeaderStart(
            ) [ForEachStatementHeaderStart]
           worker
            IdentifierDesignator(
             workers
            ) [IdentifierDesignator]
          ) [ForEachStatementHeader]
          StatementBlock(
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              DesignatorBasedStatement(
                MethodCallDesignatorStatement(
                  MethodCall(
                    MethodCallHeader(
                      IdentifierDesignator(
                       printlnString
                      ) [IdentifierDesignator]
                    ) [MethodCallHeader]
                    ActualParameters(
                      SingleActualParameter(
                        ActualParameter(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      MemberAccessDesignator(
                                        IdentifierDesignator(
                                         worker
                                        ) [IdentifierDesignator]
                                       toString
                                      ) [MemberAccessDesignator]
                                    ) [MethodCallHeader]
                                    NoActualParameters(
                                    ) [NoActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ActualParameter]
                      ) [SingleActualParameter]
                    ) [ActualParameters]
                  ) [MethodCall]
                ) [MethodCallDesignatorStatement]
              ) [DesignatorBasedStatement]
            ) [MultipleStatements]
          ) [StatementBlock]
        ) [ForEachStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - generator_C2.mj:7: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - generator_C2.mj:9: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:10: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:10: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C2.mj:10: SEMANTIC ANALYZER: Defined char array variable 'arr'. Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:13: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:13: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:13: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:14: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:14: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:12: SEMANTIC ANALYZER: Defined method 'length'. Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:18: SEMANTIC ANALYZER: Found class 'String' method call 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:17: SEMANTIC ANALYZER: Defined method 'isEmpty'. Symbol node: Method 'isEmpty': type = 'bool', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:22: SEMANTIC ANALYZER: Defined  formal parameter 's'. Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:23: SEMANTIC ANALYZER: Defined  variable 'result'. Symbol node: Variable 'result': type = 'class', adr = 2, level = 2
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:24: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:24: SEMANTIC ANALYZER: Defined int variable 'offset'. Symbol node: Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:26: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:26: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:26: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:26: SEMANTIC ANALYZER: Found class 'String' field usage 'isEmpty'! Symbol node: Method 'isEmpty': type = 'bool', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:26: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:27: SEMANTIC ANALYZER: Found class 'String' method call 'isEmpty'! Symbol node: Method 'isEmpty': type = 'bool', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:27: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:28: SEMANTIC ANALYZER: Found local variable usage 'result'! Symbol node: Variable 'result': type = 'class', adr = 2, level = 2
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:29: SEMANTIC ANALYZER: Found local variable usage 'result'! Symbol node: Variable 'result': type = 'class', adr = 2, level = 2
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:29: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:29: SEMANTIC ANALYZER: Found class 'String' method call 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:29: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:29: SEMANTIC ANALYZER: Found class 'String' field usage 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:30: SEMANTIC ANALYZER: Found local variable usage 'offset'! Symbol node: Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:30: SEMANTIC ANALYZER: Found class 'String' method call 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:31: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:31: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:31: SEMANTIC ANALYZER: Found local variable usage 'offset'! Symbol node: Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:31: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_C2.mj:31: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found local variable usage 'result'! Symbol node: Variable 'result': type = 'class', adr = 2, level = 2
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:32: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:34: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:34: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:34: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:34: SEMANTIC ANALYZER: Found class 'String' field usage 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:34: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_C2.mj:34: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found local variable usage 'result'! Symbol node: Variable 'result': type = 'class', adr = 2, level = 2
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found local variable usage 'offset'! Symbol node: Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found array element access 'i[offset + i]'! Symbol node: Array element 'i[offset + i]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:51: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:35: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:37: SEMANTIC ANALYZER: Found local variable usage 'result'! Symbol node: Variable 'result': type = 'class', adr = 2, level = 2
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:22: SEMANTIC ANALYZER: Defined method 'concat'. Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:40: SEMANTIC ANALYZER: Defined  formal parameter 's'. Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:41: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:41: SEMANTIC ANALYZER: Defined int variable 'l'. Symbol node: Variable 'l': type = 'int', adr = 3, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:43: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:43: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:44: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:44: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:44: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:44: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:44: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:45: SEMANTIC ANALYZER: Found local variable usage 'l'! Symbol node: Variable 'l': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:45: SEMANTIC ANALYZER: Found class 'String' method call 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:46: SEMANTIC ANALYZER: Found local variable usage 'l'! Symbol node: Variable 'l': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:46: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:46: SEMANTIC ANALYZER: Found class 'String' field usage 'length'! Symbol node: Method 'length': type = 'int', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:47: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:47: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:47: SEMANTIC ANALYZER: Found local variable usage 'l'! Symbol node: Variable 'l': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:47: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_C2.mj:47: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:48: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:45: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:40: SEMANTIC ANALYZER: Defined method 'equals'. Symbol node: Method 'equals': type = 'bool', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
  Variable 'l': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:9: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - generator_C2.mj:9: SEMANTIC ANALYZER: Defined class 'String'. Symbol node: Type 'String': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:55: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:55: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_C2.mj:55: SEMANTIC ANALYZER: Defined  variable 'shopHeader'. Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:55: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_C2.mj:55: SEMANTIC ANALYZER: Defined  variable 'ownerHeader'. Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:55: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_C2.mj:55: SEMANTIC ANALYZER: Defined  variable 'bakerHeader'. Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:55: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_C2.mj:55: SEMANTIC ANALYZER: Defined  variable 'butcherHeader'. Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:55: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_C2.mj:55: SEMANTIC ANALYZER: Defined  variable 'helperHeader'. Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:57: SEMANTIC ANALYZER: Visited node: 'AbstractClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - generator_C2.mj:58: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:58: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C2.mj:58: SEMANTIC ANALYZER: Defined  variable 'name'. Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - generator_C2.mj:59: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:59: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C2.mj:59: SEMANTIC ANALYZER: Defined int variable 'yearOfBirth'. Symbol node: Field 'yearOfBirth': type = 'int', adr = 2, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:61: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:61: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:61: SEMANTIC ANALYZER: Defined method 'getName'. Symbol node: Method 'getName': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:62: SEMANTIC ANALYZER: Defined  formal parameter 'name'. Symbol node: Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:62: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:62: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:62: SEMANTIC ANALYZER: Found formal parameter usage 'name'! Symbol node: Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:58: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:58: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:62: SEMANTIC ANALYZER: Defined method 'setName'. Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:64: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'yearOfBirth'! Symbol node: Field 'yearOfBirth': type = 'int', adr = 2, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:64: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:64: SEMANTIC ANALYZER: Defined method 'getYearOfBirth'. Symbol node: Method 'getYearOfBirth': type = 'int', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:65: SEMANTIC ANALYZER: Defined int formal parameter 'yearOfBirth'. Symbol node: Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:65: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:65: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'yearOfBirth'! Symbol node: Field 'yearOfBirth': type = 'int', adr = 2, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:65: SEMANTIC ANALYZER: Found formal parameter usage 'yearOfBirth'! Symbol node: Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:76: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:76: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:65: SEMANTIC ANALYZER: Defined method 'setYearOfBirth'. Symbol node: Method 'setYearOfBirth': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:67: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:67: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:67: SEMANTIC ANALYZER: Visited node: 'AbstractMethodHeader'.
DEBUG - generator_C2.mj:67: SEMANTIC ANALYZER: Visited node: 'AbstractMethodDeclaration'.
INFO  - generator_C2.mj:67: SEMANTIC ANALYZER: Defined method 'toString'. Symbol node: Abstract method 'toString': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:57: SEMANTIC ANALYZER: Visited node: 'AbstractClassDeclaration'.
INFO  - generator_C2.mj:57: SEMANTIC ANALYZER: Defined class 'AbsWorker'. Symbol node: Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C2.mj:71: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - generator_C2.mj:71: SEMANTIC ANALYZER: Found abstract class usage 'AbsWorker'! Symbol node: Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C2.mj:71: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:74: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:74: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:74: SEMANTIC ANALYZER: Defined method 'toString'. Symbol node: Method 'toString': type = 'class', adr = 0, level = 1, parent = 'Worker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:71: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - generator_C2.mj:71: SEMANTIC ANALYZER: Defined class 'Worker'. Symbol node: Type 'Worker': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - generator_C2.mj:78: SEMANTIC ANALYZER: Found abstract class usage 'AbsWorker'! Symbol node: Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - generator_C2.mj:79: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:79: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C2.mj:79: SEMANTIC ANALYZER: Defined  variable 'shopName'. Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:81: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'shopName'! Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:81: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:81: SEMANTIC ANALYZER: Defined method 'getShopName'. Symbol node: Method 'getShopName': type = 'class', adr = 0, level = 1, parent = 'ShopOwner', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:82: SEMANTIC ANALYZER: Defined  formal parameter 'shopName'. Symbol node: Formal parameter 'shopName': type = 'class', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:83: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:83: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:84: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:84: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:84: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:84: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:84: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:84: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:85: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:85: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:85: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:86: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:86: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:86: SEMANTIC ANALYZER: Found array element access 'shopHeader.arr[0]'! Symbol node: Array element 'shopHeader.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:86: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:87: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:87: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:87: SEMANTIC ANALYZER: Found array element access 'shopHeader.arr[1]'! Symbol node: Array element 'shopHeader.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:87: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:88: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:88: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:88: SEMANTIC ANALYZER: Found array element access 'shopHeader.arr[2]'! Symbol node: Array element 'shopHeader.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:88: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:89: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:89: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:89: SEMANTIC ANALYZER: Found array element access 'shopHeader.arr[3]'! Symbol node: Array element 'shopHeader.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:89: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:90: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:90: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:90: SEMANTIC ANALYZER: Found array element access 'shopHeader.arr[4]'! Symbol node: Array element 'shopHeader.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:90: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:91: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:91: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:91: SEMANTIC ANALYZER: Found array element access 'shopHeader.arr[5]'! Symbol node: Array element 'shopHeader.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:91: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:83: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:93: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:93: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'shopName'! Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:93: SEMANTIC ANALYZER: Found global variable usage 'shopHeader'! Symbol node: Variable 'shopHeader': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:93: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:93: SEMANTIC ANALYZER: Found formal parameter usage 'shopName'! Symbol node: Formal parameter 'shopName': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:93: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:82: SEMANTIC ANALYZER: Defined method 'setShopName'. Symbol node: Method 'setShopName': type = 'void', adr = 0, level = 2, parent = 'ShopOwner', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'shopName': type = 'class', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ProtectedAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PROTECTED.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:96: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:97: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:97: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:97: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:97: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:97: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:97: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:98: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:98: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:99: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:99: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:99: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[0]'! Symbol node: Array element 'ownerHeader.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:99: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:100: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:100: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:100: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[1]'! Symbol node: Array element 'ownerHeader.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:100: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:101: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:101: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:101: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[2]'! Symbol node: Array element 'ownerHeader.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:101: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:102: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:102: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:102: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[3]'! Symbol node: Array element 'ownerHeader.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:102: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:103: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:103: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:103: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[4]'! Symbol node: Array element 'ownerHeader.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:103: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:104: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:104: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:104: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[5]'! Symbol node: Array element 'ownerHeader.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:104: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:105: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:105: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:105: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[6]'! Symbol node: Array element 'ownerHeader.arr[6]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:105: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:106: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:106: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:106: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[7]'! Symbol node: Array element 'ownerHeader.arr[7]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:106: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:107: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:107: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:107: SEMANTIC ANALYZER: Found array element access 'ownerHeader.arr[8]'! Symbol node: Array element 'ownerHeader.arr[8]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:107: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:96: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:96: SEMANTIC ANALYZER: Defined method 'initOwnerHeader'. Symbol node: Method 'initOwnerHeader': type = 'void', adr = 0, level = 1, parent = 'ShopOwner', access modifier = protected
  Variable 'this': , adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:111: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:111: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:111: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:112: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:112: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:112: SEMANTIC ANALYZER: Defined  variable 's'. Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:114: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:114: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:115: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:115: SEMANTIC ANALYZER: Found class 'ShopOwner' method call 'initOwnerHeader'! Symbol node: Method 'initOwnerHeader': type = 'void', adr = 0, level = 1, parent = 'ShopOwner', access modifier = protected
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:115: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:115: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:117: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'shopName'! Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:117: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:117: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:117: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:118: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:118: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'shopName'! Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:118: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:118: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:118: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:119: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:119: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:119: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:119: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:111: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:111: SEMANTIC ANALYZER: Defined method 'toString'. Symbol node: Method 'toString': type = 'class', adr = 0, level = 1, parent = 'ShopOwner', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - generator_C2.mj:78: SEMANTIC ANALYZER: Defined class 'ShopOwner'. Symbol node: Type 'ShopOwner': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:124: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:124: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:127: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:127: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:127: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:127: SEMANTIC ANALYZER: Defined  formal parameter 'name'. Symbol node: Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:128: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:128: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:128: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:130: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:130: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:131: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:131: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:131: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:131: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:131: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:131: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:132: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:132: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:132: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:133: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:133: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:133: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[0]'! Symbol node: Array element 'bakerHeader.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:133: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:134: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:134: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:134: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[1]'! Symbol node: Array element 'bakerHeader.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:134: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:135: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:135: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:135: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[2]'! Symbol node: Array element 'bakerHeader.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:135: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:136: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:136: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:136: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[3]'! Symbol node: Array element 'bakerHeader.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:136: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:137: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:137: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:137: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[4]'! Symbol node: Array element 'bakerHeader.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:137: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:138: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:138: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:138: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[5]'! Symbol node: Array element 'bakerHeader.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:138: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:139: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:139: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:139: SEMANTIC ANALYZER: Found array element access 'bakerHeader.arr[6]'! Symbol node: Array element 'bakerHeader.arr[6]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:139: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:130: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:141: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:141: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:141: SEMANTIC ANALYZER: Found global variable usage 'bakerHeader'! Symbol node: Variable 'bakerHeader': type = 'class', adr = 2, level = 0
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:141: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:141: SEMANTIC ANALYZER: Found formal parameter usage 'name'! Symbol node: Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:47: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:141: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:127: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:127: SEMANTIC ANALYZER: Defined method 'setName'. Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'Baker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:124: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - generator_C2.mj:124: SEMANTIC ANALYZER: Defined class 'Baker'. Symbol node: Type 'Baker': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:146: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:146: SEMANTIC ANALYZER: Visited node: 'ClassHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:147: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - generator_C2.mj:147: SEMANTIC ANALYZER: Found abstract class usage 'AbsWorker'! Symbol node: Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C2.mj:147: SEMANTIC ANALYZER: Visited node: 'ClassVariable'.
INFO  - generator_C2.mj:147: SEMANTIC ANALYZER: Defined  variable 'helper'. Symbol node: Field 'helper': type = 'class', adr = 4, level = 1, parent = 'Butcher', access modifier = public
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:150: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:150: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:150: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:150: SEMANTIC ANALYZER: Defined  formal parameter 'name'. Symbol node: Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:151: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:151: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:151: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:153: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:153: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:154: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:154: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:154: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:154: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:154: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:155: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:155: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:49: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:155: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:156: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:156: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:156: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[0]'! Symbol node: Array element 'butcherHeader.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:156: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:157: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:157: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:157: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[1]'! Symbol node: Array element 'butcherHeader.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:157: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:158: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:158: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:158: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[2]'! Symbol node: Array element 'butcherHeader.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:158: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:159: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:159: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:159: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[3]'! Symbol node: Array element 'butcherHeader.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:159: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:160: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:160: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:160: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[4]'! Symbol node: Array element 'butcherHeader.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:160: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:161: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:161: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:161: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[5]'! Symbol node: Array element 'butcherHeader.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:161: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:162: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:162: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:162: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[6]'! Symbol node: Array element 'butcherHeader.arr[6]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:162: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:163: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:163: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:163: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[7]'! Symbol node: Array element 'butcherHeader.arr[7]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:163: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:164: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:164: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:164: SEMANTIC ANALYZER: Found array element access 'butcherHeader.arr[8]'! Symbol node: Array element 'butcherHeader.arr[8]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:164: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:153: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:166: SEMANTIC ANALYZER: Found local variable usage 'this'! Symbol node: Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:166: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:166: SEMANTIC ANALYZER: Found global variable usage 'butcherHeader'! Symbol node: Variable 'butcherHeader': type = 'class', adr = 3, level = 0
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:166: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:166: SEMANTIC ANALYZER: Found formal parameter usage 'name'! Symbol node: Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:49: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:49: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:166: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:150: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:150: SEMANTIC ANALYZER: Defined method 'setName'. Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'Butcher', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'PublicAccessModifier'.
DEBUG - SEMANTIC ANALYZER: Current access modifier: PUBLIC.
DEBUG - generator_C2.mj:170: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:170: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_C2.mj:170: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:171: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:171: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:171: SEMANTIC ANALYZER: Defined  variable 's'. Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:173: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:173: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:174: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:174: SEMANTIC ANALYZER: Found class 'ShopOwner' method call 'initOwnerHeader'! Symbol node: Method 'initOwnerHeader': type = 'void', adr = 0, level = 1, parent = 'ShopOwner', access modifier = protected
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:174: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:174: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:173: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:176: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:176: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:177: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:177: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:177: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:177: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:177: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:177: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:178: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:178: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:48: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:178: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:179: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:179: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:179: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[0]'! Symbol node: Array element 'helperHeader.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:179: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:180: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:180: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:180: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[1]'! Symbol node: Array element 'helperHeader.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:180: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:181: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:181: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:181: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[2]'! Symbol node: Array element 'helperHeader.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:181: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:182: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:182: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:182: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[3]'! Symbol node: Array element 'helperHeader.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:182: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:183: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:183: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:183: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[4]'! Symbol node: Array element 'helperHeader.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:183: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:184: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:184: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:184: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[5]'! Symbol node: Array element 'helperHeader.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:184: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:185: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:185: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:185: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[6]'! Symbol node: Array element 'helperHeader.arr[6]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:185: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:186: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:186: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:186: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[7]'! Symbol node: Array element 'helperHeader.arr[7]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:186: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:187: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:187: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:187: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[8]'! Symbol node: Array element 'helperHeader.arr[8]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:187: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:188: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:188: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:188: SEMANTIC ANALYZER: Found array element access 'helperHeader.arr[9]'! Symbol node: Array element 'helperHeader.arr[9]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:188: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:176: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:190: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'shopName'! Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:190: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:190: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:190: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:191: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:191: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'shopName'! Symbol node: Field 'shopName': type = 'class', adr = 3, level = 1, parent = 'ShopOwner', access modifier = protected
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:191: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:191: SEMANTIC ANALYZER: Found global variable usage 'ownerHeader'! Symbol node: Variable 'ownerHeader': type = 'class', adr = 1, level = 0
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:36: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:191: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:192: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:192: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:192: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:192: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'name'! Symbol node: Field 'name': type = 'class', adr = 1, level = 1, parent = 'AbsWorker', access modifier = protected
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:192: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:193: SEMANTIC ANALYZER: Found class 'Butcher' field usage 'helper'! Symbol node: Field 'helper': type = 'class', adr = 4, level = 1, parent = 'Butcher', access modifier = public
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:193: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:193: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:37: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:193: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:194: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:194: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:194: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:194: SEMANTIC ANALYZER: Found global variable usage 'helperHeader'! Symbol node: Variable 'helperHeader': type = 'class', adr = 4, level = 0
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:194: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:195: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:195: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:195: SEMANTIC ANALYZER: Found class 'String' field usage 'concat'! Symbol node: Method 'concat': type = 'class', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'result': type = 'class', adr = 2, level = 2
  Variable 'i': type = 'int', adr = 3, level = 2
  Variable 'offset': type = 'int', adr = 4, level = 2
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:195: SEMANTIC ANALYZER: Found class 'Butcher' field usage 'helper'! Symbol node: Field 'helper': type = 'class', adr = 4, level = 1, parent = 'Butcher', access modifier = public
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:195: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'toString'! Symbol node: Abstract method 'toString': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:195: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:196: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:196: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:196: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:196: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:170: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:170: SEMANTIC ANALYZER: Defined method 'toString'. Symbol node: Method 'toString': type = 'class', adr = 0, level = 1, parent = 'Butcher', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Variable 's': type = 'class', adr = 1, level = 2
DEBUG - generator_C2.mj:146: SEMANTIC ANALYZER: Visited node: 'ClassDeclaration'.
INFO  - generator_C2.mj:146: SEMANTIC ANALYZER: Defined class 'Butcher'. Symbol node: Type 'Butcher': type = 'class', adr = 0, level = 0
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:202: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:202: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:202: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:202: SEMANTIC ANALYZER: Defined  formal parameter 's'. Symbol node: Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:203: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:203: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:203: SEMANTIC ANALYZER: Defined char variable 'c'. Symbol node: Variable 'c': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:205: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:205: SEMANTIC ANALYZER: Found symbolic constant usage 'null'! Symbol node: Constant 'null': type = 'class', adr = 0, level = 0
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:205: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:205: SEMANTIC ANALYZER: Found class 'String' field usage 'isEmpty'! Symbol node: Method 'isEmpty': type = 'bool', adr = 0, level = 1, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:39: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:205: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:206: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:206: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:206: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:206: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:206: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C2.mj:207: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:207: SEMANTIC ANALYZER: Found local variable usage 'c'! Symbol node: Variable 'c': type = 'char', adr = 1, level = 1
DEBUG - generator_C2.mj:207: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:207: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_C2.mj:206: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_C2.mj:202: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:202: SEMANTIC ANALYZER: Defined method 'printString'. Symbol node: Method 'printString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
  Variable 'c': type = 'char', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:211: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:211: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:211: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_C2.mj:211: SEMANTIC ANALYZER: Defined  formal parameter 's'. Symbol node: Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:212: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:212: SEMANTIC ANALYZER: Found global method call 'printString'! Symbol node: Method 'printString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
  Variable 'c': type = 'char', adr = 1, level = 1
DEBUG - generator_C2.mj:212: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:212: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:212: SEMANTIC ANALYZER: Found formal parameter usage 's'! Symbol node: Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:212: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:212: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:212: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:213: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:213: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_C2.mj:213: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:213: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_C2.mj:211: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:211: SEMANTIC ANALYZER: Defined method 'printlnString'. Symbol node: Method 'printlnString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_C2.mj:216: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:217: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:217: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:217: SEMANTIC ANALYZER: Defined  variable 's'. Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:217: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:217: SEMANTIC ANALYZER: Defined  variable 's2'. Symbol node: Variable 's2': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:218: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:218: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:218: SEMANTIC ANALYZER: Defined int variable 'sw'. Symbol node: Variable 'sw': type = 'int', adr = 2, level = 1
DEBUG - generator_C2.mj:219: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - generator_C2.mj:219: SEMANTIC ANALYZER: Found abstract class usage 'AbsWorker'! Symbol node: Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C2.mj:219: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:219: SEMANTIC ANALYZER: Defined  array variable 'workers'. Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:219: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:219: SEMANTIC ANALYZER: Defined  variable 'worker'. Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:220: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:220: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:220: SEMANTIC ANALYZER: Defined  variable 'baker'. Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:221: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:221: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_C2.mj:221: SEMANTIC ANALYZER: Defined  variable 'butcher'. Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:223: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'Type'.
INFO  - generator_C2.mj:223: SEMANTIC ANALYZER: Found abstract class usage 'AbsWorker'! Symbol node: Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:223: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:226: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:226: SEMANTIC ANALYZER: Found local variable usage 'worker'! Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:226: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:226: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:226: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:226: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:227: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:227: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:227: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:227: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:227: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:227: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:228: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:228: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:228: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:229: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:229: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:230: SEMANTIC ANALYZER: Found local variable usage 'worker'! Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:230: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setName'! Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:230: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:230: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:231: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:231: SEMANTIC ANALYZER: Found local variable usage 'worker'! Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:231: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:231: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setYearOfBirth'! Symbol node: Method 'setYearOfBirth': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - generator_C2.mj:231: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:231: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:231: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:231: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:232: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:232: SEMANTIC ANALYZER: Found array element access 'workers[0]'! Symbol node: Array element 'workers[0]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:232: SEMANTIC ANALYZER: Found local variable usage 'worker'! Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:232: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:235: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:235: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:235: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:235: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:235: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:235: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:236: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:236: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:236: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:236: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:236: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:236: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:237: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:237: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:237: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found array element access 's.arr[4]'! Symbol node: Array element 's.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:94: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:238: SEMANTIC ANALYZER: Found array element access 's.arr[5]'! Symbol node: Array element 's.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:238: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:239: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:239: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'setShopName'! Symbol node: Method 'setShopName': type = 'void', adr = 0, level = 2, parent = 'ShopOwner', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'shopName': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:239: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:239: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:240: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:240: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:240: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:240: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:240: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:240: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:241: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:241: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:241: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:242: SEMANTIC ANALYZER: Found array element access 's.arr[4]'! Symbol node: Array element 's.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:242: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:243: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:243: SEMANTIC ANALYZER: Found class 'Baker' field usage 'setName'! Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'Baker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:243: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:243: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:244: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:244: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:244: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:244: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setYearOfBirth'! Symbol node: Method 'setYearOfBirth': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - generator_C2.mj:244: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:244: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:244: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:244: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:245: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:245: SEMANTIC ANALYZER: Found array element access 'workers[1]'! Symbol node: Array element 'workers[1]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:245: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:245: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:248: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:248: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:248: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:248: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:248: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:248: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:249: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:249: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:249: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:249: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:249: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:249: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:250: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:250: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:250: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:251: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:251: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:252: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:252: SEMANTIC ANALYZER: Found class 'Butcher' field usage 'setName'! Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'Butcher', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:252: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:252: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:253: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:253: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:253: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:253: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setYearOfBirth'! Symbol node: Method 'setYearOfBirth': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - generator_C2.mj:253: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:253: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:253: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:253: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:254: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:254: SEMANTIC ANALYZER: Found array element access 'workers[2]'! Symbol node: Array element 'workers[2]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:254: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:254: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:257: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:257: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:257: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:257: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:257: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:257: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:258: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:258: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:258: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:258: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:258: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:259: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:259: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:259: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:260: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:260: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:261: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:261: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'setShopName'! Symbol node: Method 'setShopName': type = 'void', adr = 0, level = 2, parent = 'ShopOwner', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'shopName': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:261: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:261: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:262: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:262: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:262: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:262: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:262: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:262: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:263: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:263: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:263: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found array element access 's.arr[4]'! Symbol node: Array element 's.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:94: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:264: SEMANTIC ANALYZER: Found array element access 's.arr[5]'! Symbol node: Array element 's.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:264: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:265: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:265: SEMANTIC ANALYZER: Found class 'Butcher' field usage 'setName'! Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'Butcher', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:265: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:266: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:266: SEMANTIC ANALYZER: Found class 'Butcher' field usage 'helper'! Symbol node: Field 'helper': type = 'class', adr = 4, level = 1, parent = 'Butcher', access modifier = public
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:266: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:266: SEMANTIC ANALYZER: Found array element access 'workers[2]'! Symbol node: Array element 'workers[2]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:266: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:267: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:267: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:267: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:267: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setYearOfBirth'! Symbol node: Method 'setYearOfBirth': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - generator_C2.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:267: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:267: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:268: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:268: SEMANTIC ANALYZER: Found array element access 'workers[3]'! Symbol node: Array element 'workers[3]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:268: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:268: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:271: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:271: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:271: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:271: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:271: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:271: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:272: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:272: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:272: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:272: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:272: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:272: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:273: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:273: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:273: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:274: SEMANTIC ANALYZER: Found array element access 's.arr[4]'! Symbol node: Array element 's.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:274: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:275: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:275: SEMANTIC ANALYZER: Found class 'ShopOwner' field usage 'setShopName'! Symbol node: Method 'setShopName': type = 'void', adr = 0, level = 2, parent = 'ShopOwner', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'shopName': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:275: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:275: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:276: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:276: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:276: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:276: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:276: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:276: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:277: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:277: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:277: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[4]'! Symbol node: Array element 's.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:94: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[5]'! Symbol node: Array element 's.arr[5]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:110: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:278: SEMANTIC ANALYZER: Found array element access 's.arr[6]'! Symbol node: Array element 's.arr[6]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:114: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:278: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:279: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:279: SEMANTIC ANALYZER: Found class 'Baker' field usage 'setName'! Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'Baker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:279: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:279: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:280: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:280: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:280: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:280: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setYearOfBirth'! Symbol node: Method 'setYearOfBirth': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'yearOfBirth': type = 'int', adr = 1, level = 1
DEBUG - generator_C2.mj:280: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:280: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:280: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:280: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:281: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:281: SEMANTIC ANALYZER: Found array element access 'workers[4]'! Symbol node: Array element 'workers[4]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:281: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:281: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:284: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:284: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:284: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:284: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:284: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:284: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:285: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:285: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:285: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:286: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:286: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:287: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:287: SEMANTIC ANALYZER: Found class 'Butcher' field usage 'helper'! Symbol node: Field 'helper': type = 'class', adr = 4, level = 1, parent = 'Butcher', access modifier = public
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:287: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'setName'! Symbol node: Method 'setName': type = 'void', adr = 0, level = 2, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 'name': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:287: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:31: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:287: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:290: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:290: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:290: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:291: SEMANTIC ANALYZER: Found global method call 'printlnString'! Symbol node: Method 'printlnString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:291: SEMANTIC ANALYZER: Found local variable usage 'worker'! Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:291: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'getName'! Symbol node: Method 'getName': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:291: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:290: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_C2.mj:294: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:294: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:294: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:294: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:294: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:294: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:295: SEMANTIC ANALYZER: Found local variable usage 's2'! Symbol node: Variable 's2': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:295: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:295: SEMANTIC ANALYZER: Found array element access 'workers[0]'! Symbol node: Array element 'workers[0]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:295: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'getName'! Symbol node: Method 'getName': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:295: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:296: SEMANTIC ANALYZER: Found local variable usage 's2'! Symbol node: Variable 's2': type = 'class', adr = 1, level = 1
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:296: SEMANTIC ANALYZER: Found class 'String' field usage 'equals'! Symbol node: Method 'equals': type = 'bool', adr = 0, level = 2, parent = 'String', access modifier = public
  Variable 'this': , adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 2
  Variable 'l': type = 'int', adr = 3, level = 2
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:296: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:296: SEMANTIC ANALYZER: Found array element access 'workers[1]'! Symbol node: Array element 'workers[1]': type = 'class', adr = -1, level = -1
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:296: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'getName'! Symbol node: Method 'getName': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:297: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:297: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:297: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:298: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:298: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:300: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:300: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:300: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:301: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:70: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:301: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:296: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:303: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:303: SEMANTIC ANALYZER: Found global method call 'printlnString'! Symbol node: Method 'printlnString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:303: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:303: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:303: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:303: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:303: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:22: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:303: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:305: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:305: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:305: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:305: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:305: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:305: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:306: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:306: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:306: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found array element access 's.arr[0]'! Symbol node: Array element 's.arr[0]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found array element access 's.arr[1]'! Symbol node: Array element 's.arr[1]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found array element access 's.arr[2]'! Symbol node: Array element 's.arr[2]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found array element access 's.arr[3]'! Symbol node: Array element 's.arr[3]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found class 'String' field usage 'arr'! Symbol node: Field 'arr': type = 'array of char', adr = 1, level = 1, parent = 'String', access modifier = public
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_C2.mj:307: SEMANTIC ANALYZER: Found array element access 's.arr[4]'! Symbol node: Array element 's.arr[4]': type = 'char', adr = -1, level = -1
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:82: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:307: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:308: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:308: SEMANTIC ANALYZER: Found global method call 'printString'! Symbol node: Method 'printString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
  Variable 'c': type = 'char', adr = 1, level = 1
DEBUG - generator_C2.mj:308: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:308: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:308: SEMANTIC ANALYZER: Found local variable usage 's'! Symbol node: Variable 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:308: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:308: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:20: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:308: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:309: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:309: SEMANTIC ANALYZER: Found local variable usage 'sw'! Symbol node: Variable 'sw': type = 'int', adr = 2, level = 1
DEBUG - generator_C2.mj:309: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:310: SEMANTIC ANALYZER: Found local variable usage 'sw'! Symbol node: Variable 'sw': type = 'int', adr = 2, level = 1
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:311: SEMANTIC ANALYZER: Found global method call 'printlnString'! Symbol node: Method 'printlnString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:311: SEMANTIC ANALYZER: Found local variable usage 'baker'! Symbol node: Variable 'baker': type = 'class', adr = 5, level = 1
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:311: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'getName'! Symbol node: Method 'getName': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:311: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:313: SEMANTIC ANALYZER: Found global method call 'printlnString'! Symbol node: Method 'printlnString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:313: SEMANTIC ANALYZER: Found local variable usage 'butcher'! Symbol node: Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:313: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'getName'! Symbol node: Method 'getName': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:313: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:310: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:316: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:316: SEMANTIC ANALYZER: Found local variable usage 'workers'! Symbol node: Variable 'workers': type = 'array of class', adr = 3, level = 1
DEBUG - generator_C2.mj:316: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:317: SEMANTIC ANALYZER: Found global method call 'printlnString'! Symbol node: Method 'printlnString': type = 'void', adr = 0, level = 1
  Formal parameter 's': type = 'class', adr = 0, level = 1
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_C2.mj:317: SEMANTIC ANALYZER: Found local variable usage 'worker'! Symbol node: Variable 'worker': type = 'class', adr = 4, level = 1
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'MemberAccessDesignator'.
INFO  - generator_C2.mj:317: SEMANTIC ANALYZER: Found class 'AbsWorker' field usage 'toString'! Symbol node: Abstract method 'toString': type = 'class', adr = 0, level = 1, parent = 'AbsWorker', access modifier = public
  Variable 'this': , adr = 0, level = 1
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_C2.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_C2.mj:317: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:316: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_C2.mj:216: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_C2.mj:216: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = 0, level = 0
  Variable 's': type = 'class', adr = 0, level = 1
  Variable 's2': type = 'class', adr = 1, level = 1
  Variable 'sw': type = 'int', adr = 2, level = 1
  Variable 'workers': type = 'array of class', adr = 3, level = 1
  Variable 'worker': type = 'class', adr = 4, level = 1
  Variable 'baker': type = 'class', adr = 5, level = 1
  Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:7: SEMANTIC ANALYZER: Visited node: 'Program'.
INFO  - generator_C2.mj:7: SEMANTIC ANALYZER: Defined program 'level_c_code_generation_2'. Symbol node: Program 'level_c_code_generation_2': type = 'none', adr = 0, level = 1
  Type 'String': type = 'class', adr = 0, level = 0
  Variable 'shopHeader': type = 'class', adr = 0, level = 0
  Variable 'ownerHeader': type = 'class', adr = 1, level = 0
  Variable 'bakerHeader': type = 'class', adr = 2, level = 0
  Variable 'butcherHeader': type = 'class', adr = 3, level = 0
  Variable 'helperHeader': type = 'class', adr = 4, level = 0
  Type 'AbsWorker': type = 'abstract class', adr = 0, level = 0
  Type 'Worker': type = 'class', adr = 0, level = 0
  Type 'ShopOwner': type = 'class', adr = 0, level = 0
  Type 'Baker': type = 'class', adr = 0, level = 0
  Type 'Butcher': type = 'class', adr = 0, level = 0
  Method 'printString': type = 'void', adr = 0, level = 1
    Formal parameter 's': type = 'class', adr = 0, level = 1
    Variable 'c': type = 'char', adr = 1, level = 1
  Method 'printlnString': type = 'void', adr = 0, level = 1
    Formal parameter 's': type = 'class', adr = 0, level = 1
  Method 'main': type = 'void', adr = 0, level = 0
    Variable 's': type = 'class', adr = 0, level = 1
    Variable 's2': type = 'class', adr = 1, level = 1
    Variable 'sw': type = 'int', adr = 2, level = 1
    Variable 'workers': type = 'array of class', adr = 3, level = 1
    Variable 'worker': type = 'class', adr = 4, level = 1
    Variable 'baker': type = 'class', adr = 5, level = 1
    Variable 'butcher': type = 'class', adr = 6, level = 1
DEBUG - generator_C2.mj:7: CODE GENERATOR: Visited node: 'ProgramHeader'.
DEBUG - generator_C2.mj:9: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:13: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:51: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:44: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:45: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:9: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - generator_C2.mj:55: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_C2.mj:55: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_C2.mj:55: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_C2.mj:55: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_C2.mj:55: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_C2.mj:61: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:61: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:61: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:61: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:58: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:64: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:64: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:64: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:64: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:76: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:65: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:71: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - generator_C2.mj:74: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:74: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:74: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:74: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:71: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - generator_C2.mj:81: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:81: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:81: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:81: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:83: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:83: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:83: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:83: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:83: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:84: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:84: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:84: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:84: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:85: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:85: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:85: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:85: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:85: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:85: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:86: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:87: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:88: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:89: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:90: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:91: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:83: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:93: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:96: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:97: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:97: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:97: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:97: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:99: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:100: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:101: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:102: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:103: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:104: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:105: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:106: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:107: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:96: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:111: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:115: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:115: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:115: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:117: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:118: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:119: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:111: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - generator_C2.mj:124: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - generator_C2.mj:127: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:130: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:130: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:130: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:130: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:130: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:131: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:131: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:131: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:131: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:132: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:132: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:132: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:132: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:132: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:132: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:133: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:134: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:135: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:136: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:137: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:138: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:139: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:130: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:47: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:141: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:127: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:124: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - generator_C2.mj:146: CODE GENERATOR: Visited node: 'ClassHeader'.
DEBUG - generator_C2.mj:150: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:153: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:153: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:153: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:153: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:153: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:154: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:154: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:154: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:154: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:155: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:155: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:155: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:155: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:49: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:155: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:155: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:156: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:157: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:158: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:159: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:160: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:161: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:162: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:163: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:164: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:153: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:49: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:166: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:150: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:170: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:173: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:173: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:173: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:174: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:174: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:174: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:173: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:176: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:176: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:176: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:176: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:176: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:177: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:177: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:177: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:177: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:178: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:178: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:178: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:178: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:48: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:178: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:178: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:179: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:180: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:181: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:182: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:183: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:184: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:185: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:186: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:187: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:188: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:176: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:190: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:191: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:192: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:37: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:193: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:194: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:195: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:196: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:196: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:170: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:146: CODE GENERATOR: Visited node: 'ClassDeclaration'.
DEBUG - generator_C2.mj:202: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:23: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:23: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:39: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_C2.mj:205: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:207: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:207: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:206: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:202: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:211: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:212: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:212: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:212: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:212: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:213: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:213: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_C2.mj:211: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:216: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_C2.mj:223: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:223: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:223: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:223: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:223: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:226: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:226: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:226: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:226: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:227: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:227: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:227: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:227: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:228: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:228: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:228: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:228: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:228: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:228: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:229: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:230: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:231: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:231: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:231: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:231: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:231: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:231: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:232: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:235: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:235: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:235: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:235: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:236: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:236: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:236: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:236: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:237: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:237: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:237: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:237: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:237: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:94: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:238: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:239: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:240: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:240: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:240: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:240: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:241: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:241: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:241: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:241: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:241: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:241: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:242: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:243: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:244: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:244: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:244: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:244: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:244: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:244: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:245: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:248: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:248: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:248: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:248: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:249: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:249: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:249: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:249: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:250: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:250: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:250: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:250: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:250: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:250: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:251: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:252: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:253: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:253: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:253: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:253: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:253: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:253: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:254: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:257: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:257: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:257: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:257: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:258: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:258: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:258: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:258: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:259: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:259: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:259: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:259: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:259: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:259: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:260: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:261: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:262: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:262: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:262: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:262: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:263: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:263: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:263: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:263: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:263: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:263: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:94: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:264: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:265: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:266: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:267: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:267: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:267: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:267: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:268: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:271: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:271: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:271: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:271: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:272: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:272: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:272: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:272: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:273: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:273: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:273: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:273: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:273: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:273: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:274: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:275: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:276: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:276: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:276: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:276: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:277: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:277: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:277: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:277: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:277: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:277: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:94: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:110: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:114: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:278: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:279: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:280: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:280: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:280: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:280: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:280: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:280: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:281: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:284: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:284: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:284: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:284: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:285: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:285: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:285: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:285: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:285: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:285: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:286: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:287: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:291: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:290: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:294: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:294: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:294: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:294: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:295: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:297: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:297: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:297: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:297: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:297: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:297: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:298: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_C2.mj:300: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:300: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:300: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:300: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:300: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:300: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:70: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:301: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:296: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_C2.mj:303: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:303: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:303: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:303: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:305: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:305: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:305: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:305: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:306: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:306: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:306: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:306: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:306: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_C2.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:306: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:82: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:307: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_C2.mj:308: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:308: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:308: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:308: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:309: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:309: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_C2.mj:310: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:310: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:310: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_C2.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_C2.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_C2.mj:310: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:311: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:313: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:310: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'MemberAccessDesignator'.
DEBUG - generator_C2.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_C2.mj:317: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:316: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_C2.mj:216: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_C2.mj:7: CODE GENERATOR: Visited node: 'Program'.
