// level A code generation:
// - assignment, variable increment, variable decrement designator statements
// - designator statement, read and print statements
// - expressions, terms, all factors except method call w/ arguments (only w/o)
// - array access designator
// - global/local variables (int, char, bool or array of int, char or bool)
// - global constants
program level_a_code_generation
    const int N = 25, M = 15;
    const char SPACE = ' ', C = 'C';
    const bool T = true, F = false;

    int x, y, z[];
    char c;
    bool ind;
{
    void printHello() {
        print('H'); print('e'); print('l'); print('l'); print('o');
        print(SPACE);
        print('W'); print('o'); print('r'); print('l'); print('d'); print('!');
        print(eol);
    }

    int getValue() {
        return (x - y) * N - z[N - 1] % M;
    }

    void main()
        int a, b, arr[];
        char msg[];
        bool valid;
    {
        // method call
        printHello();

        // global constants print
        print('N'); print(N); print(SPACE); print('M'); print(M); print(eol);
        print('C'); print(C); print(eol);
        print('T'); print(T); print(SPACE); print('F'); print(F); print(eol);

        // global variables
        x = 5;
        print('x'); print(x); print(eol);
        y = x += 2;
        y++;
        x--;
        print('x'); print(x); print(SPACE); print('y'); print(y); print(eol);
        z = new int[N];
        z[x] = -5;
        print('z'); print('['); print(x); print(']'); print(z[x]); print(eol);
        c = chr(65);
        print('c'); print(c); print(eol);
        ind = T;
        print('i'); print('n'); print('d'); print(ind); print(eol);

        // local variables
        a = z[x] *= -x + N * M % (M - y);
        print('z'); print('['); print(x); print(']'); print(z[x]); print(SPACE); print('a'); print(a); print(eol);
        b = ord('C');
        print('b'); print(b); print(SPACE);
        b += (N - 2) * (M + 5) + (y / 2);
        print('b'); print(b); print(eol);
        arr = new int[(M * 2) + 7];
        print('l'); print('e'); print('n'); print(len(arr)); print(eol);
        msg = new char[8];
        msg[0] = 'M'; msg[1] = 'e'; msg[2] = 's'; msg[3] = 's'; msg[4] = 'a'; msg[5] = 'g'; msg[6] = 'e'; msg[7] = eol;
        print(msg[0]); print(msg[1]); print(msg[2]); print(msg[3]); print(msg[4]); print(msg[5]); print(msg[6]); print(msg[7]);
        valid = true;
        print('v'); print('a'); print('l'); print('i'); print('d'); print(valid); print(eol);

        // read global variables
        read(x);
        print('x'); print(x); print(eol);
        read(z[N - 1]);
        print('z'); print('['); print(N - 1); print(']'); print(z[N - 1]); print(eol);
        read(c);
        print('c'); print(c); print(eol);
        read(ind);
        print('i'); print('n'); print('d'); print(ind); print(eol);

        // read local variables
        read(a);
        print('a'); print(a); print(eol);
        read(msg[0]);
        print('m'); print('s'); print('g'); print('['); print(0); print(']'); print(msg[0]); print(eol);
        read(valid);
        print('v'); print('a'); print('l'); print('i'); print('d'); print(valid); print(eol);

        print(chr(65)); print(ord('C')); print(eol);

        print('a'); print(a); print(SPACE);
        a = getValue();
        print('a'); print(a); print(eol);
    }
}