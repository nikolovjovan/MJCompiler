DEBUG - generator_B.mj:8:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - generator_B.mj:8:9: LEXER: Found symbol: '#55' with value: 'level_b_code_generation'
DEBUG - generator_B.mj:9:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:9:9: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:9:16: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:9:18: LEXER: Found symbol: '#55' with value: 'globalIt'
DEBUG - generator_B.mj:9:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:10:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:11:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:11:10: LEXER: Found symbol: '#55' with value: 'readArray'
DEBUG - generator_B.mj:11:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:11:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:11:24: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:11:27: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:11:28: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:11:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:12:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:12:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:12:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:13:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:14:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:14:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:14:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:14:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:14:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:14:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:14:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:14:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:14:25: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:14:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:14:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:14:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:14:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:14:35: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:14:36: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:14:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:14:40: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:15:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:15:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:15:19: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:15:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:15:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:15:25: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:15:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:15:31: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:15:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:15:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:15:37: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:15:42: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:15:43: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:15:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:15:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:16:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:16:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:16:19: LEXER: Found symbol: '#53' with value: '['
DEBUG - generator_B.mj:16:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:16:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:16:25: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:16:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:16:31: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:16:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:16:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:16:35: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:16:40: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:16:41: LEXER: Found symbol: '#53' with value: ']'
DEBUG - generator_B.mj:16:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:16:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:16:47: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:16:52: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:16:53: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:16:56: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:16:57: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:16:59: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:16:64: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:16:65: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:16:68: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:16:69: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:16:71: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:16:76: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:16:77: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:16:80: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:16:81: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:17:13: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_B.mj:17:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:17:18: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:17:21: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:17:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:17:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:17:24: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:17:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:18:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:19:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:21:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:21:10: LEXER: Found symbol: '#55' with value: 'printArray'
DEBUG - generator_B.mj:21:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:21:21: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:21:25: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:21:28: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:21:29: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:21:30: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:21:32: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:21:37: LEXER: Found symbol: '#55' with value: 'inline'
DEBUG - generator_B.mj:21:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:22:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:22:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:22:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:22:16: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:22:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:23:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:24:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:24:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:24:13: LEXER: Found symbol: '#55' with value: 'inline'
DEBUG - generator_B.mj:24:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:24:21: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:26:13: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:26:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:26:22: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:26:25: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:26:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:26:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:26:32: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:27:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:27:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:27:23: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:27:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:27:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:27:28: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:27:33: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:27:34: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:27:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:27:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:28:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:29:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:29:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:29:19: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:29:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:29:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:30:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:30:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:30:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:31:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:31:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:31:17: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:31:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:33:13: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:33:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:33:22: LEXER: Found symbol: '#55' with value: 'globalIt'
DEBUG - generator_B.mj:33:31: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:33:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:33:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:33:38: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:34:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:34:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:34:23: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:34:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:34:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:34:29: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:34:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:34:35: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:34:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:34:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:34:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:34:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:34:47: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:34:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:34:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:35:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:35:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:35:23: LEXER: Found symbol: '#53' with value: '['
DEBUG - generator_B.mj:35:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:35:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:35:29: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:35:34: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:35:35: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:35:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:35:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:35:39: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:35:44: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:35:45: LEXER: Found symbol: '#53' with value: ']'
DEBUG - generator_B.mj:35:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:35:49: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:35:51: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:35:56: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:35:57: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:35:60: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:35:61: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:35:63: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:35:68: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:35:69: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:35:72: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:35:73: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:35:75: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:35:80: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:35:81: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:35:84: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:35:85: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:36:17: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:36:22: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:36:23: LEXER: Found symbol: '#55' with value: 'globalIt'
DEBUG - generator_B.mj:36:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:36:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:36:34: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:36:39: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:36:40: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:36:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:36:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:37:17: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:37:18: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:37:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:38:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:39:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:40:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:42:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:42:10: LEXER: Found symbol: '#55' with value: 'swap'
DEBUG - generator_B.mj:42:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:42:15: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:42:19: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:42:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:42:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:42:24: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:42:26: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:42:30: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:42:31: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:42:33: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:42:37: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:42:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:43:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:43:13: LEXER: Found symbol: '#55' with value: 'tmp'
DEBUG - generator_B.mj:43:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:44:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:45:9: LEXER: Found symbol: '#55' with value: 'tmp'
DEBUG - generator_B.mj:45:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:45:15: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:45:18: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:45:19: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:45:20: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:45:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:46:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:46:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:46:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:46:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:46:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:46:18: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:46:21: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:46:22: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:46:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:46:24: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:47:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:47:12: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:47:13: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:47:14: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:47:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:47:18: LEXER: Found symbol: '#55' with value: 'tmp'
DEBUG - generator_B.mj:47:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:48:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:50:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:50:10: LEXER: Found symbol: '#55' with value: 'sortArray'
DEBUG - generator_B.mj:50:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:50:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:50:24: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:50:27: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:50:28: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:50:29: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:50:31: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:50:36: LEXER: Found symbol: '#55' with value: 'asc'
DEBUG - generator_B.mj:50:39: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:51:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:51:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:51:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:51:16: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:51:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:52:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:54:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:54:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:54:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:54:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:54:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:54:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:54:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:54:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:54:25: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:54:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:54:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:54:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:54:34: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:54:36: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:54:37: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:54:39: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:54:40: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:54:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:54:44: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:55:13: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:55:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:55:18: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:55:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:55:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:55:24: LEXER: Found symbol: '#22' with value: '+'
DEBUG - generator_B.mj:55:26: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:55:27: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:55:29: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:55:31: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:55:33: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:55:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:55:37: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:55:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:55:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:55:43: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:55:44: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:55:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:55:48: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:56:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:56:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:56:21: LEXER: Found symbol: '#55' with value: 'asc'
DEBUG - generator_B.mj:56:25: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_B.mj:56:28: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:56:31: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:56:32: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:56:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:56:35: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:56:37: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:56:40: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:56:41: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:56:42: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:56:44: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_B.mj:56:47: LEXER: Found symbol: '#55' with value: 'asc'
DEBUG - generator_B.mj:56:51: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:56:54: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:56:60: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_B.mj:56:63: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:56:66: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:56:67: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:56:68: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:56:70: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:56:72: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:56:75: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:56:76: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:56:77: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:56:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:56:80: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:57:21: LEXER: Found symbol: '#55' with value: 'swap'
DEBUG - generator_B.mj:57:25: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:57:26: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:57:29: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:57:31: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:57:32: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:57:34: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:57:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:57:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:58:17: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:59:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:60:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:61:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:65:5: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:65:10: LEXER: Found symbol: '#55' with value: 'compareArraysFor'
DEBUG - generator_B.mj:65:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:65:27: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:65:31: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_B.mj:65:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:65:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:65:34: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:65:36: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:65:40: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:65:41: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:65:42: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:65:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:66:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:66:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:66:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:66:16: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:66:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:67:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:67:14: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:67:18: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:67:20: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:67:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:68:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:69:9: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:69:14: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:69:16: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:69:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:70:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:70:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:70:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:70:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:70:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:70:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:70:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:70:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:70:25: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:70:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:70:29: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_B.mj:70:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:70:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:70:33: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:70:34: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:70:36: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:70:38: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:71:13: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:71:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:71:21: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:71:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:72:13: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:72:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:72:18: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:72:20: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:72:22: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:72:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:72:25: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:72:27: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:72:29: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:72:32: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:72:33: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:72:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:72:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:72:37: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:72:38: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:72:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:72:42: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:73:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:73:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:73:21: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_B.mj:73:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:73:23: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:73:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:73:26: LEXER: Found symbol: '#30' with value: '!='
DEBUG - generator_B.mj:73:29: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:73:30: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:73:31: LEXER: Found symbol: '#55' with value: 'j'
DEBUG - generator_B.mj:73:32: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:73:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:73:35: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - generator_B.mj:73:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:74:17: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:74:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:74:25: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:74:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:75:17: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_B.mj:75:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:76:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:77:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:77:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:77:17: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:77:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:77:24: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - generator_B.mj:77:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:78:13: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:78:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:78:20: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:78:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:79:13: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_B.mj:79:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:80:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:81:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:81:16: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:81:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:82:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:86:5: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:86:10: LEXER: Found symbol: '#55' with value: 'compareArraysForEach'
DEBUG - generator_B.mj:86:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:86:31: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:86:35: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_B.mj:86:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:86:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:86:38: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:86:40: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:86:44: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:86:45: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:86:46: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:86:47: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:87:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:87:13: LEXER: Found symbol: '#55' with value: 'itA'
DEBUG - generator_B.mj:87:16: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:87:18: LEXER: Found symbol: '#55' with value: 'itB'
DEBUG - generator_B.mj:87:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:88:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:88:14: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:88:18: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:88:20: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:88:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:89:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:90:9: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:90:14: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:90:16: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:90:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:91:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:91:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:91:18: LEXER: Found symbol: '#55' with value: 'itA'
DEBUG - generator_B.mj:91:22: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:91:24: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - generator_B.mj:91:25: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:91:27: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:92:13: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:92:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:92:21: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:92:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:93:13: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:93:21: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:93:22: LEXER: Found symbol: '#55' with value: 'itB'
DEBUG - generator_B.mj:93:26: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:93:28: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:93:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:93:31: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:94:17: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:94:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:94:21: LEXER: Found symbol: '#55' with value: 'itA'
DEBUG - generator_B.mj:94:25: LEXER: Found symbol: '#30' with value: '!='
DEBUG - generator_B.mj:94:28: LEXER: Found symbol: '#55' with value: 'itB'
DEBUG - generator_B.mj:94:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:94:33: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - generator_B.mj:94:41: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:95:17: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:95:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:95:25: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:95:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:96:17: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_B.mj:96:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:97:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:98:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:98:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:98:17: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:98:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:98:24: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - generator_B.mj:98:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:99:13: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:99:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:99:20: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:99:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:100:13: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_B.mj:100:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:101:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:102:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:102:16: LEXER: Found symbol: '#55' with value: 'same'
DEBUG - generator_B.mj:102:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:103:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:105:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:105:10: LEXER: Found symbol: '#55' with value: 'printBool'
DEBUG - generator_B.mj:105:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:105:20: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:105:25: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:105:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:105:28: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:106:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:106:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:106:13: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - generator_B.mj:106:14: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:106:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:107:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:107:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:107:19: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_B.mj:107:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:107:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:107:25: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:107:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:107:31: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:107:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:107:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:107:37: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:107:42: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:107:43: LEXER: Found symbol: '#53' with value: 'u'
DEBUG - generator_B.mj:107:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:107:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:107:49: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:107:54: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:107:55: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:107:58: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:107:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:108:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:108:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:108:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:109:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:109:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:109:19: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:109:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:109:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:109:25: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:109:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:109:31: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:109:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:109:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:109:37: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:109:42: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:109:43: LEXER: Found symbol: '#53' with value: 'l'
DEBUG - generator_B.mj:109:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:109:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:109:49: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:109:54: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:109:55: LEXER: Found symbol: '#53' with value: 's'
DEBUG - generator_B.mj:109:58: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:109:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:109:61: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:109:66: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:109:67: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:109:70: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:109:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:110:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:111:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:113:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:113:10: LEXER: Found symbol: '#55' with value: 'conditionalPrint'
DEBUG - generator_B.mj:113:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:113:27: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:113:31: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:113:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:113:34: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:115:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:115:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:115:13: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:115:15: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:115:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:115:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:115:21: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:116:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:116:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:116:19: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:116:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:116:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:117:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:117:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:117:16: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:117:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:117:20: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:117:22: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:117:25: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:117:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:117:28: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:118:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:118:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:118:19: LEXER: Found symbol: '#53' with value: 'b'
DEBUG - generator_B.mj:118:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:118:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:119:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:119:11: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:119:16: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:120:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:120:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:120:19: LEXER: Found symbol: '#53' with value: '!'
DEBUG - generator_B.mj:120:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:120:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:121:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:122:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:122:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:122:15: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:122:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:122:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:123:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:125:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:125:10: LEXER: Found symbol: '#55' with value: 'iftest'
DEBUG - generator_B.mj:125:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:125:17: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:126:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:126:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:126:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:126:16: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:126:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:127:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:128:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:128:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:128:13: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:128:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:128:16: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:128:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:128:20: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_B.mj:128:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:129:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:129:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:129:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:129:15: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:129:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:129:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:129:21: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:129:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:129:25: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:129:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:130:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:130:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:130:15: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:130:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:130:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:130:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:130:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:130:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:130:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:130:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:130:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:130:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:130:37: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:130:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:130:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:130:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:130:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:130:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:130:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:130:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:132:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:132:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:132:13: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:132:14: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_B.mj:132:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:132:17: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:132:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:132:21: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:132:22: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_B.mj:132:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:133:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:133:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:133:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:133:15: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:133:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:133:20: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_B.mj:133:23: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:133:25: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:133:27: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:133:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:133:30: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:133:32: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:133:34: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:133:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:134:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:134:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:134:15: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:134:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:134:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:134:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:134:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:134:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:134:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:134:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:134:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:134:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:134:37: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:134:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:134:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:134:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:134:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:134:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:134:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:134:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:136:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:136:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:136:13: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:136:14: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_B.mj:136:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:136:17: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:136:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:136:21: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:136:22: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_B.mj:136:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:137:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:137:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:137:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:137:15: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:137:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:137:20: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_B.mj:137:23: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:137:25: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:137:27: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:137:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:137:30: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:137:32: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:137:34: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:137:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:138:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:138:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:138:15: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_B.mj:138:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:138:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:138:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:138:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:138:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:138:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:138:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:138:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:138:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:138:37: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:138:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:138:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:138:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:138:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:138:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:138:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:138:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:140:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:140:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:140:13: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:140:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:140:16: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:140:18: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:140:20: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_B.mj:140:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:141:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:141:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:141:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:141:15: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:141:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:141:20: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_B.mj:141:23: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:141:25: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:141:27: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:141:29: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_B.mj:141:32: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:141:34: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:141:36: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:141:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:141:39: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:141:41: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:141:43: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:141:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:142:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:142:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:142:15: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_B.mj:142:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:142:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:142:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:142:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:142:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:142:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:142:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:142:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:142:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:142:37: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:142:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:142:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:142:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:142:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:142:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:142:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:142:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:144:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:144:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:144:13: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:144:14: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:144:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:144:17: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:144:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:144:21: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:144:22: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_B.mj:144:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:145:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:145:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:145:13: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:145:15: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:145:17: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:145:19: LEXER: Found symbol: '#35' with value: '&&'
DEBUG - generator_B.mj:145:22: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:145:24: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:145:26: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:145:28: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_B.mj:145:31: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:145:33: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:145:36: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:145:38: LEXER: Found symbol: '#36' with value: '||'
DEBUG - generator_B.mj:145:41: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_B.mj:145:43: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:145:45: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_B.mj:145:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:145:48: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:145:50: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:145:52: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:145:53: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:146:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:146:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:146:15: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_B.mj:146:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:146:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:146:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:146:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:146:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:146:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:146:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:146:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:146:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:146:37: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:146:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:146:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:146:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:146:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:146:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:146:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:146:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:148:9: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:148:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:148:13: LEXER: Found symbol: '#52' with value: '10'
DEBUG - generator_B.mj:148:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:148:17: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:148:19: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:148:21: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_B.mj:148:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:149:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:149:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:149:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:149:15: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:149:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:149:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:149:21: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:149:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:149:25: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:149:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:150:9: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:150:14: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:150:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:150:18: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:150:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:151:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:151:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:151:15: LEXER: Found symbol: '#52' with value: '6'
DEBUG - generator_B.mj:151:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:151:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:151:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:151:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:151:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:151:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:151:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:151:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:151:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:151:37: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:151:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:151:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:151:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:151:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:151:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:151:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:151:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:153:9: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:153:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:153:13: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:153:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:154:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:154:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:154:15: LEXER: Found symbol: '#52' with value: '7'
DEBUG - generator_B.mj:154:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:154:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:154:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:154:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:154:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:154:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:154:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:155:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:155:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:155:13: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:155:15: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:155:17: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:155:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:156:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:156:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:156:17: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:156:19: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:156:21: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_B.mj:156:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:156:24: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:156:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:156:30: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:156:33: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:156:34: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:157:13: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:157:18: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:157:23: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:157:24: LEXER: Found symbol: '#53' with value: 'b'
DEBUG - generator_B.mj:157:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:157:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:158:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:158:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:158:15: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:158:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:158:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:160:9: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:160:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:160:13: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_B.mj:160:14: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:161:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:161:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:161:13: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:161:15: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:161:17: LEXER: Found symbol: '#52' with value: '10'
DEBUG - generator_B.mj:161:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:161:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:161:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:161:25: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:161:26: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:162:9: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:162:14: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:162:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:162:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:162:20: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:162:22: LEXER: Found symbol: '#52' with value: '5'
DEBUG - generator_B.mj:162:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:162:25: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:162:27: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:162:29: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:162:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:163:9: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:163:14: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:163:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:163:18: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:163:20: LEXER: Found symbol: '#31' with value: '>'
DEBUG - generator_B.mj:163:22: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:163:23: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:163:25: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:163:27: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:163:29: LEXER: Found symbol: '#52' with value: '3'
DEBUG - generator_B.mj:163:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:164:9: LEXER: Found symbol: '#6' with value: 'else'
DEBUG - generator_B.mj:164:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:164:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:164:18: LEXER: Found symbol: '#52' with value: '4'
DEBUG - generator_B.mj:164:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:165:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:165:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:165:15: LEXER: Found symbol: '#52' with value: '8'
DEBUG - generator_B.mj:165:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:165:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:165:19: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:165:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:165:25: LEXER: Found symbol: '#53' with value: ':'
DEBUG - generator_B.mj:165:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:165:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:165:31: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:165:36: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:165:37: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:165:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:165:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:165:41: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:165:46: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:165:47: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:165:50: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:165:51: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:166:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:168:5: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:168:10: LEXER: Found symbol: '#55' with value: 'findElementFor'
DEBUG - generator_B.mj:168:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:168:25: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:168:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:168:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:168:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:168:34: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:168:36: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:168:40: LEXER: Found symbol: '#55' with value: 'elem'
DEBUG - generator_B.mj:168:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:169:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:169:14: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:169:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:170:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:171:9: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:171:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:171:17: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:171:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:173:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:173:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:173:14: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:173:22: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:173:24: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:173:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:173:27: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:173:35: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:173:37: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:173:40: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:173:41: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:173:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:173:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:173:47: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:173:54: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:173:56: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:173:58: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:174:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:174:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:174:17: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:174:20: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:174:21: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:174:28: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:174:30: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:174:33: LEXER: Found symbol: '#55' with value: 'elem'
DEBUG - generator_B.mj:174:37: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:174:39: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:175:17: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:175:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:175:25: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:175:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:177:17: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_B.mj:177:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:178:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:179:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:180:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:15: LEXER: Found symbol: '#53' with value: 'g'
DEBUG - generator_B.mj:180:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:27: LEXER: Found symbol: '#53' with value: 'l'
DEBUG - generator_B.mj:180:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:39: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:180:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:51: LEXER: Found symbol: '#53' with value: 'b'
DEBUG - generator_B.mj:180:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:63: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:180:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:75: LEXER: Found symbol: '#53' with value: 'l'
DEBUG - generator_B.mj:180:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:81: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:86: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:87: LEXER: Found symbol: '#53' with value: 'I'
DEBUG - generator_B.mj:180:90: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:91: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:93: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:98: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:99: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:180:102: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:105: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:110: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:111: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:180:114: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:115: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:117: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:122: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:123: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:180:126: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:127: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:129: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:134: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:135: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:180:142: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:143: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:180:145: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:180:150: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:180:151: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:180:154: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:180:155: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:181:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:181:16: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:181:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:182:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:184:5: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:184:10: LEXER: Found symbol: '#55' with value: 'findElementForEach'
DEBUG - generator_B.mj:184:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:184:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:184:33: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:184:36: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:184:37: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:184:38: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:184:40: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:184:44: LEXER: Found symbol: '#55' with value: 'elem'
DEBUG - generator_B.mj:184:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:185:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:185:13: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:185:15: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:186:9: LEXER: Found symbol: '#55' with value: 'bool'
DEBUG - generator_B.mj:186:14: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:186:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:187:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:188:9: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:188:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:188:17: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:188:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:190:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:190:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:190:18: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:190:21: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:190:23: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:190:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:190:28: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:191:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:191:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:191:17: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:191:20: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:191:23: LEXER: Found symbol: '#55' with value: 'elem'
DEBUG - generator_B.mj:191:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:191:29: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:192:17: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:192:23: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:192:25: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:192:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:194:17: LEXER: Found symbol: '#3' with value: 'break'
DEBUG - generator_B.mj:194:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:195:13: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:196:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:197:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:15: LEXER: Found symbol: '#53' with value: 'i'
DEBUG - generator_B.mj:197:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:197:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:27: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_B.mj:197:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:197:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:39: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:197:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:197:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:51: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:197:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:197:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:63: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:197:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:197:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:75: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:197:77: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:78: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:197:80: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:197:85: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:197:86: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:197:89: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:197:90: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:198:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:198:16: LEXER: Found symbol: '#55' with value: 'found'
DEBUG - generator_B.mj:198:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:199:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:201:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:201:9: LEXER: Found symbol: '#55' with value: 'countOddFor'
DEBUG - generator_B.mj:201:20: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:201:21: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:201:25: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:201:28: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:201:29: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:201:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:202:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:202:13: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:202:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:202:16: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:202:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:203:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:204:9: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:204:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:204:17: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:204:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:205:9: LEXER: Found symbol: '#14' with value: 'for'
DEBUG - generator_B.mj:205:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:205:14: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:205:16: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:205:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:205:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:205:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:205:23: LEXER: Found symbol: '#33' with value: '<'
DEBUG - generator_B.mj:205:25: LEXER: Found symbol: '#55' with value: 'len'
DEBUG - generator_B.mj:205:28: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:205:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:205:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:205:33: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:205:35: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:205:36: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:205:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:205:40: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:207:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:207:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:207:17: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:207:20: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:207:21: LEXER: Found symbol: '#55' with value: 'i'
DEBUG - generator_B.mj:207:22: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:207:24: LEXER: Found symbol: '#26' with value: '%'
DEBUG - generator_B.mj:207:26: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:207:28: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:207:31: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:207:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:207:34: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - generator_B.mj:207:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:208:13: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:208:18: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:208:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:209:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:210:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:210:16: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:210:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:211:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:213:5: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:213:9: LEXER: Found symbol: '#55' with value: 'countOddForEach'
DEBUG - generator_B.mj:213:24: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:213:25: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:213:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:213:32: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:213:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:213:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:214:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:214:13: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:214:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:214:17: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:214:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:215:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:216:9: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:216:15: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:216:17: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:216:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:217:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:217:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:217:18: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:217:21: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:217:23: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:217:26: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:217:28: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:219:13: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:219:16: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:219:17: LEXER: Found symbol: '#55' with value: 'it'
DEBUG - generator_B.mj:219:20: LEXER: Found symbol: '#26' with value: '%'
DEBUG - generator_B.mj:219:22: LEXER: Found symbol: '#52' with value: '2'
DEBUG - generator_B.mj:219:24: LEXER: Found symbol: '#29' with value: '=='
DEBUG - generator_B.mj:219:27: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:219:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:219:30: LEXER: Found symbol: '#16' with value: 'continue'
DEBUG - generator_B.mj:219:38: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:220:13: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:220:18: LEXER: Found symbol: '#27' with value: '++'
DEBUG - generator_B.mj:220:20: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:221:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:222:9: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:222:16: LEXER: Found symbol: '#55' with value: 'count'
DEBUG - generator_B.mj:222:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:223:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:225:5: LEXER: Found symbol: '#13' with value: 'void'
DEBUG - generator_B.mj:225:10: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - generator_B.mj:225:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:225:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:226:9: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:226:13: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:226:14: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:226:16: LEXER: Found symbol: '#55' with value: 'e'
DEBUG - generator_B.mj:226:17: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:226:19: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:226:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:226:23: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:226:24: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:226:26: LEXER: Found symbol: '#55' with value: 'arrCopy'
DEBUG - generator_B.mj:226:33: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:226:34: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:226:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:227:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:228:9: LEXER: Found symbol: '#55' with value: 'iftest'
DEBUG - generator_B.mj:228:15: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:228:16: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:228:17: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:15: LEXER: Found symbol: '#53' with value: 's'
DEBUG - generator_B.mj:230:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:27: LEXER: Found symbol: '#53' with value: 'w'
DEBUG - generator_B.mj:230:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:39: LEXER: Found symbol: '#53' with value: 'i'
DEBUG - generator_B.mj:230:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:51: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_B.mj:230:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:63: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_B.mj:230:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:75: LEXER: Found symbol: '#53' with value: 'h'
DEBUG - generator_B.mj:230:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:81: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:86: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:87: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:230:90: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:91: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:93: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:98: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:99: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:230:102: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:230:105: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:230:110: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:230:111: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:230:114: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:230:115: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:231:9: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_B.mj:231:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:231:14: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:231:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:231:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:232:9: LEXER: Found symbol: '#55' with value: 'conditionalPrint'
DEBUG - generator_B.mj:232:25: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:232:26: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:232:27: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:232:28: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:234:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:234:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:234:15: LEXER: Found symbol: '#53' with value: 'n'
DEBUG - generator_B.mj:234:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:234:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:234:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:234:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:234:27: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:234:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:234:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:234:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:234:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:234:39: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:234:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:234:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:234:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:234:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:234:51: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:234:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:234:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:235:9: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_B.mj:235:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:235:14: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:235:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:235:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:236:9: LEXER: Found symbol: '#8' with value: 'if'
DEBUG - generator_B.mj:236:12: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:236:13: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:236:15: LEXER: Found symbol: '#34' with value: '<='
DEBUG - generator_B.mj:236:18: LEXER: Found symbol: '#52' with value: '0'
DEBUG - generator_B.mj:236:19: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:236:21: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:237:13: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:237:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:237:19: LEXER: Found symbol: '#53' with value: 'B'
DEBUG - generator_B.mj:237:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:237:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:237:25: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:237:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:237:31: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:237:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:237:35: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:237:37: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:237:42: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:237:43: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_B.mj:237:46: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:237:47: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:237:49: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:237:54: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:237:55: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:237:58: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:237:59: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:237:61: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:237:66: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:237:67: LEXER: Found symbol: '#53' with value: 'n'
DEBUG - generator_B.mj:237:70: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:237:71: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:237:73: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:237:78: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:237:79: LEXER: Found symbol: '#53' with value: '!'
DEBUG - generator_B.mj:237:82: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:237:83: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:238:13: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - generator_B.mj:238:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:239:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:241:9: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:241:13: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:241:15: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_B.mj:241:19: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:241:22: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:241:23: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:241:24: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:241:25: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:243:9: LEXER: Found symbol: '#55' with value: 'readArray'
DEBUG - generator_B.mj:243:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:243:19: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:243:22: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:243:23: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:244:9: LEXER: Found symbol: '#55' with value: 'printArray'
DEBUG - generator_B.mj:244:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:244:20: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:244:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:244:25: LEXER: Found symbol: '#54' with value: 'false'
DEBUG - generator_B.mj:244:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:244:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:246:9: LEXER: Found symbol: '#55' with value: 'arrCopy'
DEBUG - generator_B.mj:246:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:246:19: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - generator_B.mj:246:23: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - generator_B.mj:246:26: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:246:27: LEXER: Found symbol: '#55' with value: 'n'
DEBUG - generator_B.mj:246:28: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:246:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:247:9: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:247:17: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:247:19: LEXER: Found symbol: '#23' with value: '-'
DEBUG - generator_B.mj:247:20: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:247:21: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:248:9: LEXER: Found symbol: '#17' with value: 'foreach'
DEBUG - generator_B.mj:248:17: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:248:18: LEXER: Found symbol: '#55' with value: 'globalIt'
DEBUG - generator_B.mj:248:27: LEXER: Found symbol: '#48' with value: ':'
DEBUG - generator_B.mj:248:29: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:248:32: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:248:34: LEXER: Found symbol: '#46' with value: '{'
DEBUG - generator_B.mj:249:13: LEXER: Found symbol: '#55' with value: 'arrCopy'
DEBUG - generator_B.mj:249:20: LEXER: Found symbol: '#44' with value: '['
DEBUG - generator_B.mj:249:21: LEXER: Found symbol: '#55' with value: 'globalI'
DEBUG - generator_B.mj:249:29: LEXER: Found symbol: '#37' with value: '+='
DEBUG - generator_B.mj:249:32: LEXER: Found symbol: '#52' with value: '1'
DEBUG - generator_B.mj:249:33: LEXER: Found symbol: '#45' with value: ']'
DEBUG - generator_B.mj:249:35: LEXER: Found symbol: '#21' with value: '='
DEBUG - generator_B.mj:249:37: LEXER: Found symbol: '#55' with value: 'globalIt'
DEBUG - generator_B.mj:249:45: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:250:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:252:9: LEXER: Found symbol: '#55' with value: 'sortArray'
DEBUG - generator_B.mj:252:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:252:19: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:252:22: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:252:24: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:252:28: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:252:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:253:9: LEXER: Found symbol: '#55' with value: 'printArray'
DEBUG - generator_B.mj:253:19: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:253:20: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:253:23: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:253:25: LEXER: Found symbol: '#54' with value: 'true'
DEBUG - generator_B.mj:253:29: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:253:30: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:15: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_B.mj:255:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:255:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:39: LEXER: Found symbol: '#53' with value: 'm'
DEBUG - generator_B.mj:255:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:51: LEXER: Found symbol: '#53' with value: 'p'
DEBUG - generator_B.mj:255:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:63: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:255:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:75: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:255:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:81: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:86: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:87: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:255:90: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:91: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:255:93: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:255:98: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:255:99: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:255:102: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:255:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:256:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:256:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:256:15: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:256:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:256:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:256:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:256:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:256:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:256:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:256:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:256:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:256:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:256:39: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:256:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:256:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:256:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:256:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:256:51: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:256:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:256:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:257:9: LEXER: Found symbol: '#55' with value: 'printBool'
DEBUG - generator_B.mj:257:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:257:19: LEXER: Found symbol: '#55' with value: 'compareArraysFor'
DEBUG - generator_B.mj:257:35: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:257:36: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:257:39: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:257:41: LEXER: Found symbol: '#55' with value: 'arrCopy'
DEBUG - generator_B.mj:257:48: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:257:49: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:257:50: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:257:52: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:257:57: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:257:58: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:257:61: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:257:62: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:15: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:258:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:258:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:39: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:258:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:51: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:258:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:63: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:258:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:75: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_B.mj:258:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:81: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:86: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:87: LEXER: Found symbol: '#53' with value: 'h'
DEBUG - generator_B.mj:258:90: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:91: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:258:93: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:258:98: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:258:99: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:258:102: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:258:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:259:9: LEXER: Found symbol: '#55' with value: 'printBool'
DEBUG - generator_B.mj:259:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:259:19: LEXER: Found symbol: '#55' with value: 'compareArraysForEach'
DEBUG - generator_B.mj:259:39: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:259:40: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:259:43: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:259:45: LEXER: Found symbol: '#55' with value: 'arrCopy'
DEBUG - generator_B.mj:259:52: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:259:53: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:259:54: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:259:56: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:259:61: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:259:62: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:259:65: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:259:66: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:261:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:261:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:261:15: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:261:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:261:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:261:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:261:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:261:27: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:261:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:261:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:261:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:261:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:261:39: LEXER: Found symbol: '#53' with value: '='
DEBUG - generator_B.mj:261:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:261:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:261:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:261:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:261:51: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:261:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:261:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:262:9: LEXER: Found symbol: '#11' with value: 'read'
DEBUG - generator_B.mj:262:13: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:262:14: LEXER: Found symbol: '#55' with value: 'e'
DEBUG - generator_B.mj:262:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:262:16: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:264:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:264:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:264:15: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:264:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:264:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:264:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:264:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:264:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:264:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:264:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:264:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:264:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:264:39: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:264:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:264:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:264:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:264:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:264:51: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:264:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:264:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:265:9: LEXER: Found symbol: '#55' with value: 'printBool'
DEBUG - generator_B.mj:265:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:265:19: LEXER: Found symbol: '#55' with value: 'findElementFor'
DEBUG - generator_B.mj:265:33: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:265:34: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:265:37: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:265:39: LEXER: Found symbol: '#55' with value: 'e'
DEBUG - generator_B.mj:265:40: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:265:41: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:265:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:265:44: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:265:49: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:265:50: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:265:53: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:265:54: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:15: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:266:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:266:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:39: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:266:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:51: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:266:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:63: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:266:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:75: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_B.mj:266:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:81: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:86: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:87: LEXER: Found symbol: '#53' with value: 'h'
DEBUG - generator_B.mj:266:90: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:91: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:266:93: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:266:98: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:266:99: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:266:102: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:266:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:267:9: LEXER: Found symbol: '#55' with value: 'printBool'
DEBUG - generator_B.mj:267:18: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:267:19: LEXER: Found symbol: '#55' with value: 'findElementForEach'
DEBUG - generator_B.mj:267:37: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:267:38: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:267:41: LEXER: Found symbol: '#50' with value: ','
DEBUG - generator_B.mj:267:43: LEXER: Found symbol: '#55' with value: 'e'
DEBUG - generator_B.mj:267:44: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:267:45: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:267:46: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:267:48: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:267:53: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:267:54: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:267:57: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:267:58: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:269:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:269:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:269:15: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:269:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:269:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:269:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:269:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:269:27: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_B.mj:269:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:269:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:269:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:269:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:269:39: LEXER: Found symbol: '#53' with value: 'd'
DEBUG - generator_B.mj:269:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:269:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:269:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:269:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:269:51: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:269:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:269:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:270:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:270:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:270:15: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_B.mj:270:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:270:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:270:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:270:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:270:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:270:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:270:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:270:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:270:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:270:39: LEXER: Found symbol: '#53' with value: 'u'
DEBUG - generator_B.mj:270:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:270:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:270:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:270:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:270:51: LEXER: Found symbol: '#53' with value: 'n'
DEBUG - generator_B.mj:270:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:270:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:270:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:270:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:270:63: LEXER: Found symbol: '#53' with value: 't'
DEBUG - generator_B.mj:270:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:270:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:270:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:270:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:270:75: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:270:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:270:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:272:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:272:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:272:15: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:272:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:272:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:272:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:272:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:272:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:272:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:272:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:272:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:272:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:272:39: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:272:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:272:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:272:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:272:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:272:51: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:272:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:272:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:273:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:273:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:273:15: LEXER: Found symbol: '#55' with value: 'countOddFor'
DEBUG - generator_B.mj:273:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:273:27: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:273:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:273:31: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:273:32: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:273:34: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:273:39: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:273:40: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:273:43: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:273:44: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:15: LEXER: Found symbol: '#53' with value: 'f'
DEBUG - generator_B.mj:274:18: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:19: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:21: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:26: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:27: LEXER: Found symbol: '#53' with value: 'o'
DEBUG - generator_B.mj:274:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:31: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:33: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:38: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:39: LEXER: Found symbol: '#53' with value: 'r'
DEBUG - generator_B.mj:274:42: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:43: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:45: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:50: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:51: LEXER: Found symbol: '#53' with value: 'e'
DEBUG - generator_B.mj:274:54: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:55: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:57: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:62: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:63: LEXER: Found symbol: '#53' with value: 'a'
DEBUG - generator_B.mj:274:66: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:67: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:69: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:74: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:75: LEXER: Found symbol: '#53' with value: 'c'
DEBUG - generator_B.mj:274:78: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:79: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:81: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:86: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:87: LEXER: Found symbol: '#53' with value: 'h'
DEBUG - generator_B.mj:274:90: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:91: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:274:93: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:274:98: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:274:99: LEXER: Found symbol: '#53' with value: ' '
DEBUG - generator_B.mj:274:102: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:274:103: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:275:9: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:275:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:275:15: LEXER: Found symbol: '#55' with value: 'countOddForEach'
DEBUG - generator_B.mj:275:30: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:275:31: LEXER: Found symbol: '#55' with value: 'arr'
DEBUG - generator_B.mj:275:34: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:275:35: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:275:36: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:275:38: LEXER: Found symbol: '#10' with value: 'print'
DEBUG - generator_B.mj:275:43: LEXER: Found symbol: '#42' with value: '('
DEBUG - generator_B.mj:275:44: LEXER: Found symbol: '#55' with value: 'eol'
DEBUG - generator_B.mj:275:47: LEXER: Found symbol: '#43' with value: ')'
DEBUG - generator_B.mj:275:48: LEXER: Found symbol: '#49' with value: ';'
DEBUG - generator_B.mj:276:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:277:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - generator_B.mj:277:2: LEXER: Found symbol: '#0' with value: ''
DEBUG - generator_B.mj:277:2: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree: Program(
  ProgramHeader(
   level_b_code_generation
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    NoProgramDeclarations(
    ) [NoProgramDeclarations]
    VarProgramDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        MultipleVariables(
          SingleVariable(
            Variable(
             globalI
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [Variable]
          ) [SingleVariable]
          Variable(
           globalIt
            NoArrayBrackets(
            ) [NoArrayBrackets]
          ) [Variable]
        ) [MultipleVariables]
      ) [VarDeclaration]
    ) [VarProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    MultipleMethodDeclarations(
      MultipleMethodDeclarations(
        MultipleMethodDeclarations(
          MultipleMethodDeclarations(
            MultipleMethodDeclarations(
              MultipleMethodDeclarations(
                MultipleMethodDeclarations(
                  MultipleMethodDeclarations(
                    MultipleMethodDeclarations(
                      MultipleMethodDeclarations(
                        MultipleMethodDeclarations(
                          MultipleMethodDeclarations(
                            MultipleMethodDeclarations(
                              NoMethodDeclarations(
                              ) [NoMethodDeclarations]
                              MethodDeclaration(
                                MethodHeader(
                                  ReturnVoid(
                                  ) [ReturnVoid]
                                 readArray
                                ) [MethodHeader]
                                FormalParameters(
                                  SingleFormalParameter(
                                    FormalParameter(
                                      Type(
                                       int
                                      ) [Type]
                                     arr
                                      ArrayBrackets(
                                      ) [ArrayBrackets]
                                    ) [FormalParameter]
                                  ) [SingleFormalParameter]
                                ) [FormalParameters]
                                MultipleLocalVarDeclarations(
                                  NoLocalVarDeclarations(
                                  ) [NoLocalVarDeclarations]
                                  LocalVarDeclaration(
                                    Type(
                                     int
                                    ) [Type]
                                    SingleLocalVariable(
                                      LocalVariable(
                                       i
                                        NoArrayBrackets(
                                        ) [NoArrayBrackets]
                                      ) [LocalVariable]
                                    ) [SingleLocalVariable]
                                  ) [LocalVarDeclaration]
                                ) [MultipleLocalVarDeclarations]
                                MethodStatementListStart(
                                ) [MethodStatementListStart]
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  ForStatement(
                                    ForStatementHeader(
                                      ForStatementHeaderStart(
                                      ) [ForStatementHeaderStart]
                                      SingleDesignatorStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     0
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [SingleDesignatorStatement]
                                      SingleCondition(
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              LssOperator(
                                              ) [LssOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    MethodCallFactor(
                                                      MethodCall(
                                                        MethodCallHeader(
                                                          IdentifierDesignator(
                                                           len
                                                          ) [IdentifierDesignator]
                                                        ) [MethodCallHeader]
                                                        ActualParameters(
                                                          SingleActualParameter(
                                                            ActualParameter(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       arr
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ActualParameter]
                                                          ) [SingleActualParameter]
                                                        ) [ActualParameters]
                                                      ) [MethodCall]
                                                    ) [MethodCallFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [SingleCondition]
                                      SingleDesignatorStatement(
                                        IncrementDesignatorStatement(
                                          IdentifierDesignator(
                                           i
                                          ) [IdentifierDesignator]
                                        ) [IncrementDesignatorStatement]
                                      ) [SingleDesignatorStatement]
                                    ) [ForStatementHeader]
                                    StatementBlock(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          NoStatements(
                                                          ) [NoStatements]
                                                          PrintStatement(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    CharConstantFactor(
                                                                     a
                                                                    ) [CharConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            NoPrintWidth(
                                                            ) [NoPrintWidth]
                                                          ) [PrintStatement]
                                                        ) [MultipleStatements]
                                                        PrintStatement(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  CharConstantFactor(
                                                                   r
                                                                  ) [CharConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          NoPrintWidth(
                                                          ) [NoPrintWidth]
                                                        ) [PrintStatement]
                                                      ) [MultipleStatements]
                                                      PrintStatement(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                CharConstantFactor(
                                                                 r
                                                                ) [CharConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                        NoPrintWidth(
                                                        ) [NoPrintWidth]
                                                      ) [PrintStatement]
                                                    ) [MultipleStatements]
                                                    PrintStatement(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              CharConstantFactor(
                                                               [
                                                              ) [CharConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                      NoPrintWidth(
                                                      ) [NoPrintWidth]
                                                    ) [PrintStatement]
                                                  ) [MultipleStatements]
                                                  PrintStatement(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             i
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    NoPrintWidth(
                                                    ) [NoPrintWidth]
                                                  ) [PrintStatement]
                                                ) [MultipleStatements]
                                                PrintStatement(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           ]
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  NoPrintWidth(
                                                  ) [NoPrintWidth]
                                                ) [PrintStatement]
                                              ) [MultipleStatements]
                                              PrintStatement(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                          
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                NoPrintWidth(
                                                ) [NoPrintWidth]
                                              ) [PrintStatement]
                                            ) [MultipleStatements]
                                            PrintStatement(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       =
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              NoPrintWidth(
                                              ) [NoPrintWidth]
                                            ) [PrintStatement]
                                          ) [MultipleStatements]
                                          PrintStatement(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                      
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            NoPrintWidth(
                                            ) [NoPrintWidth]
                                          ) [PrintStatement]
                                        ) [MultipleStatements]
                                        ReadStatement(
                                          ElementAccessDesignator(
                                            IdentifierDesignator(
                                             arr
                                            ) [IdentifierDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [ReadStatement]
                                      ) [MultipleStatements]
                                    ) [StatementBlock]
                                  ) [ForStatement]
                                ) [MultipleStatements]
                              ) [MethodDeclaration]
                            ) [MultipleMethodDeclarations]
                            MethodDeclaration(
                              MethodHeader(
                                ReturnVoid(
                                ) [ReturnVoid]
                               printArray
                              ) [MethodHeader]
                              FormalParameters(
                                MultipleFormalParameters(
                                  SingleFormalParameter(
                                    FormalParameter(
                                      Type(
                                       int
                                      ) [Type]
                                     arr
                                      ArrayBrackets(
                                      ) [ArrayBrackets]
                                    ) [FormalParameter]
                                  ) [SingleFormalParameter]
                                  FormalParameter(
                                    Type(
                                     bool
                                    ) [Type]
                                   inline
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [FormalParameter]
                                ) [MultipleFormalParameters]
                              ) [FormalParameters]
                              MultipleLocalVarDeclarations(
                                NoLocalVarDeclarations(
                                ) [NoLocalVarDeclarations]
                                LocalVarDeclaration(
                                  Type(
                                   int
                                  ) [Type]
                                  MultipleLocalVariables(
                                    SingleLocalVariable(
                                      LocalVariable(
                                       i
                                        NoArrayBrackets(
                                        ) [NoArrayBrackets]
                                      ) [LocalVariable]
                                    ) [SingleLocalVariable]
                                    LocalVariable(
                                     it
                                      NoArrayBrackets(
                                      ) [NoArrayBrackets]
                                    ) [LocalVariable]
                                  ) [MultipleLocalVariables]
                                ) [LocalVarDeclaration]
                              ) [MultipleLocalVarDeclarations]
                              MethodStatementListStart(
                              ) [MethodStatementListStart]
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                IfOptElseStatement(
                                  IfStatementHeader(
                                    IfStatementHeaderStart(
                                    ) [IfStatementHeaderStart]
                                    SingleTermCondition(
                                      SingleFactConditionTerm(
                                        SimpleConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   inline
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [SimpleConditionFact]
                                      ) [SingleFactConditionTerm]
                                    ) [SingleTermCondition]
                                  ) [IfStatementHeader]
                                  StatementBlock(
                                    MultipleStatements(
                                      MultipleStatements(
                                        NoStatements(
                                        ) [NoStatements]
                                        ForEachStatement(
                                          ForEachStatementHeader(
                                            ForEachStatementHeaderStart(
                                            ) [ForEachStatementHeaderStart]
                                           it
                                            IdentifierDesignator(
                                             arr
                                            ) [IdentifierDesignator]
                                          ) [ForEachStatementHeader]
                                          StatementBlock(
                                            MultipleStatements(
                                              MultipleStatements(
                                                NoStatements(
                                                ) [NoStatements]
                                                PrintStatement(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           it
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  NoPrintWidth(
                                                  ) [NoPrintWidth]
                                                ) [PrintStatement]
                                              ) [MultipleStatements]
                                              PrintStatement(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                          
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                NoPrintWidth(
                                                ) [NoPrintWidth]
                                              ) [PrintStatement]
                                            ) [MultipleStatements]
                                          ) [StatementBlock]
                                        ) [ForEachStatement]
                                      ) [MultipleStatements]
                                      PrintStatement(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 eol
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        NoPrintWidth(
                                        ) [NoPrintWidth]
                                      ) [PrintStatement]
                                    ) [MultipleStatements]
                                  ) [StatementBlock]
                                  ElseStatement(
                                    ElseStatementStart(
                                    ) [ElseStatementStart]
                                    StatementBlock(
                                      MultipleStatements(
                                        MultipleStatements(
                                          NoStatements(
                                          ) [NoStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                IdentifierDesignator(
                                                 i
                                                ) [IdentifierDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         0
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        ForEachStatement(
                                          ForEachStatementHeader(
                                            ForEachStatementHeaderStart(
                                            ) [ForEachStatementHeaderStart]
                                           globalIt
                                            IdentifierDesignator(
                                             arr
                                            ) [IdentifierDesignator]
                                          ) [ForEachStatementHeader]
                                          StatementBlock(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            MultipleStatements(
                                                              MultipleStatements(
                                                                MultipleStatements(
                                                                  MultipleStatements(
                                                                    NoStatements(
                                                                    ) [NoStatements]
                                                                    PrintStatement(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              CharConstantFactor(
                                                                               a
                                                                              ) [CharConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                      NoPrintWidth(
                                                                      ) [NoPrintWidth]
                                                                    ) [PrintStatement]
                                                                  ) [MultipleStatements]
                                                                  PrintStatement(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            CharConstantFactor(
                                                                             r
                                                                            ) [CharConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                    NoPrintWidth(
                                                                    ) [NoPrintWidth]
                                                                  ) [PrintStatement]
                                                                ) [MultipleStatements]
                                                                PrintStatement(
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          CharConstantFactor(
                                                                           r
                                                                          ) [CharConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                  NoPrintWidth(
                                                                  ) [NoPrintWidth]
                                                                ) [PrintStatement]
                                                              ) [MultipleStatements]
                                                              PrintStatement(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      ConstantFactor(
                                                                        CharConstantFactor(
                                                                         [
                                                                        ) [CharConstantFactor]
                                                                      ) [ConstantFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                                NoPrintWidth(
                                                                ) [NoPrintWidth]
                                                              ) [PrintStatement]
                                                            ) [MultipleStatements]
                                                            PrintStatement(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       i
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                              NoPrintWidth(
                                                              ) [NoPrintWidth]
                                                            ) [PrintStatement]
                                                          ) [MultipleStatements]
                                                          PrintStatement(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    CharConstantFactor(
                                                                     ]
                                                                    ) [CharConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            NoPrintWidth(
                                                            ) [NoPrintWidth]
                                                          ) [PrintStatement]
                                                        ) [MultipleStatements]
                                                        PrintStatement(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  CharConstantFactor(
                                                                    
                                                                  ) [CharConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          NoPrintWidth(
                                                          ) [NoPrintWidth]
                                                        ) [PrintStatement]
                                                      ) [MultipleStatements]
                                                      PrintStatement(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                CharConstantFactor(
                                                                 =
                                                                ) [CharConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                        NoPrintWidth(
                                                        ) [NoPrintWidth]
                                                      ) [PrintStatement]
                                                    ) [MultipleStatements]
                                                    PrintStatement(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              CharConstantFactor(
                                                                
                                                              ) [CharConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                      NoPrintWidth(
                                                      ) [NoPrintWidth]
                                                    ) [PrintStatement]
                                                  ) [MultipleStatements]
                                                  PrintStatement(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             globalIt
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    NoPrintWidth(
                                                    ) [NoPrintWidth]
                                                  ) [PrintStatement]
                                                ) [MultipleStatements]
                                                PrintStatement(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           eol
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  NoPrintWidth(
                                                  ) [NoPrintWidth]
                                                ) [PrintStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                IncrementDesignatorStatement(
                                                  IdentifierDesignator(
                                                   i
                                                  ) [IdentifierDesignator]
                                                ) [IncrementDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                          ) [StatementBlock]
                                        ) [ForEachStatement]
                                      ) [MultipleStatements]
                                    ) [StatementBlock]
                                  ) [ElseStatement]
                                ) [IfOptElseStatement]
                              ) [MultipleStatements]
                            ) [MethodDeclaration]
                          ) [MultipleMethodDeclarations]
                          MethodDeclaration(
                            MethodHeader(
                              ReturnVoid(
                              ) [ReturnVoid]
                             swap
                            ) [MethodHeader]
                            FormalParameters(
                              MultipleFormalParameters(
                                MultipleFormalParameters(
                                  SingleFormalParameter(
                                    FormalParameter(
                                      Type(
                                       int
                                      ) [Type]
                                     arr
                                      ArrayBrackets(
                                      ) [ArrayBrackets]
                                    ) [FormalParameter]
                                  ) [SingleFormalParameter]
                                  FormalParameter(
                                    Type(
                                     int
                                    ) [Type]
                                   i
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [FormalParameter]
                                ) [MultipleFormalParameters]
                                FormalParameter(
                                  Type(
                                   int
                                  ) [Type]
                                 j
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [FormalParameter]
                              ) [MultipleFormalParameters]
                            ) [FormalParameters]
                            MultipleLocalVarDeclarations(
                              NoLocalVarDeclarations(
                              ) [NoLocalVarDeclarations]
                              LocalVarDeclaration(
                                Type(
                                 int
                                ) [Type]
                                SingleLocalVariable(
                                  LocalVariable(
                                   tmp
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [LocalVariable]
                                ) [SingleLocalVariable]
                              ) [LocalVarDeclaration]
                            ) [MultipleLocalVarDeclarations]
                            MethodStatementListStart(
                            ) [MethodStatementListStart]
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         tmp
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                ElementAccessDesignator(
                                                  IdentifierDesignator(
                                                   arr
                                                  ) [IdentifierDesignator]
                                                  ArrayIndexer(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             i
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ArrayIndexer]
                                                ) [ElementAccessDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      ElementAccessDesignator(
                                        IdentifierDesignator(
                                         arr
                                        ) [IdentifierDesignator]
                                        ArrayIndexer(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   i
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ArrayIndexer]
                                      ) [ElementAccessDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            DesignatorFactor(
                                              ElementAccessDesignator(
                                                IdentifierDesignator(
                                                 arr
                                                ) [IdentifierDesignator]
                                                ArrayIndexer(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          IdentifierDesignator(
                                                           j
                                                          ) [IdentifierDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ArrayIndexer]
                                              ) [ElementAccessDesignator]
                                            ) [DesignatorFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    ElementAccessDesignator(
                                      IdentifierDesignator(
                                       arr
                                      ) [IdentifierDesignator]
                                      ArrayIndexer(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 j
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ArrayIndexer]
                                    ) [ElementAccessDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             tmp
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                          ) [MethodDeclaration]
                        ) [MultipleMethodDeclarations]
                        MethodDeclaration(
                          MethodHeader(
                            ReturnVoid(
                            ) [ReturnVoid]
                           sortArray
                          ) [MethodHeader]
                          FormalParameters(
                            MultipleFormalParameters(
                              SingleFormalParameter(
                                FormalParameter(
                                  Type(
                                   int
                                  ) [Type]
                                 arr
                                  ArrayBrackets(
                                  ) [ArrayBrackets]
                                ) [FormalParameter]
                              ) [SingleFormalParameter]
                              FormalParameter(
                                Type(
                                 bool
                                ) [Type]
                               asc
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [FormalParameter]
                            ) [MultipleFormalParameters]
                          ) [FormalParameters]
                          MultipleLocalVarDeclarations(
                            NoLocalVarDeclarations(
                            ) [NoLocalVarDeclarations]
                            LocalVarDeclaration(
                              Type(
                               int
                              ) [Type]
                              MultipleLocalVariables(
                                SingleLocalVariable(
                                  LocalVariable(
                                   i
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [LocalVariable]
                                ) [SingleLocalVariable]
                                LocalVariable(
                                 j
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [LocalVariable]
                              ) [MultipleLocalVariables]
                            ) [LocalVarDeclaration]
                          ) [MultipleLocalVarDeclarations]
                          MethodStatementListStart(
                          ) [MethodStatementListStart]
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            ForStatement(
                              ForStatementHeader(
                                ForStatementHeaderStart(
                                ) [ForStatementHeaderStart]
                                SingleDesignatorStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       i
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               0
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [SingleDesignatorStatement]
                                SingleCondition(
                                  SingleTermCondition(
                                    SingleFactConditionTerm(
                                      ComplexConditionFact(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 i
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        LssOperator(
                                        ) [LssOperator]
                                        LeftExpression(
                                          MultipleTermsExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                MethodCallFactor(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      IdentifierDesignator(
                                                       len
                                                      ) [IdentifierDesignator]
                                                    ) [MethodCallHeader]
                                                    ActualParameters(
                                                      SingleActualParameter(
                                                        ActualParameter(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   arr
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ActualParameter]
                                                      ) [SingleActualParameter]
                                                    ) [ActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                            SubOperator(
                                            ) [SubOperator]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 1
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [MultipleTermsExpression]
                                        ) [LeftExpression]
                                      ) [ComplexConditionFact]
                                    ) [SingleFactConditionTerm]
                                  ) [SingleTermCondition]
                                ) [SingleCondition]
                                SingleDesignatorStatement(
                                  IncrementDesignatorStatement(
                                    IdentifierDesignator(
                                     i
                                    ) [IdentifierDesignator]
                                  ) [IncrementDesignatorStatement]
                                ) [SingleDesignatorStatement]
                              ) [ForStatementHeader]
                              StatementBlock(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  ForStatement(
                                    ForStatementHeader(
                                      ForStatementHeaderStart(
                                      ) [ForStatementHeaderStart]
                                      SingleDesignatorStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             j
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              MultipleTermsExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                                AddOperator(
                                                ) [AddOperator]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     1
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [MultipleTermsExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [SingleDesignatorStatement]
                                      SingleCondition(
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       j
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              LssOperator(
                                              ) [LssOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    MethodCallFactor(
                                                      MethodCall(
                                                        MethodCallHeader(
                                                          IdentifierDesignator(
                                                           len
                                                          ) [IdentifierDesignator]
                                                        ) [MethodCallHeader]
                                                        ActualParameters(
                                                          SingleActualParameter(
                                                            ActualParameter(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       arr
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ActualParameter]
                                                          ) [SingleActualParameter]
                                                        ) [ActualParameters]
                                                      ) [MethodCall]
                                                    ) [MethodCallFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [SingleCondition]
                                      SingleDesignatorStatement(
                                        IncrementDesignatorStatement(
                                          IdentifierDesignator(
                                           j
                                          ) [IdentifierDesignator]
                                        ) [IncrementDesignatorStatement]
                                      ) [SingleDesignatorStatement]
                                    ) [ForStatementHeader]
                                    StatementBlock(
                                      MultipleStatements(
                                        NoStatements(
                                        ) [NoStatements]
                                        IfOptElseStatement(
                                          IfStatementHeader(
                                            IfStatementHeaderStart(
                                            ) [IfStatementHeaderStart]
                                            MultipleTermsCondition(
                                              SingleTermCondition(
                                                MultipleFactsConditionTerm(
                                                  SingleFactConditionTerm(
                                                    SimpleConditionFact(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               asc
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [SimpleConditionFact]
                                                  ) [SingleFactConditionTerm]
                                                  ComplexConditionFact(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            ElementAccessDesignator(
                                                              IdentifierDesignator(
                                                               arr
                                                              ) [IdentifierDesignator]
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      DesignatorFactor(
                                                                        IdentifierDesignator(
                                                                         i
                                                                        ) [IdentifierDesignator]
                                                                      ) [DesignatorFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [ElementAccessDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    GrtOperator(
                                                    ) [GrtOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            ElementAccessDesignator(
                                                              IdentifierDesignator(
                                                               arr
                                                              ) [IdentifierDesignator]
                                                              ArrayIndexer(
                                                                LeftExpression(
                                                                  SingleTermExpression(
                                                                    NoSign(
                                                                    ) [NoSign]
                                                                    SingleFactorTerm(
                                                                      DesignatorFactor(
                                                                        IdentifierDesignator(
                                                                         j
                                                                        ) [IdentifierDesignator]
                                                                      ) [DesignatorFactor]
                                                                    ) [SingleFactorTerm]
                                                                  ) [SingleTermExpression]
                                                                ) [LeftExpression]
                                                              ) [ArrayIndexer]
                                                            ) [ElementAccessDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ComplexConditionFact]
                                                ) [MultipleFactsConditionTerm]
                                              ) [SingleTermCondition]
                                              MultipleFactsConditionTerm(
                                                SingleFactConditionTerm(
                                                  ComplexConditionFact(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             asc
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    EqOperator(
                                                    ) [EqOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            BoolConstantFactor(
                                                             false
                                                            ) [BoolConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ComplexConditionFact]
                                                ) [SingleFactConditionTerm]
                                                ComplexConditionFact(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          ElementAccessDesignator(
                                                            IdentifierDesignator(
                                                             arr
                                                            ) [IdentifierDesignator]
                                                            ArrayIndexer(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       i
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ArrayIndexer]
                                                          ) [ElementAccessDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  LssOperator(
                                                  ) [LssOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        DesignatorFactor(
                                                          ElementAccessDesignator(
                                                            IdentifierDesignator(
                                                             arr
                                                            ) [IdentifierDesignator]
                                                            ArrayIndexer(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       j
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ArrayIndexer]
                                                          ) [ElementAccessDesignator]
                                                        ) [DesignatorFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [ComplexConditionFact]
                                              ) [MultipleFactsConditionTerm]
                                            ) [MultipleTermsCondition]
                                          ) [IfStatementHeader]
                                          StatementBlock(
                                            MultipleStatements(
                                              NoStatements(
                                              ) [NoStatements]
                                              DesignatorBasedStatement(
                                                MethodCallDesignatorStatement(
                                                  MethodCall(
                                                    MethodCallHeader(
                                                      IdentifierDesignator(
                                                       swap
                                                      ) [IdentifierDesignator]
                                                    ) [MethodCallHeader]
                                                    ActualParameters(
                                                      MultipleActualParameters(
                                                        MultipleActualParameters(
                                                          SingleActualParameter(
                                                            ActualParameter(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       arr
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [ActualParameter]
                                                          ) [SingleActualParameter]
                                                          ActualParameter(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    IdentifierDesignator(
                                                                     i
                                                                    ) [IdentifierDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ActualParameter]
                                                        ) [MultipleActualParameters]
                                                        ActualParameter(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   j
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ActualParameter]
                                                      ) [MultipleActualParameters]
                                                    ) [ActualParameters]
                                                  ) [MethodCall]
                                                ) [MethodCallDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                          ) [StatementBlock]
                                          NoElseStatment(
                                          ) [NoElseStatment]
                                        ) [IfOptElseStatement]
                                      ) [MultipleStatements]
                                    ) [StatementBlock]
                                  ) [ForStatement]
                                ) [MultipleStatements]
                              ) [StatementBlock]
                            ) [ForStatement]
                          ) [MultipleStatements]
                        ) [MethodDeclaration]
                      ) [MultipleMethodDeclarations]
                      MethodDeclaration(
                        MethodHeader(
                          ReturnType(
                            Type(
                             bool
                            ) [Type]
                          ) [ReturnType]
                         compareArraysFor
                        ) [MethodHeader]
                        FormalParameters(
                          MultipleFormalParameters(
                            SingleFormalParameter(
                              FormalParameter(
                                Type(
                                 int
                                ) [Type]
                               a
                                ArrayBrackets(
                                ) [ArrayBrackets]
                              ) [FormalParameter]
                            ) [SingleFormalParameter]
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             b
                              ArrayBrackets(
                              ) [ArrayBrackets]
                            ) [FormalParameter]
                          ) [MultipleFormalParameters]
                        ) [FormalParameters]
                        MultipleLocalVarDeclarations(
                          MultipleLocalVarDeclarations(
                            NoLocalVarDeclarations(
                            ) [NoLocalVarDeclarations]
                            LocalVarDeclaration(
                              Type(
                               int
                              ) [Type]
                              MultipleLocalVariables(
                                SingleLocalVariable(
                                  LocalVariable(
                                   i
                                    NoArrayBrackets(
                                    ) [NoArrayBrackets]
                                  ) [LocalVariable]
                                ) [SingleLocalVariable]
                                LocalVariable(
                                 j
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [LocalVariable]
                              ) [MultipleLocalVariables]
                            ) [LocalVarDeclaration]
                          ) [MultipleLocalVarDeclarations]
                          LocalVarDeclaration(
                            Type(
                             bool
                            ) [Type]
                            MultipleLocalVariables(
                              SingleLocalVariable(
                                LocalVariable(
                                 same
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [LocalVariable]
                              ) [SingleLocalVariable]
                              LocalVariable(
                               found
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [LocalVariable]
                            ) [MultipleLocalVariables]
                          ) [LocalVarDeclaration]
                        ) [MultipleLocalVarDeclarations]
                        MethodStatementListStart(
                        ) [MethodStatementListStart]
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              NoStatements(
                              ) [NoStatements]
                              DesignatorBasedStatement(
                                AssignmentDesignatorStatement(
                                  AssignmentHeader(
                                    IdentifierDesignator(
                                     same
                                    ) [IdentifierDesignator]
                                  ) [AssignmentHeader]
                                  AssignmentFooter(
                                    AssignOperator(
                                    ) [AssignOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            BoolConstantFactor(
                                             true
                                            ) [BoolConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [AssignmentFooter]
                                ) [AssignmentDesignatorStatement]
                              ) [DesignatorBasedStatement]
                            ) [MultipleStatements]
                            ForStatement(
                              ForStatementHeader(
                                ForStatementHeaderStart(
                                ) [ForStatementHeaderStart]
                                SingleDesignatorStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       i
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               0
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [SingleDesignatorStatement]
                                SingleCondition(
                                  SingleTermCondition(
                                    SingleFactConditionTerm(
                                      ComplexConditionFact(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 i
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        LssOperator(
                                        ) [LssOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              MethodCallFactor(
                                                MethodCall(
                                                  MethodCallHeader(
                                                    IdentifierDesignator(
                                                     len
                                                    ) [IdentifierDesignator]
                                                  ) [MethodCallHeader]
                                                  ActualParameters(
                                                    SingleActualParameter(
                                                      ActualParameter(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 a
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [ActualParameter]
                                                    ) [SingleActualParameter]
                                                  ) [ActualParameters]
                                                ) [MethodCall]
                                              ) [MethodCallFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ComplexConditionFact]
                                    ) [SingleFactConditionTerm]
                                  ) [SingleTermCondition]
                                ) [SingleCondition]
                                SingleDesignatorStatement(
                                  IncrementDesignatorStatement(
                                    IdentifierDesignator(
                                     i
                                    ) [IdentifierDesignator]
                                  ) [IncrementDesignatorStatement]
                                ) [SingleDesignatorStatement]
                              ) [ForStatementHeader]
                              StatementBlock(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          NoStatements(
                                          ) [NoStatements]
                                          DesignatorBasedStatement(
                                            AssignmentDesignatorStatement(
                                              AssignmentHeader(
                                                IdentifierDesignator(
                                                 found
                                                ) [IdentifierDesignator]
                                              ) [AssignmentHeader]
                                              AssignmentFooter(
                                                AssignOperator(
                                                ) [AssignOperator]
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        BoolConstantFactor(
                                                         false
                                                        ) [BoolConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [AssignmentFooter]
                                            ) [AssignmentDesignatorStatement]
                                          ) [DesignatorBasedStatement]
                                        ) [MultipleStatements]
                                        ForStatement(
                                          ForStatementHeader(
                                            ForStatementHeaderStart(
                                            ) [ForStatementHeaderStart]
                                            SingleDesignatorStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  IdentifierDesignator(
                                                   j
                                                  ) [IdentifierDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          IntConstantFactor(
                                                           0
                                                          ) [IntConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [SingleDesignatorStatement]
                                            SingleCondition(
                                              SingleTermCondition(
                                                SingleFactConditionTerm(
                                                  ComplexConditionFact(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          DesignatorFactor(
                                                            IdentifierDesignator(
                                                             j
                                                            ) [IdentifierDesignator]
                                                          ) [DesignatorFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    LssOperator(
                                                    ) [LssOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          MethodCallFactor(
                                                            MethodCall(
                                                              MethodCallHeader(
                                                                IdentifierDesignator(
                                                                 len
                                                                ) [IdentifierDesignator]
                                                              ) [MethodCallHeader]
                                                              ActualParameters(
                                                                SingleActualParameter(
                                                                  ActualParameter(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          DesignatorFactor(
                                                                            IdentifierDesignator(
                                                                             b
                                                                            ) [IdentifierDesignator]
                                                                          ) [DesignatorFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                  ) [ActualParameter]
                                                                ) [SingleActualParameter]
                                                              ) [ActualParameters]
                                                            ) [MethodCall]
                                                          ) [MethodCallFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [ComplexConditionFact]
                                                ) [SingleFactConditionTerm]
                                              ) [SingleTermCondition]
                                            ) [SingleCondition]
                                            SingleDesignatorStatement(
                                              IncrementDesignatorStatement(
                                                IdentifierDesignator(
                                                 j
                                                ) [IdentifierDesignator]
                                              ) [IncrementDesignatorStatement]
                                            ) [SingleDesignatorStatement]
                                          ) [ForStatementHeader]
                                          StatementBlock(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  NoStatements(
                                                  ) [NoStatements]
                                                  IfOptElseStatement(
                                                    IfStatementHeader(
                                                      IfStatementHeaderStart(
                                                      ) [IfStatementHeaderStart]
                                                      SingleTermCondition(
                                                        SingleFactConditionTerm(
                                                          ComplexConditionFact(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    ElementAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       a
                                                                      ) [IdentifierDesignator]
                                                                      ArrayIndexer(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              DesignatorFactor(
                                                                                IdentifierDesignator(
                                                                                 i
                                                                                ) [IdentifierDesignator]
                                                                              ) [DesignatorFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ArrayIndexer]
                                                                    ) [ElementAccessDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            NeqOperator(
                                                            ) [NeqOperator]
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  DesignatorFactor(
                                                                    ElementAccessDesignator(
                                                                      IdentifierDesignator(
                                                                       b
                                                                      ) [IdentifierDesignator]
                                                                      ArrayIndexer(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              DesignatorFactor(
                                                                                IdentifierDesignator(
                                                                                 j
                                                                                ) [IdentifierDesignator]
                                                                              ) [DesignatorFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ArrayIndexer]
                                                                    ) [ElementAccessDesignator]
                                                                  ) [DesignatorFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                          ) [ComplexConditionFact]
                                                        ) [SingleFactConditionTerm]
                                                      ) [SingleTermCondition]
                                                    ) [IfStatementHeader]
                                                    ContinueStatement(
                                                    ) [ContinueStatement]
                                                    NoElseStatment(
                                                    ) [NoElseStatment]
                                                  ) [IfOptElseStatement]
                                                ) [MultipleStatements]
                                                DesignatorBasedStatement(
                                                  AssignmentDesignatorStatement(
                                                    AssignmentHeader(
                                                      IdentifierDesignator(
                                                       found
                                                      ) [IdentifierDesignator]
                                                    ) [AssignmentHeader]
                                                    AssignmentFooter(
                                                      AssignOperator(
                                                      ) [AssignOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              BoolConstantFactor(
                                                               true
                                                              ) [BoolConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [AssignmentFooter]
                                                  ) [AssignmentDesignatorStatement]
                                                ) [DesignatorBasedStatement]
                                              ) [MultipleStatements]
                                              BreakStatement(
                                              ) [BreakStatement]
                                            ) [MultipleStatements]
                                          ) [StatementBlock]
                                        ) [ForStatement]
                                      ) [MultipleStatements]
                                      IfOptElseStatement(
                                        IfStatementHeader(
                                          IfStatementHeaderStart(
                                          ) [IfStatementHeaderStart]
                                          SingleTermCondition(
                                            SingleFactConditionTerm(
                                              SimpleConditionFact(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         found
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [SimpleConditionFact]
                                            ) [SingleFactConditionTerm]
                                          ) [SingleTermCondition]
                                        ) [IfStatementHeader]
                                        ContinueStatement(
                                        ) [ContinueStatement]
                                        NoElseStatment(
                                        ) [NoElseStatment]
                                      ) [IfOptElseStatement]
                                    ) [MultipleStatements]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           same
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  BoolConstantFactor(
                                                   false
                                                  ) [BoolConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                  ) [MultipleStatements]
                                  BreakStatement(
                                  ) [BreakStatement]
                                ) [MultipleStatements]
                              ) [StatementBlock]
                            ) [ForStatement]
                          ) [MultipleStatements]
                          ReturnStatement(
                            ReturnValue(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       same
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ReturnValue]
                          ) [ReturnStatement]
                        ) [MultipleStatements]
                      ) [MethodDeclaration]
                    ) [MultipleMethodDeclarations]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnType(
                          Type(
                           bool
                          ) [Type]
                        ) [ReturnType]
                       compareArraysForEach
                      ) [MethodHeader]
                      FormalParameters(
                        MultipleFormalParameters(
                          SingleFormalParameter(
                            FormalParameter(
                              Type(
                               int
                              ) [Type]
                             a
                              ArrayBrackets(
                              ) [ArrayBrackets]
                            ) [FormalParameter]
                          ) [SingleFormalParameter]
                          FormalParameter(
                            Type(
                             int
                            ) [Type]
                           b
                            ArrayBrackets(
                            ) [ArrayBrackets]
                          ) [FormalParameter]
                        ) [MultipleFormalParameters]
                      ) [FormalParameters]
                      MultipleLocalVarDeclarations(
                        MultipleLocalVarDeclarations(
                          NoLocalVarDeclarations(
                          ) [NoLocalVarDeclarations]
                          LocalVarDeclaration(
                            Type(
                             int
                            ) [Type]
                            MultipleLocalVariables(
                              SingleLocalVariable(
                                LocalVariable(
                                 itA
                                  NoArrayBrackets(
                                  ) [NoArrayBrackets]
                                ) [LocalVariable]
                              ) [SingleLocalVariable]
                              LocalVariable(
                               itB
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [LocalVariable]
                            ) [MultipleLocalVariables]
                          ) [LocalVarDeclaration]
                        ) [MultipleLocalVarDeclarations]
                        LocalVarDeclaration(
                          Type(
                           bool
                          ) [Type]
                          MultipleLocalVariables(
                            SingleLocalVariable(
                              LocalVariable(
                               same
                                NoArrayBrackets(
                                ) [NoArrayBrackets]
                              ) [LocalVariable]
                            ) [SingleLocalVariable]
                            LocalVariable(
                             found
                              NoArrayBrackets(
                              ) [NoArrayBrackets]
                            ) [LocalVariable]
                          ) [MultipleLocalVariables]
                        ) [LocalVarDeclaration]
                      ) [MultipleLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   same
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          BoolConstantFactor(
                                           true
                                          ) [BoolConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          ForEachStatement(
                            ForEachStatementHeader(
                              ForEachStatementHeaderStart(
                              ) [ForEachStatementHeaderStart]
                             itA
                              IdentifierDesignator(
                               a
                              ) [IdentifierDesignator]
                            ) [ForEachStatementHeader]
                            StatementBlock(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        NoStatements(
                                        ) [NoStatements]
                                        DesignatorBasedStatement(
                                          AssignmentDesignatorStatement(
                                            AssignmentHeader(
                                              IdentifierDesignator(
                                               found
                                              ) [IdentifierDesignator]
                                            ) [AssignmentHeader]
                                            AssignmentFooter(
                                              AssignOperator(
                                              ) [AssignOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      BoolConstantFactor(
                                                       false
                                                      ) [BoolConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [AssignmentFooter]
                                          ) [AssignmentDesignatorStatement]
                                        ) [DesignatorBasedStatement]
                                      ) [MultipleStatements]
                                      ForEachStatement(
                                        ForEachStatementHeader(
                                          ForEachStatementHeaderStart(
                                          ) [ForEachStatementHeaderStart]
                                         itB
                                          IdentifierDesignator(
                                           b
                                          ) [IdentifierDesignator]
                                        ) [ForEachStatementHeader]
                                        StatementBlock(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                NoStatements(
                                                ) [NoStatements]
                                                IfOptElseStatement(
                                                  IfStatementHeader(
                                                    IfStatementHeaderStart(
                                                    ) [IfStatementHeaderStart]
                                                    SingleTermCondition(
                                                      SingleFactConditionTerm(
                                                        ComplexConditionFact(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   itA
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          NeqOperator(
                                                          ) [NeqOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   itB
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ComplexConditionFact]
                                                      ) [SingleFactConditionTerm]
                                                    ) [SingleTermCondition]
                                                  ) [IfStatementHeader]
                                                  ContinueStatement(
                                                  ) [ContinueStatement]
                                                  NoElseStatment(
                                                  ) [NoElseStatment]
                                                ) [IfOptElseStatement]
                                              ) [MultipleStatements]
                                              DesignatorBasedStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    IdentifierDesignator(
                                                     found
                                                    ) [IdentifierDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            BoolConstantFactor(
                                                             true
                                                            ) [BoolConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [DesignatorBasedStatement]
                                            ) [MultipleStatements]
                                            BreakStatement(
                                            ) [BreakStatement]
                                          ) [MultipleStatements]
                                        ) [StatementBlock]
                                      ) [ForEachStatement]
                                    ) [MultipleStatements]
                                    IfOptElseStatement(
                                      IfStatementHeader(
                                        IfStatementHeaderStart(
                                        ) [IfStatementHeaderStart]
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            SimpleConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       found
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [SimpleConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [IfStatementHeader]
                                      ContinueStatement(
                                      ) [ContinueStatement]
                                      NoElseStatment(
                                      ) [NoElseStatment]
                                    ) [IfOptElseStatement]
                                  ) [MultipleStatements]
                                  DesignatorBasedStatement(
                                    AssignmentDesignatorStatement(
                                      AssignmentHeader(
                                        IdentifierDesignator(
                                         same
                                        ) [IdentifierDesignator]
                                      ) [AssignmentHeader]
                                      AssignmentFooter(
                                        AssignOperator(
                                        ) [AssignOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                BoolConstantFactor(
                                                 false
                                                ) [BoolConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [AssignmentFooter]
                                    ) [AssignmentDesignatorStatement]
                                  ) [DesignatorBasedStatement]
                                ) [MultipleStatements]
                                BreakStatement(
                                ) [BreakStatement]
                              ) [MultipleStatements]
                            ) [StatementBlock]
                          ) [ForEachStatement]
                        ) [MultipleStatements]
                        ReturnStatement(
                          ReturnValue(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     same
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ReturnValue]
                        ) [ReturnStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [MultipleMethodDeclarations]
                  MethodDeclaration(
                    MethodHeader(
                      ReturnVoid(
                      ) [ReturnVoid]
                     printBool
                    ) [MethodHeader]
                    FormalParameters(
                      SingleFormalParameter(
                        FormalParameter(
                          Type(
                           bool
                          ) [Type]
                         b
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [FormalParameter]
                      ) [SingleFormalParameter]
                    ) [FormalParameters]
                    NoLocalVarDeclarations(
                    ) [NoLocalVarDeclarations]
                    MethodStatementListStart(
                    ) [MethodStatementListStart]
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          SingleTermCondition(
                            SingleFactConditionTerm(
                              SimpleConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         b
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [SimpleConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [SingleTermCondition]
                        ) [IfStatementHeader]
                        StatementBlock(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             t
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                           r
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        CharConstantFactor(
                                         u
                                        ) [CharConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                       e
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                        ) [StatementBlock]
                        ElseStatement(
                          ElseStatementStart(
                          ) [ElseStatementStart]
                          StatementBlock(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      NoStatements(
                                      ) [NoStatements]
                                      PrintStatement(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 f
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        NoPrintWidth(
                                        ) [NoPrintWidth]
                                      ) [PrintStatement]
                                    ) [MultipleStatements]
                                    PrintStatement(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               a
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      NoPrintWidth(
                                      ) [NoPrintWidth]
                                    ) [PrintStatement]
                                  ) [MultipleStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             l
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                           s
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        CharConstantFactor(
                                         e
                                        ) [CharConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                          ) [StatementBlock]
                        ) [ElseStatement]
                      ) [IfOptElseStatement]
                    ) [MultipleStatements]
                  ) [MethodDeclaration]
                ) [MultipleMethodDeclarations]
                MethodDeclaration(
                  MethodHeader(
                    ReturnVoid(
                    ) [ReturnVoid]
                   conditionalPrint
                  ) [MethodHeader]
                  FormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         int
                        ) [Type]
                       n
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                  ) [FormalParameters]
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  MethodStatementListStart(
                  ) [MethodStatementListStart]
                  MultipleStatements(
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          SingleTermCondition(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         n
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                EqOperator(
                                ) [EqOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         0
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [SingleTermCondition]
                        ) [IfStatementHeader]
                        StatementBlock(
                          MultipleStatements(
                            NoStatements(
                            ) [NoStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                       a
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                        ) [StatementBlock]
                        ElseStatement(
                          ElseStatementStart(
                          ) [ElseStatementStart]
                          IfOptElseStatement(
                            IfStatementHeader(
                              IfStatementHeaderStart(
                              ) [IfStatementHeaderStart]
                              SingleTermCondition(
                                SingleFactConditionTerm(
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             n
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    EqOperator(
                                    ) [EqOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             1
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [SingleFactConditionTerm]
                              ) [SingleTermCondition]
                            ) [IfStatementHeader]
                            StatementBlock(
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                           b
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                            ) [StatementBlock]
                            ElseStatement(
                              ElseStatementStart(
                              ) [ElseStatementStart]
                              StatementBlock(
                                MultipleStatements(
                                  NoStatements(
                                  ) [NoStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             !
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                              ) [StatementBlock]
                            ) [ElseStatement]
                          ) [IfOptElseStatement]
                        ) [ElseStatement]
                      ) [IfOptElseStatement]
                    ) [MultipleStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               eol
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                ) [MethodDeclaration]
              ) [MultipleMethodDeclarations]
              MethodDeclaration(
                MethodHeader(
                  ReturnVoid(
                  ) [ReturnVoid]
                 iftest
                ) [MethodHeader]
                NoFormalParameters(
                ) [NoFormalParameters]
                MultipleLocalVarDeclarations(
                  NoLocalVarDeclarations(
                  ) [NoLocalVarDeclarations]
                  LocalVarDeclaration(
                    Type(
                     int
                    ) [Type]
                    MultipleLocalVariables(
                      SingleLocalVariable(
                        LocalVariable(
                         i
                          NoArrayBrackets(
                          ) [NoArrayBrackets]
                        ) [LocalVariable]
                      ) [SingleLocalVariable]
                      LocalVariable(
                       n
                        NoArrayBrackets(
                        ) [NoArrayBrackets]
                      ) [LocalVariable]
                    ) [MultipleLocalVariables]
                  ) [LocalVarDeclaration]
                ) [MultipleLocalVarDeclarations]
                MethodStatementListStart(
                ) [MethodStatementListStart]
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            MultipleStatements(
                                                              MultipleStatements(
                                                                MultipleStatements(
                                                                  MultipleStatements(
                                                                    MultipleStatements(
                                                                      MultipleStatements(
                                                                        MultipleStatements(
                                                                          MultipleStatements(
                                                                            MultipleStatements(
                                                                              MultipleStatements(
                                                                                MultipleStatements(
                                                                                  MultipleStatements(
                                                                                    MultipleStatements(
                                                                                      MultipleStatements(
                                                                                        MultipleStatements(
                                                                                          MultipleStatements(
                                                                                            MultipleStatements(
                                                                                              MultipleStatements(
                                                                                                MultipleStatements(
                                                                                                  MultipleStatements(
                                                                                                    MultipleStatements(
                                                                                                      MultipleStatements(
                                                                                                        MultipleStatements(
                                                                                                          MultipleStatements(
                                                                                                            MultipleStatements(
                                                                                                              MultipleStatements(
                                                                                                                MultipleStatements(
                                                                                                                  MultipleStatements(
                                                                                                                    MultipleStatements(
                                                                                                                      MultipleStatements(
                                                                                                                        MultipleStatements(
                                                                                                                          NoStatements(
                                                                                                                          ) [NoStatements]
                                                                                                                          DesignatorBasedStatement(
                                                                                                                            AssignmentDesignatorStatement(
                                                                                                                              AssignmentHeader(
                                                                                                                                IdentifierDesignator(
                                                                                                                                 i
                                                                                                                                ) [IdentifierDesignator]
                                                                                                                              ) [AssignmentHeader]
                                                                                                                              AssignmentFooter(
                                                                                                                                AssignOperator(
                                                                                                                                ) [AssignOperator]
                                                                                                                                LeftExpression(
                                                                                                                                  SingleTermExpression(
                                                                                                                                    NoSign(
                                                                                                                                    ) [NoSign]
                                                                                                                                    SingleFactorTerm(
                                                                                                                                      ConstantFactor(
                                                                                                                                        IntConstantFactor(
                                                                                                                                         2
                                                                                                                                        ) [IntConstantFactor]
                                                                                                                                      ) [ConstantFactor]
                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                ) [LeftExpression]
                                                                                                                              ) [AssignmentFooter]
                                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                                          ) [DesignatorBasedStatement]
                                                                                                                        ) [MultipleStatements]
                                                                                                                        DesignatorBasedStatement(
                                                                                                                          AssignmentDesignatorStatement(
                                                                                                                            AssignmentHeader(
                                                                                                                              IdentifierDesignator(
                                                                                                                               n
                                                                                                                              ) [IdentifierDesignator]
                                                                                                                            ) [AssignmentHeader]
                                                                                                                            AssignmentFooter(
                                                                                                                              AssignOperator(
                                                                                                                              ) [AssignOperator]
                                                                                                                              LeftExpression(
                                                                                                                                SingleTermExpression(
                                                                                                                                  NoSign(
                                                                                                                                  ) [NoSign]
                                                                                                                                  SingleFactorTerm(
                                                                                                                                    ConstantFactor(
                                                                                                                                      IntConstantFactor(
                                                                                                                                       4
                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                    ) [ConstantFactor]
                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                ) [SingleTermExpression]
                                                                                                                              ) [LeftExpression]
                                                                                                                            ) [AssignmentFooter]
                                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                      ) [MultipleStatements]
                                                                                                                      IfOptElseStatement(
                                                                                                                        IfStatementHeader(
                                                                                                                          IfStatementHeaderStart(
                                                                                                                          ) [IfStatementHeaderStart]
                                                                                                                          SingleTermCondition(
                                                                                                                            SingleFactConditionTerm(
                                                                                                                              ComplexConditionFact(
                                                                                                                                LeftExpression(
                                                                                                                                  SingleTermExpression(
                                                                                                                                    NoSign(
                                                                                                                                    ) [NoSign]
                                                                                                                                    SingleFactorTerm(
                                                                                                                                      DesignatorFactor(
                                                                                                                                        IdentifierDesignator(
                                                                                                                                         i
                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                      ) [DesignatorFactor]
                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                ) [LeftExpression]
                                                                                                                                LeqOperator(
                                                                                                                                ) [LeqOperator]
                                                                                                                                LeftExpression(
                                                                                                                                  SingleTermExpression(
                                                                                                                                    NoSign(
                                                                                                                                    ) [NoSign]
                                                                                                                                    SingleFactorTerm(
                                                                                                                                      DesignatorFactor(
                                                                                                                                        IdentifierDesignator(
                                                                                                                                         n
                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                      ) [DesignatorFactor]
                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                ) [LeftExpression]
                                                                                                                              ) [ComplexConditionFact]
                                                                                                                            ) [SingleFactConditionTerm]
                                                                                                                          ) [SingleTermCondition]
                                                                                                                        ) [IfStatementHeader]
                                                                                                                        DesignatorBasedStatement(
                                                                                                                          AssignmentDesignatorStatement(
                                                                                                                            AssignmentHeader(
                                                                                                                              IdentifierDesignator(
                                                                                                                               n
                                                                                                                              ) [IdentifierDesignator]
                                                                                                                            ) [AssignmentHeader]
                                                                                                                            AssignmentFooter(
                                                                                                                              AssignOperator(
                                                                                                                              ) [AssignOperator]
                                                                                                                              LeftExpression(
                                                                                                                                SingleTermExpression(
                                                                                                                                  NoSign(
                                                                                                                                  ) [NoSign]
                                                                                                                                  SingleFactorTerm(
                                                                                                                                    ConstantFactor(
                                                                                                                                      IntConstantFactor(
                                                                                                                                       0
                                                                                                                                      ) [IntConstantFactor]
                                                                                                                                    ) [ConstantFactor]
                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                ) [SingleTermExpression]
                                                                                                                              ) [LeftExpression]
                                                                                                                            ) [AssignmentFooter]
                                                                                                                          ) [AssignmentDesignatorStatement]
                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                        NoElseStatment(
                                                                                                                        ) [NoElseStatment]
                                                                                                                      ) [IfOptElseStatement]
                                                                                                                    ) [MultipleStatements]
                                                                                                                    PrintStatement(
                                                                                                                      LeftExpression(
                                                                                                                        SingleTermExpression(
                                                                                                                          NoSign(
                                                                                                                          ) [NoSign]
                                                                                                                          SingleFactorTerm(
                                                                                                                            ConstantFactor(
                                                                                                                              IntConstantFactor(
                                                                                                                               1
                                                                                                                              ) [IntConstantFactor]
                                                                                                                            ) [ConstantFactor]
                                                                                                                          ) [SingleFactorTerm]
                                                                                                                        ) [SingleTermExpression]
                                                                                                                      ) [LeftExpression]
                                                                                                                      NoPrintWidth(
                                                                                                                      ) [NoPrintWidth]
                                                                                                                    ) [PrintStatement]
                                                                                                                  ) [MultipleStatements]
                                                                                                                  PrintStatement(
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          ConstantFactor(
                                                                                                                            CharConstantFactor(
                                                                                                                             :
                                                                                                                            ) [CharConstantFactor]
                                                                                                                          ) [ConstantFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                    NoPrintWidth(
                                                                                                                    ) [NoPrintWidth]
                                                                                                                  ) [PrintStatement]
                                                                                                                ) [MultipleStatements]
                                                                                                                PrintStatement(
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        DesignatorFactor(
                                                                                                                          IdentifierDesignator(
                                                                                                                           n
                                                                                                                          ) [IdentifierDesignator]
                                                                                                                        ) [DesignatorFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                  NoPrintWidth(
                                                                                                                  ) [NoPrintWidth]
                                                                                                                ) [PrintStatement]
                                                                                                              ) [MultipleStatements]
                                                                                                              PrintStatement(
                                                                                                                LeftExpression(
                                                                                                                  SingleTermExpression(
                                                                                                                    NoSign(
                                                                                                                    ) [NoSign]
                                                                                                                    SingleFactorTerm(
                                                                                                                      DesignatorFactor(
                                                                                                                        IdentifierDesignator(
                                                                                                                         eol
                                                                                                                        ) [IdentifierDesignator]
                                                                                                                      ) [DesignatorFactor]
                                                                                                                    ) [SingleFactorTerm]
                                                                                                                  ) [SingleTermExpression]
                                                                                                                ) [LeftExpression]
                                                                                                                NoPrintWidth(
                                                                                                                ) [NoPrintWidth]
                                                                                                              ) [PrintStatement]
                                                                                                            ) [MultipleStatements]
                                                                                                            DesignatorBasedStatement(
                                                                                                              AssignmentDesignatorStatement(
                                                                                                                AssignmentHeader(
                                                                                                                  IdentifierDesignator(
                                                                                                                   i
                                                                                                                  ) [IdentifierDesignator]
                                                                                                                ) [AssignmentHeader]
                                                                                                                AssignmentFooter(
                                                                                                                  AssignOperator(
                                                                                                                  ) [AssignOperator]
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      MinusSign(
                                                                                                                      ) [MinusSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        ConstantFactor(
                                                                                                                          IntConstantFactor(
                                                                                                                           6
                                                                                                                          ) [IntConstantFactor]
                                                                                                                        ) [ConstantFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                ) [AssignmentFooter]
                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                            ) [DesignatorBasedStatement]
                                                                                                          ) [MultipleStatements]
                                                                                                          DesignatorBasedStatement(
                                                                                                            AssignmentDesignatorStatement(
                                                                                                              AssignmentHeader(
                                                                                                                IdentifierDesignator(
                                                                                                                 n
                                                                                                                ) [IdentifierDesignator]
                                                                                                              ) [AssignmentHeader]
                                                                                                              AssignmentFooter(
                                                                                                                AssignOperator(
                                                                                                                ) [AssignOperator]
                                                                                                                LeftExpression(
                                                                                                                  SingleTermExpression(
                                                                                                                    MinusSign(
                                                                                                                    ) [MinusSign]
                                                                                                                    SingleFactorTerm(
                                                                                                                      ConstantFactor(
                                                                                                                        IntConstantFactor(
                                                                                                                         4
                                                                                                                        ) [IntConstantFactor]
                                                                                                                      ) [ConstantFactor]
                                                                                                                    ) [SingleFactorTerm]
                                                                                                                  ) [SingleTermExpression]
                                                                                                                ) [LeftExpression]
                                                                                                              ) [AssignmentFooter]
                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                          ) [DesignatorBasedStatement]
                                                                                                        ) [MultipleStatements]
                                                                                                        IfOptElseStatement(
                                                                                                          IfStatementHeader(
                                                                                                            IfStatementHeaderStart(
                                                                                                            ) [IfStatementHeaderStart]
                                                                                                            SingleTermCondition(
                                                                                                              MultipleFactsConditionTerm(
                                                                                                                SingleFactConditionTerm(
                                                                                                                  ComplexConditionFact(
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          DesignatorFactor(
                                                                                                                            IdentifierDesignator(
                                                                                                                             i
                                                                                                                            ) [IdentifierDesignator]
                                                                                                                          ) [DesignatorFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                    LeqOperator(
                                                                                                                    ) [LeqOperator]
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          DesignatorFactor(
                                                                                                                            IdentifierDesignator(
                                                                                                                             n
                                                                                                                            ) [IdentifierDesignator]
                                                                                                                          ) [DesignatorFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                  ) [ComplexConditionFact]
                                                                                                                ) [SingleFactConditionTerm]
                                                                                                                ComplexConditionFact(
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        DesignatorFactor(
                                                                                                                          IdentifierDesignator(
                                                                                                                           n
                                                                                                                          ) [IdentifierDesignator]
                                                                                                                        ) [DesignatorFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                  LssOperator(
                                                                                                                  ) [LssOperator]
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        ConstantFactor(
                                                                                                                          IntConstantFactor(
                                                                                                                           0
                                                                                                                          ) [IntConstantFactor]
                                                                                                                        ) [ConstantFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                ) [ComplexConditionFact]
                                                                                                              ) [MultipleFactsConditionTerm]
                                                                                                            ) [SingleTermCondition]
                                                                                                          ) [IfStatementHeader]
                                                                                                          DesignatorBasedStatement(
                                                                                                            AssignmentDesignatorStatement(
                                                                                                              AssignmentHeader(
                                                                                                                IdentifierDesignator(
                                                                                                                 n
                                                                                                                ) [IdentifierDesignator]
                                                                                                              ) [AssignmentHeader]
                                                                                                              AssignmentFooter(
                                                                                                                AssignOperator(
                                                                                                                ) [AssignOperator]
                                                                                                                LeftExpression(
                                                                                                                  SingleTermExpression(
                                                                                                                    NoSign(
                                                                                                                    ) [NoSign]
                                                                                                                    SingleFactorTerm(
                                                                                                                      ConstantFactor(
                                                                                                                        IntConstantFactor(
                                                                                                                         0
                                                                                                                        ) [IntConstantFactor]
                                                                                                                      ) [ConstantFactor]
                                                                                                                    ) [SingleFactorTerm]
                                                                                                                  ) [SingleTermExpression]
                                                                                                                ) [LeftExpression]
                                                                                                              ) [AssignmentFooter]
                                                                                                            ) [AssignmentDesignatorStatement]
                                                                                                          ) [DesignatorBasedStatement]
                                                                                                          NoElseStatment(
                                                                                                          ) [NoElseStatment]
                                                                                                        ) [IfOptElseStatement]
                                                                                                      ) [MultipleStatements]
                                                                                                      PrintStatement(
                                                                                                        LeftExpression(
                                                                                                          SingleTermExpression(
                                                                                                            NoSign(
                                                                                                            ) [NoSign]
                                                                                                            SingleFactorTerm(
                                                                                                              ConstantFactor(
                                                                                                                IntConstantFactor(
                                                                                                                 2
                                                                                                                ) [IntConstantFactor]
                                                                                                              ) [ConstantFactor]
                                                                                                            ) [SingleFactorTerm]
                                                                                                          ) [SingleTermExpression]
                                                                                                        ) [LeftExpression]
                                                                                                        NoPrintWidth(
                                                                                                        ) [NoPrintWidth]
                                                                                                      ) [PrintStatement]
                                                                                                    ) [MultipleStatements]
                                                                                                    PrintStatement(
                                                                                                      LeftExpression(
                                                                                                        SingleTermExpression(
                                                                                                          NoSign(
                                                                                                          ) [NoSign]
                                                                                                          SingleFactorTerm(
                                                                                                            ConstantFactor(
                                                                                                              CharConstantFactor(
                                                                                                               :
                                                                                                              ) [CharConstantFactor]
                                                                                                            ) [ConstantFactor]
                                                                                                          ) [SingleFactorTerm]
                                                                                                        ) [SingleTermExpression]
                                                                                                      ) [LeftExpression]
                                                                                                      NoPrintWidth(
                                                                                                      ) [NoPrintWidth]
                                                                                                    ) [PrintStatement]
                                                                                                  ) [MultipleStatements]
                                                                                                  PrintStatement(
                                                                                                    LeftExpression(
                                                                                                      SingleTermExpression(
                                                                                                        NoSign(
                                                                                                        ) [NoSign]
                                                                                                        SingleFactorTerm(
                                                                                                          DesignatorFactor(
                                                                                                            IdentifierDesignator(
                                                                                                             n
                                                                                                            ) [IdentifierDesignator]
                                                                                                          ) [DesignatorFactor]
                                                                                                        ) [SingleFactorTerm]
                                                                                                      ) [SingleTermExpression]
                                                                                                    ) [LeftExpression]
                                                                                                    NoPrintWidth(
                                                                                                    ) [NoPrintWidth]
                                                                                                  ) [PrintStatement]
                                                                                                ) [MultipleStatements]
                                                                                                PrintStatement(
                                                                                                  LeftExpression(
                                                                                                    SingleTermExpression(
                                                                                                      NoSign(
                                                                                                      ) [NoSign]
                                                                                                      SingleFactorTerm(
                                                                                                        DesignatorFactor(
                                                                                                          IdentifierDesignator(
                                                                                                           eol
                                                                                                          ) [IdentifierDesignator]
                                                                                                        ) [DesignatorFactor]
                                                                                                      ) [SingleFactorTerm]
                                                                                                    ) [SingleTermExpression]
                                                                                                  ) [LeftExpression]
                                                                                                  NoPrintWidth(
                                                                                                  ) [NoPrintWidth]
                                                                                                ) [PrintStatement]
                                                                                              ) [MultipleStatements]
                                                                                              DesignatorBasedStatement(
                                                                                                AssignmentDesignatorStatement(
                                                                                                  AssignmentHeader(
                                                                                                    IdentifierDesignator(
                                                                                                     i
                                                                                                    ) [IdentifierDesignator]
                                                                                                  ) [AssignmentHeader]
                                                                                                  AssignmentFooter(
                                                                                                    AssignOperator(
                                                                                                    ) [AssignOperator]
                                                                                                    LeftExpression(
                                                                                                      SingleTermExpression(
                                                                                                        MinusSign(
                                                                                                        ) [MinusSign]
                                                                                                        SingleFactorTerm(
                                                                                                          ConstantFactor(
                                                                                                            IntConstantFactor(
                                                                                                             3
                                                                                                            ) [IntConstantFactor]
                                                                                                          ) [ConstantFactor]
                                                                                                        ) [SingleFactorTerm]
                                                                                                      ) [SingleTermExpression]
                                                                                                    ) [LeftExpression]
                                                                                                  ) [AssignmentFooter]
                                                                                                ) [AssignmentDesignatorStatement]
                                                                                              ) [DesignatorBasedStatement]
                                                                                            ) [MultipleStatements]
                                                                                            DesignatorBasedStatement(
                                                                                              AssignmentDesignatorStatement(
                                                                                                AssignmentHeader(
                                                                                                  IdentifierDesignator(
                                                                                                   n
                                                                                                  ) [IdentifierDesignator]
                                                                                                ) [AssignmentHeader]
                                                                                                AssignmentFooter(
                                                                                                  AssignOperator(
                                                                                                  ) [AssignOperator]
                                                                                                  LeftExpression(
                                                                                                    SingleTermExpression(
                                                                                                      MinusSign(
                                                                                                      ) [MinusSign]
                                                                                                      SingleFactorTerm(
                                                                                                        ConstantFactor(
                                                                                                          IntConstantFactor(
                                                                                                           6
                                                                                                          ) [IntConstantFactor]
                                                                                                        ) [ConstantFactor]
                                                                                                      ) [SingleFactorTerm]
                                                                                                    ) [SingleTermExpression]
                                                                                                  ) [LeftExpression]
                                                                                                ) [AssignmentFooter]
                                                                                              ) [AssignmentDesignatorStatement]
                                                                                            ) [DesignatorBasedStatement]
                                                                                          ) [MultipleStatements]
                                                                                          IfOptElseStatement(
                                                                                            IfStatementHeader(
                                                                                              IfStatementHeaderStart(
                                                                                              ) [IfStatementHeaderStart]
                                                                                              MultipleTermsCondition(
                                                                                                SingleTermCondition(
                                                                                                  SingleFactConditionTerm(
                                                                                                    ComplexConditionFact(
                                                                                                      LeftExpression(
                                                                                                        SingleTermExpression(
                                                                                                          NoSign(
                                                                                                          ) [NoSign]
                                                                                                          SingleFactorTerm(
                                                                                                            DesignatorFactor(
                                                                                                              IdentifierDesignator(
                                                                                                               i
                                                                                                              ) [IdentifierDesignator]
                                                                                                            ) [DesignatorFactor]
                                                                                                          ) [SingleFactorTerm]
                                                                                                        ) [SingleTermExpression]
                                                                                                      ) [LeftExpression]
                                                                                                      LeqOperator(
                                                                                                      ) [LeqOperator]
                                                                                                      LeftExpression(
                                                                                                        SingleTermExpression(
                                                                                                          NoSign(
                                                                                                          ) [NoSign]
                                                                                                          SingleFactorTerm(
                                                                                                            DesignatorFactor(
                                                                                                              IdentifierDesignator(
                                                                                                               n
                                                                                                              ) [IdentifierDesignator]
                                                                                                            ) [DesignatorFactor]
                                                                                                          ) [SingleFactorTerm]
                                                                                                        ) [SingleTermExpression]
                                                                                                      ) [LeftExpression]
                                                                                                    ) [ComplexConditionFact]
                                                                                                  ) [SingleFactConditionTerm]
                                                                                                ) [SingleTermCondition]
                                                                                                SingleFactConditionTerm(
                                                                                                  ComplexConditionFact(
                                                                                                    LeftExpression(
                                                                                                      SingleTermExpression(
                                                                                                        NoSign(
                                                                                                        ) [NoSign]
                                                                                                        SingleFactorTerm(
                                                                                                          DesignatorFactor(
                                                                                                            IdentifierDesignator(
                                                                                                             n
                                                                                                            ) [IdentifierDesignator]
                                                                                                          ) [DesignatorFactor]
                                                                                                        ) [SingleFactorTerm]
                                                                                                      ) [SingleTermExpression]
                                                                                                    ) [LeftExpression]
                                                                                                    LssOperator(
                                                                                                    ) [LssOperator]
                                                                                                    LeftExpression(
                                                                                                      SingleTermExpression(
                                                                                                        NoSign(
                                                                                                        ) [NoSign]
                                                                                                        SingleFactorTerm(
                                                                                                          ConstantFactor(
                                                                                                            IntConstantFactor(
                                                                                                             0
                                                                                                            ) [IntConstantFactor]
                                                                                                          ) [ConstantFactor]
                                                                                                        ) [SingleFactorTerm]
                                                                                                      ) [SingleTermExpression]
                                                                                                    ) [LeftExpression]
                                                                                                  ) [ComplexConditionFact]
                                                                                                ) [SingleFactConditionTerm]
                                                                                              ) [MultipleTermsCondition]
                                                                                            ) [IfStatementHeader]
                                                                                            DesignatorBasedStatement(
                                                                                              AssignmentDesignatorStatement(
                                                                                                AssignmentHeader(
                                                                                                  IdentifierDesignator(
                                                                                                   n
                                                                                                  ) [IdentifierDesignator]
                                                                                                ) [AssignmentHeader]
                                                                                                AssignmentFooter(
                                                                                                  AssignOperator(
                                                                                                  ) [AssignOperator]
                                                                                                  LeftExpression(
                                                                                                    SingleTermExpression(
                                                                                                      NoSign(
                                                                                                      ) [NoSign]
                                                                                                      SingleFactorTerm(
                                                                                                        ConstantFactor(
                                                                                                          IntConstantFactor(
                                                                                                           0
                                                                                                          ) [IntConstantFactor]
                                                                                                        ) [ConstantFactor]
                                                                                                      ) [SingleFactorTerm]
                                                                                                    ) [SingleTermExpression]
                                                                                                  ) [LeftExpression]
                                                                                                ) [AssignmentFooter]
                                                                                              ) [AssignmentDesignatorStatement]
                                                                                            ) [DesignatorBasedStatement]
                                                                                            NoElseStatment(
                                                                                            ) [NoElseStatment]
                                                                                          ) [IfOptElseStatement]
                                                                                        ) [MultipleStatements]
                                                                                        PrintStatement(
                                                                                          LeftExpression(
                                                                                            SingleTermExpression(
                                                                                              NoSign(
                                                                                              ) [NoSign]
                                                                                              SingleFactorTerm(
                                                                                                ConstantFactor(
                                                                                                  IntConstantFactor(
                                                                                                   3
                                                                                                  ) [IntConstantFactor]
                                                                                                ) [ConstantFactor]
                                                                                              ) [SingleFactorTerm]
                                                                                            ) [SingleTermExpression]
                                                                                          ) [LeftExpression]
                                                                                          NoPrintWidth(
                                                                                          ) [NoPrintWidth]
                                                                                        ) [PrintStatement]
                                                                                      ) [MultipleStatements]
                                                                                      PrintStatement(
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              ConstantFactor(
                                                                                                CharConstantFactor(
                                                                                                 :
                                                                                                ) [CharConstantFactor]
                                                                                              ) [ConstantFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                        NoPrintWidth(
                                                                                        ) [NoPrintWidth]
                                                                                      ) [PrintStatement]
                                                                                    ) [MultipleStatements]
                                                                                    PrintStatement(
                                                                                      LeftExpression(
                                                                                        SingleTermExpression(
                                                                                          NoSign(
                                                                                          ) [NoSign]
                                                                                          SingleFactorTerm(
                                                                                            DesignatorFactor(
                                                                                              IdentifierDesignator(
                                                                                               n
                                                                                              ) [IdentifierDesignator]
                                                                                            ) [DesignatorFactor]
                                                                                          ) [SingleFactorTerm]
                                                                                        ) [SingleTermExpression]
                                                                                      ) [LeftExpression]
                                                                                      NoPrintWidth(
                                                                                      ) [NoPrintWidth]
                                                                                    ) [PrintStatement]
                                                                                  ) [MultipleStatements]
                                                                                  PrintStatement(
                                                                                    LeftExpression(
                                                                                      SingleTermExpression(
                                                                                        NoSign(
                                                                                        ) [NoSign]
                                                                                        SingleFactorTerm(
                                                                                          DesignatorFactor(
                                                                                            IdentifierDesignator(
                                                                                             eol
                                                                                            ) [IdentifierDesignator]
                                                                                          ) [DesignatorFactor]
                                                                                        ) [SingleFactorTerm]
                                                                                      ) [SingleTermExpression]
                                                                                    ) [LeftExpression]
                                                                                    NoPrintWidth(
                                                                                    ) [NoPrintWidth]
                                                                                  ) [PrintStatement]
                                                                                ) [MultipleStatements]
                                                                                DesignatorBasedStatement(
                                                                                  AssignmentDesignatorStatement(
                                                                                    AssignmentHeader(
                                                                                      IdentifierDesignator(
                                                                                       i
                                                                                      ) [IdentifierDesignator]
                                                                                    ) [AssignmentHeader]
                                                                                    AssignmentFooter(
                                                                                      AssignOperator(
                                                                                      ) [AssignOperator]
                                                                                      LeftExpression(
                                                                                        SingleTermExpression(
                                                                                          NoSign(
                                                                                          ) [NoSign]
                                                                                          SingleFactorTerm(
                                                                                            ConstantFactor(
                                                                                              IntConstantFactor(
                                                                                               2
                                                                                              ) [IntConstantFactor]
                                                                                            ) [ConstantFactor]
                                                                                          ) [SingleFactorTerm]
                                                                                        ) [SingleTermExpression]
                                                                                      ) [LeftExpression]
                                                                                    ) [AssignmentFooter]
                                                                                  ) [AssignmentDesignatorStatement]
                                                                                ) [DesignatorBasedStatement]
                                                                              ) [MultipleStatements]
                                                                              DesignatorBasedStatement(
                                                                                AssignmentDesignatorStatement(
                                                                                  AssignmentHeader(
                                                                                    IdentifierDesignator(
                                                                                     n
                                                                                    ) [IdentifierDesignator]
                                                                                  ) [AssignmentHeader]
                                                                                  AssignmentFooter(
                                                                                    AssignOperator(
                                                                                    ) [AssignOperator]
                                                                                    LeftExpression(
                                                                                      SingleTermExpression(
                                                                                        NoSign(
                                                                                        ) [NoSign]
                                                                                        SingleFactorTerm(
                                                                                          ConstantFactor(
                                                                                            IntConstantFactor(
                                                                                             6
                                                                                            ) [IntConstantFactor]
                                                                                          ) [ConstantFactor]
                                                                                        ) [SingleFactorTerm]
                                                                                      ) [SingleTermExpression]
                                                                                    ) [LeftExpression]
                                                                                  ) [AssignmentFooter]
                                                                                ) [AssignmentDesignatorStatement]
                                                                              ) [DesignatorBasedStatement]
                                                                            ) [MultipleStatements]
                                                                            IfOptElseStatement(
                                                                              IfStatementHeader(
                                                                                IfStatementHeaderStart(
                                                                                ) [IfStatementHeaderStart]
                                                                                MultipleTermsCondition(
                                                                                  SingleTermCondition(
                                                                                    SingleFactConditionTerm(
                                                                                      ComplexConditionFact(
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              DesignatorFactor(
                                                                                                IdentifierDesignator(
                                                                                                 i
                                                                                                ) [IdentifierDesignator]
                                                                                              ) [DesignatorFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                        LeqOperator(
                                                                                        ) [LeqOperator]
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              DesignatorFactor(
                                                                                                IdentifierDesignator(
                                                                                                 n
                                                                                                ) [IdentifierDesignator]
                                                                                              ) [DesignatorFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                      ) [ComplexConditionFact]
                                                                                    ) [SingleFactConditionTerm]
                                                                                  ) [SingleTermCondition]
                                                                                  MultipleFactsConditionTerm(
                                                                                    SingleFactConditionTerm(
                                                                                      ComplexConditionFact(
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              DesignatorFactor(
                                                                                                IdentifierDesignator(
                                                                                                 n
                                                                                                ) [IdentifierDesignator]
                                                                                              ) [DesignatorFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                        LssOperator(
                                                                                        ) [LssOperator]
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              ConstantFactor(
                                                                                                IntConstantFactor(
                                                                                                 0
                                                                                                ) [IntConstantFactor]
                                                                                              ) [ConstantFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                      ) [ComplexConditionFact]
                                                                                    ) [SingleFactConditionTerm]
                                                                                    ComplexConditionFact(
                                                                                      LeftExpression(
                                                                                        SingleTermExpression(
                                                                                          NoSign(
                                                                                          ) [NoSign]
                                                                                          SingleFactorTerm(
                                                                                            DesignatorFactor(
                                                                                              IdentifierDesignator(
                                                                                               i
                                                                                              ) [IdentifierDesignator]
                                                                                            ) [DesignatorFactor]
                                                                                          ) [SingleFactorTerm]
                                                                                        ) [SingleTermExpression]
                                                                                      ) [LeftExpression]
                                                                                      GrtOperator(
                                                                                      ) [GrtOperator]
                                                                                      LeftExpression(
                                                                                        SingleTermExpression(
                                                                                          NoSign(
                                                                                          ) [NoSign]
                                                                                          SingleFactorTerm(
                                                                                            ConstantFactor(
                                                                                              IntConstantFactor(
                                                                                               0
                                                                                              ) [IntConstantFactor]
                                                                                            ) [ConstantFactor]
                                                                                          ) [SingleFactorTerm]
                                                                                        ) [SingleTermExpression]
                                                                                      ) [LeftExpression]
                                                                                    ) [ComplexConditionFact]
                                                                                  ) [MultipleFactsConditionTerm]
                                                                                ) [MultipleTermsCondition]
                                                                              ) [IfStatementHeader]
                                                                              DesignatorBasedStatement(
                                                                                AssignmentDesignatorStatement(
                                                                                  AssignmentHeader(
                                                                                    IdentifierDesignator(
                                                                                     n
                                                                                    ) [IdentifierDesignator]
                                                                                  ) [AssignmentHeader]
                                                                                  AssignmentFooter(
                                                                                    AssignOperator(
                                                                                    ) [AssignOperator]
                                                                                    LeftExpression(
                                                                                      SingleTermExpression(
                                                                                        NoSign(
                                                                                        ) [NoSign]
                                                                                        SingleFactorTerm(
                                                                                          ConstantFactor(
                                                                                            IntConstantFactor(
                                                                                             0
                                                                                            ) [IntConstantFactor]
                                                                                          ) [ConstantFactor]
                                                                                        ) [SingleFactorTerm]
                                                                                      ) [SingleTermExpression]
                                                                                    ) [LeftExpression]
                                                                                  ) [AssignmentFooter]
                                                                                ) [AssignmentDesignatorStatement]
                                                                              ) [DesignatorBasedStatement]
                                                                              NoElseStatment(
                                                                              ) [NoElseStatment]
                                                                            ) [IfOptElseStatement]
                                                                          ) [MultipleStatements]
                                                                          PrintStatement(
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     4
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                            NoPrintWidth(
                                                                            ) [NoPrintWidth]
                                                                          ) [PrintStatement]
                                                                        ) [MultipleStatements]
                                                                        PrintStatement(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                ConstantFactor(
                                                                                  CharConstantFactor(
                                                                                   :
                                                                                  ) [CharConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                          NoPrintWidth(
                                                                          ) [NoPrintWidth]
                                                                        ) [PrintStatement]
                                                                      ) [MultipleStatements]
                                                                      PrintStatement(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              DesignatorFactor(
                                                                                IdentifierDesignator(
                                                                                 n
                                                                                ) [IdentifierDesignator]
                                                                              ) [DesignatorFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                        NoPrintWidth(
                                                                        ) [NoPrintWidth]
                                                                      ) [PrintStatement]
                                                                    ) [MultipleStatements]
                                                                    PrintStatement(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            DesignatorFactor(
                                                                              IdentifierDesignator(
                                                                               eol
                                                                              ) [IdentifierDesignator]
                                                                            ) [DesignatorFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                      NoPrintWidth(
                                                                      ) [NoPrintWidth]
                                                                    ) [PrintStatement]
                                                                  ) [MultipleStatements]
                                                                  DesignatorBasedStatement(
                                                                    AssignmentDesignatorStatement(
                                                                      AssignmentHeader(
                                                                        IdentifierDesignator(
                                                                         i
                                                                        ) [IdentifierDesignator]
                                                                      ) [AssignmentHeader]
                                                                      AssignmentFooter(
                                                                        AssignOperator(
                                                                        ) [AssignOperator]
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            MinusSign(
                                                                            ) [MinusSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 1
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [AssignmentFooter]
                                                                    ) [AssignmentDesignatorStatement]
                                                                  ) [DesignatorBasedStatement]
                                                                ) [MultipleStatements]
                                                                DesignatorBasedStatement(
                                                                  AssignmentDesignatorStatement(
                                                                    AssignmentHeader(
                                                                      IdentifierDesignator(
                                                                       n
                                                                      ) [IdentifierDesignator]
                                                                    ) [AssignmentHeader]
                                                                    AssignmentFooter(
                                                                      AssignOperator(
                                                                      ) [AssignOperator]
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          MinusSign(
                                                                          ) [MinusSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               6
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [AssignmentFooter]
                                                                  ) [AssignmentDesignatorStatement]
                                                                ) [DesignatorBasedStatement]
                                                              ) [MultipleStatements]
                                                              IfOptElseStatement(
                                                                IfStatementHeader(
                                                                  IfStatementHeaderStart(
                                                                  ) [IfStatementHeaderStart]
                                                                  MultipleTermsCondition(
                                                                    MultipleTermsCondition(
                                                                      SingleTermCondition(
                                                                        MultipleFactsConditionTerm(
                                                                          SingleFactConditionTerm(
                                                                            ComplexConditionFact(
                                                                              LeftExpression(
                                                                                SingleTermExpression(
                                                                                  NoSign(
                                                                                  ) [NoSign]
                                                                                  SingleFactorTerm(
                                                                                    DesignatorFactor(
                                                                                      IdentifierDesignator(
                                                                                       n
                                                                                      ) [IdentifierDesignator]
                                                                                    ) [DesignatorFactor]
                                                                                  ) [SingleFactorTerm]
                                                                                ) [SingleTermExpression]
                                                                              ) [LeftExpression]
                                                                              LssOperator(
                                                                              ) [LssOperator]
                                                                              LeftExpression(
                                                                                SingleTermExpression(
                                                                                  NoSign(
                                                                                  ) [NoSign]
                                                                                  SingleFactorTerm(
                                                                                    ConstantFactor(
                                                                                      IntConstantFactor(
                                                                                       0
                                                                                      ) [IntConstantFactor]
                                                                                    ) [ConstantFactor]
                                                                                  ) [SingleFactorTerm]
                                                                                ) [SingleTermExpression]
                                                                              ) [LeftExpression]
                                                                            ) [ComplexConditionFact]
                                                                          ) [SingleFactConditionTerm]
                                                                          ComplexConditionFact(
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  DesignatorFactor(
                                                                                    IdentifierDesignator(
                                                                                     i
                                                                                    ) [IdentifierDesignator]
                                                                                  ) [DesignatorFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                            GrtOperator(
                                                                            ) [GrtOperator]
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    IntConstantFactor(
                                                                                     0
                                                                                    ) [IntConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                          ) [ComplexConditionFact]
                                                                        ) [MultipleFactsConditionTerm]
                                                                      ) [SingleTermCondition]
                                                                      SingleFactConditionTerm(
                                                                        ComplexConditionFact(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                DesignatorFactor(
                                                                                  IdentifierDesignator(
                                                                                   i
                                                                                  ) [IdentifierDesignator]
                                                                                ) [DesignatorFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                          LeqOperator(
                                                                          ) [LeqOperator]
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                DesignatorFactor(
                                                                                  IdentifierDesignator(
                                                                                   n
                                                                                  ) [IdentifierDesignator]
                                                                                ) [DesignatorFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [ComplexConditionFact]
                                                                      ) [SingleFactConditionTerm]
                                                                    ) [MultipleTermsCondition]
                                                                    SingleFactConditionTerm(
                                                                      ComplexConditionFact(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 5
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                        GrtOperator(
                                                                        ) [GrtOperator]
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                IntConstantFactor(
                                                                                 7
                                                                                ) [IntConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                      ) [ComplexConditionFact]
                                                                    ) [SingleFactConditionTerm]
                                                                  ) [MultipleTermsCondition]
                                                                ) [IfStatementHeader]
                                                                DesignatorBasedStatement(
                                                                  AssignmentDesignatorStatement(
                                                                    AssignmentHeader(
                                                                      IdentifierDesignator(
                                                                       n
                                                                      ) [IdentifierDesignator]
                                                                    ) [AssignmentHeader]
                                                                    AssignmentFooter(
                                                                      AssignOperator(
                                                                      ) [AssignOperator]
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              IntConstantFactor(
                                                                               0
                                                                              ) [IntConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [AssignmentFooter]
                                                                  ) [AssignmentDesignatorStatement]
                                                                ) [DesignatorBasedStatement]
                                                                NoElseStatment(
                                                                ) [NoElseStatment]
                                                              ) [IfOptElseStatement]
                                                            ) [MultipleStatements]
                                                            PrintStatement(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      IntConstantFactor(
                                                                       5
                                                                      ) [IntConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                              NoPrintWidth(
                                                              ) [NoPrintWidth]
                                                            ) [PrintStatement]
                                                          ) [MultipleStatements]
                                                          PrintStatement(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    CharConstantFactor(
                                                                     :
                                                                    ) [CharConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            NoPrintWidth(
                                                            ) [NoPrintWidth]
                                                          ) [PrintStatement]
                                                        ) [MultipleStatements]
                                                        PrintStatement(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   n
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          NoPrintWidth(
                                                          ) [NoPrintWidth]
                                                        ) [PrintStatement]
                                                      ) [MultipleStatements]
                                                      PrintStatement(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              DesignatorFactor(
                                                                IdentifierDesignator(
                                                                 eol
                                                                ) [IdentifierDesignator]
                                                              ) [DesignatorFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                        NoPrintWidth(
                                                        ) [NoPrintWidth]
                                                      ) [PrintStatement]
                                                    ) [MultipleStatements]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          IdentifierDesignator(
                                                           i
                                                          ) [IdentifierDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   10
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [MultipleStatements]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        IdentifierDesignator(
                                                         n
                                                        ) [IdentifierDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 5
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                ) [MultipleStatements]
                                                IfOptElseStatement(
                                                  IfStatementHeader(
                                                    IfStatementHeaderStart(
                                                    ) [IfStatementHeaderStart]
                                                    SingleTermCondition(
                                                      SingleFactConditionTerm(
                                                        ComplexConditionFact(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   i
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          LeqOperator(
                                                          ) [LeqOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   n
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ComplexConditionFact]
                                                      ) [SingleFactConditionTerm]
                                                    ) [SingleTermCondition]
                                                  ) [IfStatementHeader]
                                                  DesignatorBasedStatement(
                                                    AssignmentDesignatorStatement(
                                                      AssignmentHeader(
                                                        IdentifierDesignator(
                                                         n
                                                        ) [IdentifierDesignator]
                                                      ) [AssignmentHeader]
                                                      AssignmentFooter(
                                                        AssignOperator(
                                                        ) [AssignOperator]
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                IntConstantFactor(
                                                                 0
                                                                ) [IntConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                      ) [AssignmentFooter]
                                                    ) [AssignmentDesignatorStatement]
                                                  ) [DesignatorBasedStatement]
                                                  ElseStatement(
                                                    ElseStatementStart(
                                                    ) [ElseStatementStart]
                                                    DesignatorBasedStatement(
                                                      AssignmentDesignatorStatement(
                                                        AssignmentHeader(
                                                          IdentifierDesignator(
                                                           n
                                                          ) [IdentifierDesignator]
                                                        ) [AssignmentHeader]
                                                        AssignmentFooter(
                                                          AssignOperator(
                                                          ) [AssignOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  IntConstantFactor(
                                                                   1
                                                                  ) [IntConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [AssignmentFooter]
                                                      ) [AssignmentDesignatorStatement]
                                                    ) [DesignatorBasedStatement]
                                                  ) [ElseStatement]
                                                ) [IfOptElseStatement]
                                              ) [MultipleStatements]
                                              PrintStatement(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        IntConstantFactor(
                                                         6
                                                        ) [IntConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                NoPrintWidth(
                                                ) [NoPrintWidth]
                                              ) [PrintStatement]
                                            ) [MultipleStatements]
                                            PrintStatement(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       :
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              NoPrintWidth(
                                              ) [NoPrintWidth]
                                            ) [PrintStatement]
                                          ) [MultipleStatements]
                                          PrintStatement(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     n
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            NoPrintWidth(
                                            ) [NoPrintWidth]
                                          ) [PrintStatement]
                                        ) [MultipleStatements]
                                        PrintStatement(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   eol
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          NoPrintWidth(
                                          ) [NoPrintWidth]
                                        ) [PrintStatement]
                                      ) [MultipleStatements]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             n
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     1
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [MultipleStatements]
                                    PrintStatement(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               7
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      NoPrintWidth(
                                      ) [NoPrintWidth]
                                    ) [PrintStatement]
                                  ) [MultipleStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             :
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                IfOptElseStatement(
                                  IfStatementHeader(
                                    IfStatementHeaderStart(
                                    ) [IfStatementHeaderStart]
                                    SingleTermCondition(
                                      SingleFactConditionTerm(
                                        ComplexConditionFact(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   n
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          GrtOperator(
                                          ) [GrtOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   2
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ComplexConditionFact]
                                      ) [SingleFactConditionTerm]
                                    ) [SingleTermCondition]
                                  ) [IfStatementHeader]
                                  IfOptElseStatement(
                                    IfStatementHeader(
                                      IfStatementHeaderStart(
                                      ) [IfStatementHeaderStart]
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     n
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            LssOperator(
                                            ) [LssOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     5
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                    ) [IfStatementHeader]
                                    PrintStatement(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               a
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      NoPrintWidth(
                                      ) [NoPrintWidth]
                                    ) [PrintStatement]
                                    ElseStatement(
                                      ElseStatementStart(
                                      ) [ElseStatementStart]
                                      PrintStatement(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 b
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        NoPrintWidth(
                                        ) [NoPrintWidth]
                                      ) [PrintStatement]
                                    ) [ElseStatement]
                                  ) [IfOptElseStatement]
                                  NoElseStatment(
                                  ) [NoElseStatment]
                                ) [IfOptElseStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         eol
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   n
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           3
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                          ) [MultipleStatements]
                          IfOptElseStatement(
                            IfStatementHeader(
                              IfStatementHeaderStart(
                              ) [IfStatementHeaderStart]
                              SingleTermCondition(
                                SingleFactConditionTerm(
                                  ComplexConditionFact(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          DesignatorFactor(
                                            IdentifierDesignator(
                                             n
                                            ) [IdentifierDesignator]
                                          ) [DesignatorFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    GrtOperator(
                                    ) [GrtOperator]
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            IntConstantFactor(
                                             10
                                            ) [IntConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                  ) [ComplexConditionFact]
                                ) [SingleFactConditionTerm]
                              ) [SingleTermCondition]
                            ) [IfStatementHeader]
                            DesignatorBasedStatement(
                              AssignmentDesignatorStatement(
                                AssignmentHeader(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [AssignmentHeader]
                                AssignmentFooter(
                                  AssignOperator(
                                  ) [AssignOperator]
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          IntConstantFactor(
                                           1
                                          ) [IntConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                ) [AssignmentFooter]
                              ) [AssignmentDesignatorStatement]
                            ) [DesignatorBasedStatement]
                            ElseStatement(
                              ElseStatementStart(
                              ) [ElseStatementStart]
                              IfOptElseStatement(
                                IfStatementHeader(
                                  IfStatementHeaderStart(
                                  ) [IfStatementHeaderStart]
                                  SingleTermCondition(
                                    SingleFactConditionTerm(
                                      ComplexConditionFact(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              DesignatorFactor(
                                                IdentifierDesignator(
                                                 n
                                                ) [IdentifierDesignator]
                                              ) [DesignatorFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        GrtOperator(
                                        ) [GrtOperator]
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                IntConstantFactor(
                                                 5
                                                ) [IntConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                      ) [ComplexConditionFact]
                                    ) [SingleFactConditionTerm]
                                  ) [SingleTermCondition]
                                ) [IfStatementHeader]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       i
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              IntConstantFactor(
                                               2
                                              ) [IntConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                                ElseStatement(
                                  ElseStatementStart(
                                  ) [ElseStatementStart]
                                  IfOptElseStatement(
                                    IfStatementHeader(
                                      IfStatementHeaderStart(
                                      ) [IfStatementHeaderStart]
                                      SingleTermCondition(
                                        SingleFactConditionTerm(
                                          ComplexConditionFact(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  DesignatorFactor(
                                                    IdentifierDesignator(
                                                     n
                                                    ) [IdentifierDesignator]
                                                  ) [DesignatorFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            GrtOperator(
                                            ) [GrtOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     0
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [ComplexConditionFact]
                                        ) [SingleFactConditionTerm]
                                      ) [SingleTermCondition]
                                    ) [IfStatementHeader]
                                    DesignatorBasedStatement(
                                      AssignmentDesignatorStatement(
                                        AssignmentHeader(
                                          IdentifierDesignator(
                                           i
                                          ) [IdentifierDesignator]
                                        ) [AssignmentHeader]
                                        AssignmentFooter(
                                          AssignOperator(
                                          ) [AssignOperator]
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  IntConstantFactor(
                                                   3
                                                  ) [IntConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [AssignmentFooter]
                                      ) [AssignmentDesignatorStatement]
                                    ) [DesignatorBasedStatement]
                                    ElseStatement(
                                      ElseStatementStart(
                                      ) [ElseStatementStart]
                                      DesignatorBasedStatement(
                                        AssignmentDesignatorStatement(
                                          AssignmentHeader(
                                            IdentifierDesignator(
                                             i
                                            ) [IdentifierDesignator]
                                          ) [AssignmentHeader]
                                          AssignmentFooter(
                                            AssignOperator(
                                            ) [AssignOperator]
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    IntConstantFactor(
                                                     4
                                                    ) [IntConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                          ) [AssignmentFooter]
                                        ) [AssignmentDesignatorStatement]
                                      ) [DesignatorBasedStatement]
                                    ) [ElseStatement]
                                  ) [IfOptElseStatement]
                                ) [ElseStatement]
                              ) [IfOptElseStatement]
                            ) [ElseStatement]
                          ) [IfOptElseStatement]
                        ) [MultipleStatements]
                        PrintStatement(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  IntConstantFactor(
                                   8
                                  ) [IntConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          NoPrintWidth(
                          ) [NoPrintWidth]
                        ) [PrintStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                CharConstantFactor(
                                 :
                                ) [CharConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               i
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             eol
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
              ) [MethodDeclaration]
            ) [MultipleMethodDeclarations]
            MethodDeclaration(
              MethodHeader(
                ReturnType(
                  Type(
                   bool
                  ) [Type]
                ) [ReturnType]
               findElementFor
              ) [MethodHeader]
              FormalParameters(
                MultipleFormalParameters(
                  SingleFormalParameter(
                    FormalParameter(
                      Type(
                       int
                      ) [Type]
                     arr
                      ArrayBrackets(
                      ) [ArrayBrackets]
                    ) [FormalParameter]
                  ) [SingleFormalParameter]
                  FormalParameter(
                    Type(
                     int
                    ) [Type]
                   elem
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [FormalParameter]
                ) [MultipleFormalParameters]
              ) [FormalParameters]
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   bool
                  ) [Type]
                  SingleLocalVariable(
                    LocalVariable(
                     found
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              MethodStatementListStart(
              ) [MethodStatementListStart]
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  IdentifierDesignator(
                                                   found
                                                  ) [IdentifierDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          BoolConstantFactor(
                                                           false
                                                          ) [BoolConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          ForStatement(
                                            ForStatementHeader(
                                              ForStatementHeaderStart(
                                              ) [ForStatementHeaderStart]
                                              SingleDesignatorStatement(
                                                AssignmentDesignatorStatement(
                                                  AssignmentHeader(
                                                    IdentifierDesignator(
                                                     globalI
                                                    ) [IdentifierDesignator]
                                                  ) [AssignmentHeader]
                                                  AssignmentFooter(
                                                    AssignOperator(
                                                    ) [AssignOperator]
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            IntConstantFactor(
                                                             0
                                                            ) [IntConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                  ) [AssignmentFooter]
                                                ) [AssignmentDesignatorStatement]
                                              ) [SingleDesignatorStatement]
                                              SingleCondition(
                                                SingleTermCondition(
                                                  SingleFactConditionTerm(
                                                    ComplexConditionFact(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            DesignatorFactor(
                                                              IdentifierDesignator(
                                                               globalI
                                                              ) [IdentifierDesignator]
                                                            ) [DesignatorFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                      LssOperator(
                                                      ) [LssOperator]
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            MethodCallFactor(
                                                              MethodCall(
                                                                MethodCallHeader(
                                                                  IdentifierDesignator(
                                                                   len
                                                                  ) [IdentifierDesignator]
                                                                ) [MethodCallHeader]
                                                                ActualParameters(
                                                                  SingleActualParameter(
                                                                    ActualParameter(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            DesignatorFactor(
                                                                              IdentifierDesignator(
                                                                               arr
                                                                              ) [IdentifierDesignator]
                                                                            ) [DesignatorFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ActualParameter]
                                                                  ) [SingleActualParameter]
                                                                ) [ActualParameters]
                                                              ) [MethodCall]
                                                            ) [MethodCallFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                    ) [ComplexConditionFact]
                                                  ) [SingleFactConditionTerm]
                                                ) [SingleTermCondition]
                                              ) [SingleCondition]
                                              SingleDesignatorStatement(
                                                IncrementDesignatorStatement(
                                                  IdentifierDesignator(
                                                   globalI
                                                  ) [IdentifierDesignator]
                                                ) [IncrementDesignatorStatement]
                                              ) [SingleDesignatorStatement]
                                            ) [ForStatementHeader]
                                            StatementBlock(
                                              MultipleStatements(
                                                NoStatements(
                                                ) [NoStatements]
                                                IfOptElseStatement(
                                                  IfStatementHeader(
                                                    IfStatementHeaderStart(
                                                    ) [IfStatementHeaderStart]
                                                    SingleTermCondition(
                                                      SingleFactConditionTerm(
                                                        ComplexConditionFact(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  ElementAccessDesignator(
                                                                    IdentifierDesignator(
                                                                     arr
                                                                    ) [IdentifierDesignator]
                                                                    ArrayIndexer(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            DesignatorFactor(
                                                                              IdentifierDesignator(
                                                                               globalI
                                                                              ) [IdentifierDesignator]
                                                                            ) [DesignatorFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                    ) [ArrayIndexer]
                                                                  ) [ElementAccessDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          EqOperator(
                                                          ) [EqOperator]
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                DesignatorFactor(
                                                                  IdentifierDesignator(
                                                                   elem
                                                                  ) [IdentifierDesignator]
                                                                ) [DesignatorFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                        ) [ComplexConditionFact]
                                                      ) [SingleFactConditionTerm]
                                                    ) [SingleTermCondition]
                                                  ) [IfStatementHeader]
                                                  StatementBlock(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        NoStatements(
                                                        ) [NoStatements]
                                                        DesignatorBasedStatement(
                                                          AssignmentDesignatorStatement(
                                                            AssignmentHeader(
                                                              IdentifierDesignator(
                                                               found
                                                              ) [IdentifierDesignator]
                                                            ) [AssignmentHeader]
                                                            AssignmentFooter(
                                                              AssignOperator(
                                                              ) [AssignOperator]
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    ConstantFactor(
                                                                      BoolConstantFactor(
                                                                       true
                                                                      ) [BoolConstantFactor]
                                                                    ) [ConstantFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                            ) [AssignmentFooter]
                                                          ) [AssignmentDesignatorStatement]
                                                        ) [DesignatorBasedStatement]
                                                      ) [MultipleStatements]
                                                      BreakStatement(
                                                      ) [BreakStatement]
                                                    ) [MultipleStatements]
                                                  ) [StatementBlock]
                                                  NoElseStatment(
                                                  ) [NoElseStatment]
                                                ) [IfOptElseStatement]
                                              ) [MultipleStatements]
                                            ) [StatementBlock]
                                          ) [ForStatement]
                                        ) [MultipleStatements]
                                        PrintStatement(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                ConstantFactor(
                                                  CharConstantFactor(
                                                   g
                                                  ) [CharConstantFactor]
                                                ) [ConstantFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          NoPrintWidth(
                                          ) [NoPrintWidth]
                                        ) [PrintStatement]
                                      ) [MultipleStatements]
                                      PrintStatement(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 l
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        NoPrintWidth(
                                        ) [NoPrintWidth]
                                      ) [PrintStatement]
                                    ) [MultipleStatements]
                                    PrintStatement(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               o
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      NoPrintWidth(
                                      ) [NoPrintWidth]
                                    ) [PrintStatement]
                                  ) [MultipleStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             b
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                           a
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        CharConstantFactor(
                                         l
                                        ) [CharConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                       I
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    CharConstantFactor(
                                      
                                    ) [CharConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                        PrintStatement(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  CharConstantFactor(
                                   =
                                  ) [CharConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          NoPrintWidth(
                          ) [NoPrintWidth]
                        ) [PrintStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                CharConstantFactor(
                                  
                                ) [CharConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            DesignatorFactor(
                              IdentifierDesignator(
                               globalI
                              ) [IdentifierDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             eol
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
                ReturnStatement(
                  ReturnValue(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             found
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [ReturnValue]
                ) [ReturnStatement]
              ) [MultipleStatements]
            ) [MethodDeclaration]
          ) [MultipleMethodDeclarations]
          MethodDeclaration(
            MethodHeader(
              ReturnType(
                Type(
                 bool
                ) [Type]
              ) [ReturnType]
             findElementForEach
            ) [MethodHeader]
            FormalParameters(
              MultipleFormalParameters(
                SingleFormalParameter(
                  FormalParameter(
                    Type(
                     int
                    ) [Type]
                   arr
                    ArrayBrackets(
                    ) [ArrayBrackets]
                  ) [FormalParameter]
                ) [SingleFormalParameter]
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 elem
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [FormalParameter]
              ) [MultipleFormalParameters]
            ) [FormalParameters]
            MultipleLocalVarDeclarations(
              MultipleLocalVarDeclarations(
                NoLocalVarDeclarations(
                ) [NoLocalVarDeclarations]
                LocalVarDeclaration(
                  Type(
                   int
                  ) [Type]
                  SingleLocalVariable(
                    LocalVariable(
                     it
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [LocalVariable]
                  ) [SingleLocalVariable]
                ) [LocalVarDeclaration]
              ) [MultipleLocalVarDeclarations]
              LocalVarDeclaration(
                Type(
                 bool
                ) [Type]
                SingleLocalVariable(
                  LocalVariable(
                   found
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
              ) [LocalVarDeclaration]
            ) [MultipleLocalVarDeclarations]
            MethodStatementListStart(
            ) [MethodStatementListStart]
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                NoStatements(
                                ) [NoStatements]
                                DesignatorBasedStatement(
                                  AssignmentDesignatorStatement(
                                    AssignmentHeader(
                                      IdentifierDesignator(
                                       found
                                      ) [IdentifierDesignator]
                                    ) [AssignmentHeader]
                                    AssignmentFooter(
                                      AssignOperator(
                                      ) [AssignOperator]
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              BoolConstantFactor(
                                               false
                                              ) [BoolConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                    ) [AssignmentFooter]
                                  ) [AssignmentDesignatorStatement]
                                ) [DesignatorBasedStatement]
                              ) [MultipleStatements]
                              ForEachStatement(
                                ForEachStatementHeader(
                                  ForEachStatementHeaderStart(
                                  ) [ForEachStatementHeaderStart]
                                 it
                                  IdentifierDesignator(
                                   arr
                                  ) [IdentifierDesignator]
                                ) [ForEachStatementHeader]
                                StatementBlock(
                                  MultipleStatements(
                                    NoStatements(
                                    ) [NoStatements]
                                    IfOptElseStatement(
                                      IfStatementHeader(
                                        IfStatementHeaderStart(
                                        ) [IfStatementHeaderStart]
                                        SingleTermCondition(
                                          SingleFactConditionTerm(
                                            ComplexConditionFact(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       it
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              EqOperator(
                                              ) [EqOperator]
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       elem
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ComplexConditionFact]
                                          ) [SingleFactConditionTerm]
                                        ) [SingleTermCondition]
                                      ) [IfStatementHeader]
                                      StatementBlock(
                                        MultipleStatements(
                                          MultipleStatements(
                                            NoStatements(
                                            ) [NoStatements]
                                            DesignatorBasedStatement(
                                              AssignmentDesignatorStatement(
                                                AssignmentHeader(
                                                  IdentifierDesignator(
                                                   found
                                                  ) [IdentifierDesignator]
                                                ) [AssignmentHeader]
                                                AssignmentFooter(
                                                  AssignOperator(
                                                  ) [AssignOperator]
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          BoolConstantFactor(
                                                           true
                                                          ) [BoolConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                ) [AssignmentFooter]
                                              ) [AssignmentDesignatorStatement]
                                            ) [DesignatorBasedStatement]
                                          ) [MultipleStatements]
                                          BreakStatement(
                                          ) [BreakStatement]
                                        ) [MultipleStatements]
                                      ) [StatementBlock]
                                      NoElseStatment(
                                      ) [NoElseStatment]
                                    ) [IfOptElseStatement]
                                  ) [MultipleStatements]
                                ) [StatementBlock]
                              ) [ForEachStatement]
                            ) [MultipleStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      CharConstantFactor(
                                       i
                                      ) [CharConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    CharConstantFactor(
                                     t
                                    ) [CharConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                        PrintStatement(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  CharConstantFactor(
                                    
                                  ) [CharConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          NoPrintWidth(
                          ) [NoPrintWidth]
                        ) [PrintStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                CharConstantFactor(
                                 =
                                ) [CharConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              CharConstantFactor(
                                
                              ) [CharConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          DesignatorFactor(
                            IdentifierDesignator(
                             it
                            ) [IdentifierDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
                PrintStatement(
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        DesignatorFactor(
                          IdentifierDesignator(
                           eol
                          ) [IdentifierDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                  NoPrintWidth(
                  ) [NoPrintWidth]
                ) [PrintStatement]
              ) [MultipleStatements]
              ReturnStatement(
                ReturnValue(
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        DesignatorFactor(
                          IdentifierDesignator(
                           found
                          ) [IdentifierDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                ) [ReturnValue]
              ) [ReturnStatement]
            ) [MultipleStatements]
          ) [MethodDeclaration]
        ) [MultipleMethodDeclarations]
        MethodDeclaration(
          MethodHeader(
            ReturnType(
              Type(
               int
              ) [Type]
            ) [ReturnType]
           countOddFor
          ) [MethodHeader]
          FormalParameters(
            SingleFormalParameter(
              FormalParameter(
                Type(
                 int
                ) [Type]
               arr
                ArrayBrackets(
                ) [ArrayBrackets]
              ) [FormalParameter]
            ) [SingleFormalParameter]
          ) [FormalParameters]
          MultipleLocalVarDeclarations(
            NoLocalVarDeclarations(
            ) [NoLocalVarDeclarations]
            LocalVarDeclaration(
              Type(
               int
              ) [Type]
              MultipleLocalVariables(
                SingleLocalVariable(
                  LocalVariable(
                   i
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
                LocalVariable(
                 count
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [MultipleLocalVariables]
            ) [LocalVarDeclaration]
          ) [MultipleLocalVarDeclarations]
          MethodStatementListStart(
          ) [MethodStatementListStart]
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                NoStatements(
                ) [NoStatements]
                DesignatorBasedStatement(
                  AssignmentDesignatorStatement(
                    AssignmentHeader(
                      IdentifierDesignator(
                       count
                      ) [IdentifierDesignator]
                    ) [AssignmentHeader]
                    AssignmentFooter(
                      AssignOperator(
                      ) [AssignOperator]
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              IntConstantFactor(
                               0
                              ) [IntConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                    ) [AssignmentFooter]
                  ) [AssignmentDesignatorStatement]
                ) [DesignatorBasedStatement]
              ) [MultipleStatements]
              ForStatement(
                ForStatementHeader(
                  ForStatementHeaderStart(
                  ) [ForStatementHeaderStart]
                  SingleDesignatorStatement(
                    AssignmentDesignatorStatement(
                      AssignmentHeader(
                        IdentifierDesignator(
                         i
                        ) [IdentifierDesignator]
                      ) [AssignmentHeader]
                      AssignmentFooter(
                        AssignOperator(
                        ) [AssignOperator]
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                IntConstantFactor(
                                 0
                                ) [IntConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                      ) [AssignmentFooter]
                    ) [AssignmentDesignatorStatement]
                  ) [SingleDesignatorStatement]
                  SingleCondition(
                    SingleTermCondition(
                      SingleFactConditionTerm(
                        ComplexConditionFact(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                DesignatorFactor(
                                  IdentifierDesignator(
                                   i
                                  ) [IdentifierDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          LssOperator(
                          ) [LssOperator]
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                MethodCallFactor(
                                  MethodCall(
                                    MethodCallHeader(
                                      IdentifierDesignator(
                                       len
                                      ) [IdentifierDesignator]
                                    ) [MethodCallHeader]
                                    ActualParameters(
                                      SingleActualParameter(
                                        ActualParameter(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   arr
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                        ) [ActualParameter]
                                      ) [SingleActualParameter]
                                    ) [ActualParameters]
                                  ) [MethodCall]
                                ) [MethodCallFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                        ) [ComplexConditionFact]
                      ) [SingleFactConditionTerm]
                    ) [SingleTermCondition]
                  ) [SingleCondition]
                  SingleDesignatorStatement(
                    IncrementDesignatorStatement(
                      IdentifierDesignator(
                       i
                      ) [IdentifierDesignator]
                    ) [IncrementDesignatorStatement]
                  ) [SingleDesignatorStatement]
                ) [ForStatementHeader]
                StatementBlock(
                  MultipleStatements(
                    MultipleStatements(
                      NoStatements(
                      ) [NoStatements]
                      IfOptElseStatement(
                        IfStatementHeader(
                          IfStatementHeaderStart(
                          ) [IfStatementHeaderStart]
                          SingleTermCondition(
                            SingleFactConditionTerm(
                              ComplexConditionFact(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    MultipleFactorsTerm(
                                      SingleFactorTerm(
                                        DesignatorFactor(
                                          ElementAccessDesignator(
                                            IdentifierDesignator(
                                             arr
                                            ) [IdentifierDesignator]
                                            ArrayIndexer(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    DesignatorFactor(
                                                      IdentifierDesignator(
                                                       i
                                                      ) [IdentifierDesignator]
                                                    ) [DesignatorFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                            ) [ArrayIndexer]
                                          ) [ElementAccessDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactorTerm]
                                      ModOperator(
                                      ) [ModOperator]
                                      ConstantFactor(
                                        IntConstantFactor(
                                         2
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [MultipleFactorsTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                EqOperator(
                                ) [EqOperator]
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      ConstantFactor(
                                        IntConstantFactor(
                                         0
                                        ) [IntConstantFactor]
                                      ) [ConstantFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                              ) [ComplexConditionFact]
                            ) [SingleFactConditionTerm]
                          ) [SingleTermCondition]
                        ) [IfStatementHeader]
                        ContinueStatement(
                        ) [ContinueStatement]
                        NoElseStatment(
                        ) [NoElseStatment]
                      ) [IfOptElseStatement]
                    ) [MultipleStatements]
                    DesignatorBasedStatement(
                      IncrementDesignatorStatement(
                        IdentifierDesignator(
                         count
                        ) [IdentifierDesignator]
                      ) [IncrementDesignatorStatement]
                    ) [DesignatorBasedStatement]
                  ) [MultipleStatements]
                ) [StatementBlock]
              ) [ForStatement]
            ) [MultipleStatements]
            ReturnStatement(
              ReturnValue(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      DesignatorFactor(
                        IdentifierDesignator(
                         count
                        ) [IdentifierDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
              ) [ReturnValue]
            ) [ReturnStatement]
          ) [MultipleStatements]
        ) [MethodDeclaration]
      ) [MultipleMethodDeclarations]
      MethodDeclaration(
        MethodHeader(
          ReturnType(
            Type(
             int
            ) [Type]
          ) [ReturnType]
         countOddForEach
        ) [MethodHeader]
        FormalParameters(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             arr
              ArrayBrackets(
              ) [ArrayBrackets]
            ) [FormalParameter]
          ) [SingleFormalParameter]
        ) [FormalParameters]
        MultipleLocalVarDeclarations(
          NoLocalVarDeclarations(
          ) [NoLocalVarDeclarations]
          LocalVarDeclaration(
            Type(
             int
            ) [Type]
            MultipleLocalVariables(
              SingleLocalVariable(
                LocalVariable(
                 it
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
              LocalVariable(
               count
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [MultipleLocalVariables]
          ) [LocalVarDeclaration]
        ) [MultipleLocalVarDeclarations]
        MethodStatementListStart(
        ) [MethodStatementListStart]
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              NoStatements(
              ) [NoStatements]
              DesignatorBasedStatement(
                AssignmentDesignatorStatement(
                  AssignmentHeader(
                    IdentifierDesignator(
                     count
                    ) [IdentifierDesignator]
                  ) [AssignmentHeader]
                  AssignmentFooter(
                    AssignOperator(
                    ) [AssignOperator]
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            IntConstantFactor(
                             0
                            ) [IntConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                  ) [AssignmentFooter]
                ) [AssignmentDesignatorStatement]
              ) [DesignatorBasedStatement]
            ) [MultipleStatements]
            ForEachStatement(
              ForEachStatementHeader(
                ForEachStatementHeaderStart(
                ) [ForEachStatementHeaderStart]
               it
                IdentifierDesignator(
                 arr
                ) [IdentifierDesignator]
              ) [ForEachStatementHeader]
              StatementBlock(
                MultipleStatements(
                  MultipleStatements(
                    NoStatements(
                    ) [NoStatements]
                    IfOptElseStatement(
                      IfStatementHeader(
                        IfStatementHeaderStart(
                        ) [IfStatementHeaderStart]
                        SingleTermCondition(
                          SingleFactConditionTerm(
                            ComplexConditionFact(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  MultipleFactorsTerm(
                                    SingleFactorTerm(
                                      DesignatorFactor(
                                        IdentifierDesignator(
                                         it
                                        ) [IdentifierDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactorTerm]
                                    ModOperator(
                                    ) [ModOperator]
                                    ConstantFactor(
                                      IntConstantFactor(
                                       2
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [MultipleFactorsTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              EqOperator(
                              ) [EqOperator]
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    ConstantFactor(
                                      IntConstantFactor(
                                       0
                                      ) [IntConstantFactor]
                                    ) [ConstantFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                            ) [ComplexConditionFact]
                          ) [SingleFactConditionTerm]
                        ) [SingleTermCondition]
                      ) [IfStatementHeader]
                      ContinueStatement(
                      ) [ContinueStatement]
                      NoElseStatment(
                      ) [NoElseStatment]
                    ) [IfOptElseStatement]
                  ) [MultipleStatements]
                  DesignatorBasedStatement(
                    IncrementDesignatorStatement(
                      IdentifierDesignator(
                       count
                      ) [IdentifierDesignator]
                    ) [IncrementDesignatorStatement]
                  ) [DesignatorBasedStatement]
                ) [MultipleStatements]
              ) [StatementBlock]
            ) [ForEachStatement]
          ) [MultipleStatements]
          ReturnStatement(
            ReturnValue(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    DesignatorFactor(
                      IdentifierDesignator(
                       count
                      ) [IdentifierDesignator]
                    ) [DesignatorFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
            ) [ReturnValue]
          ) [ReturnStatement]
        ) [MultipleStatements]
      ) [MethodDeclaration]
    ) [MultipleMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           int
          ) [Type]
          MultipleLocalVariables(
            MultipleLocalVariables(
              MultipleLocalVariables(
                SingleLocalVariable(
                  LocalVariable(
                   n
                    NoArrayBrackets(
                    ) [NoArrayBrackets]
                  ) [LocalVariable]
                ) [SingleLocalVariable]
                LocalVariable(
                 e
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [MultipleLocalVariables]
              LocalVariable(
               arr
                ArrayBrackets(
                ) [ArrayBrackets]
              ) [LocalVariable]
            ) [MultipleLocalVariables]
            LocalVariable(
             arrCopy
              ArrayBrackets(
              ) [ArrayBrackets]
            ) [LocalVariable]
          ) [MultipleLocalVariables]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            MultipleStatements(
              MultipleStatements(
                MultipleStatements(
                  MultipleStatements(
                    MultipleStatements(
                      MultipleStatements(
                        MultipleStatements(
                          MultipleStatements(
                            MultipleStatements(
                              MultipleStatements(
                                MultipleStatements(
                                  MultipleStatements(
                                    MultipleStatements(
                                      MultipleStatements(
                                        MultipleStatements(
                                          MultipleStatements(
                                            MultipleStatements(
                                              MultipleStatements(
                                                MultipleStatements(
                                                  MultipleStatements(
                                                    MultipleStatements(
                                                      MultipleStatements(
                                                        MultipleStatements(
                                                          MultipleStatements(
                                                            MultipleStatements(
                                                              MultipleStatements(
                                                                MultipleStatements(
                                                                  MultipleStatements(
                                                                    MultipleStatements(
                                                                      MultipleStatements(
                                                                        MultipleStatements(
                                                                          MultipleStatements(
                                                                            MultipleStatements(
                                                                              MultipleStatements(
                                                                                MultipleStatements(
                                                                                  MultipleStatements(
                                                                                    MultipleStatements(
                                                                                      MultipleStatements(
                                                                                        MultipleStatements(
                                                                                          MultipleStatements(
                                                                                            MultipleStatements(
                                                                                              MultipleStatements(
                                                                                                MultipleStatements(
                                                                                                  MultipleStatements(
                                                                                                    MultipleStatements(
                                                                                                      MultipleStatements(
                                                                                                        MultipleStatements(
                                                                                                          MultipleStatements(
                                                                                                            MultipleStatements(
                                                                                                              MultipleStatements(
                                                                                                                MultipleStatements(
                                                                                                                  MultipleStatements(
                                                                                                                    MultipleStatements(
                                                                                                                      MultipleStatements(
                                                                                                                        MultipleStatements(
                                                                                                                          MultipleStatements(
                                                                                                                            MultipleStatements(
                                                                                                                              MultipleStatements(
                                                                                                                                MultipleStatements(
                                                                                                                                  MultipleStatements(
                                                                                                                                    MultipleStatements(
                                                                                                                                      MultipleStatements(
                                                                                                                                        MultipleStatements(
                                                                                                                                          MultipleStatements(
                                                                                                                                            MultipleStatements(
                                                                                                                                              MultipleStatements(
                                                                                                                                                MultipleStatements(
                                                                                                                                                  MultipleStatements(
                                                                                                                                                    MultipleStatements(
                                                                                                                                                      MultipleStatements(
                                                                                                                                                        MultipleStatements(
                                                                                                                                                          MultipleStatements(
                                                                                                                                                            MultipleStatements(
                                                                                                                                                              MultipleStatements(
                                                                                                                                                                MultipleStatements(
                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                        MultipleStatements(
                                                                                                                                                                          MultipleStatements(
                                                                                                                                                                            MultipleStatements(
                                                                                                                                                                              MultipleStatements(
                                                                                                                                                                                MultipleStatements(
                                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                                        MultipleStatements(
                                                                                                                                                                                          MultipleStatements(
                                                                                                                                                                                            MultipleStatements(
                                                                                                                                                                                              MultipleStatements(
                                                                                                                                                                                                MultipleStatements(
                                                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                                                        NoStatements(
                                                                                                                                                                                                        ) [NoStatements]
                                                                                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                                                                                          MethodCallDesignatorStatement(
                                                                                                                                                                                                            MethodCall(
                                                                                                                                                                                                              MethodCallHeader(
                                                                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                                                                 iftest
                                                                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                                                                              ) [MethodCallHeader]
                                                                                                                                                                                                              NoActualParameters(
                                                                                                                                                                                                              ) [NoActualParameters]
                                                                                                                                                                                                            ) [MethodCall]
                                                                                                                                                                                                          ) [MethodCallDesignatorStatement]
                                                                                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                                                      PrintStatement(
                                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                                            NoSign(
                                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                                                CharConstantFactor(
                                                                                                                                                                                                                 s
                                                                                                                                                                                                                ) [CharConstantFactor]
                                                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                                        NoPrintWidth(
                                                                                                                                                                                                        ) [NoPrintWidth]
                                                                                                                                                                                                      ) [PrintStatement]
                                                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                                                    PrintStatement(
                                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                                          NoSign(
                                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                                            ConstantFactor(
                                                                                                                                                                                                              CharConstantFactor(
                                                                                                                                                                                                               w
                                                                                                                                                                                                              ) [CharConstantFactor]
                                                                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                                      NoPrintWidth(
                                                                                                                                                                                                      ) [NoPrintWidth]
                                                                                                                                                                                                    ) [PrintStatement]
                                                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                                                  PrintStatement(
                                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                                        NoSign(
                                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                                                            CharConstantFactor(
                                                                                                                                                                                                             i
                                                                                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                                    NoPrintWidth(
                                                                                                                                                                                                    ) [NoPrintWidth]
                                                                                                                                                                                                  ) [PrintStatement]
                                                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                                                PrintStatement(
                                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                                      NoSign(
                                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                                          CharConstantFactor(
                                                                                                                                                                                                           t
                                                                                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                                  NoPrintWidth(
                                                                                                                                                                                                  ) [NoPrintWidth]
                                                                                                                                                                                                ) [PrintStatement]
                                                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                                                              PrintStatement(
                                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                                    NoSign(
                                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                                        CharConstantFactor(
                                                                                                                                                                                                         c
                                                                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                                NoPrintWidth(
                                                                                                                                                                                                ) [NoPrintWidth]
                                                                                                                                                                                              ) [PrintStatement]
                                                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                                                            PrintStatement(
                                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                                  NoSign(
                                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                                      CharConstantFactor(
                                                                                                                                                                                                       h
                                                                                                                                                                                                      ) [CharConstantFactor]
                                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                                              NoPrintWidth(
                                                                                                                                                                                              ) [NoPrintWidth]
                                                                                                                                                                                            ) [PrintStatement]
                                                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                                                          PrintStatement(
                                                                                                                                                                                            LeftExpression(
                                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                                NoSign(
                                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                                    CharConstantFactor(
                                                                                                                                                                                                      
                                                                                                                                                                                                    ) [CharConstantFactor]
                                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                                            NoPrintWidth(
                                                                                                                                                                                            ) [NoPrintWidth]
                                                                                                                                                                                          ) [PrintStatement]
                                                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                                                        PrintStatement(
                                                                                                                                                                                          LeftExpression(
                                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                                              NoSign(
                                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                                ConstantFactor(
                                                                                                                                                                                                  CharConstantFactor(
                                                                                                                                                                                                   =
                                                                                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                                          NoPrintWidth(
                                                                                                                                                                                          ) [NoPrintWidth]
                                                                                                                                                                                        ) [PrintStatement]
                                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                                      PrintStatement(
                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                            NoSign(
                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                                CharConstantFactor(
                                                                                                                                                                                                  
                                                                                                                                                                                                ) [CharConstantFactor]
                                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                        NoPrintWidth(
                                                                                                                                                                                        ) [NoPrintWidth]
                                                                                                                                                                                      ) [PrintStatement]
                                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                                    ReadStatement(
                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                       n
                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                    ) [ReadStatement]
                                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                                                    MethodCallDesignatorStatement(
                                                                                                                                                                                      MethodCall(
                                                                                                                                                                                        MethodCallHeader(
                                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                                           conditionalPrint
                                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                                        ) [MethodCallHeader]
                                                                                                                                                                                        ActualParameters(
                                                                                                                                                                                          SingleActualParameter(
                                                                                                                                                                                            ActualParameter(
                                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                                  NoSign(
                                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                                    DesignatorFactor(
                                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                                       n
                                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                                    ) [DesignatorFactor]
                                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                                            ) [ActualParameter]
                                                                                                                                                                                          ) [SingleActualParameter]
                                                                                                                                                                                        ) [ActualParameters]
                                                                                                                                                                                      ) [MethodCall]
                                                                                                                                                                                    ) [MethodCallDesignatorStatement]
                                                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                                PrintStatement(
                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                      NoSign(
                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                          CharConstantFactor(
                                                                                                                                                                                           n
                                                                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                  NoPrintWidth(
                                                                                                                                                                                  ) [NoPrintWidth]
                                                                                                                                                                                ) [PrintStatement]
                                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                                              PrintStatement(
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                        CharConstantFactor(
                                                                                                                                                                                          
                                                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                NoPrintWidth(
                                                                                                                                                                                ) [NoPrintWidth]
                                                                                                                                                                              ) [PrintStatement]
                                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                                            PrintStatement(
                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                  NoSign(
                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                    ConstantFactor(
                                                                                                                                                                                      CharConstantFactor(
                                                                                                                                                                                       =
                                                                                                                                                                                      ) [CharConstantFactor]
                                                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                              NoPrintWidth(
                                                                                                                                                                              ) [NoPrintWidth]
                                                                                                                                                                            ) [PrintStatement]
                                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                                          PrintStatement(
                                                                                                                                                                            LeftExpression(
                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                NoSign(
                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                    CharConstantFactor(
                                                                                                                                                                                      
                                                                                                                                                                                    ) [CharConstantFactor]
                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                            NoPrintWidth(
                                                                                                                                                                            ) [NoPrintWidth]
                                                                                                                                                                          ) [PrintStatement]
                                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                                        ReadStatement(
                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                           n
                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                        ) [ReadStatement]
                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                      IfOptElseStatement(
                                                                                                                                                                        IfStatementHeader(
                                                                                                                                                                          IfStatementHeaderStart(
                                                                                                                                                                          ) [IfStatementHeaderStart]
                                                                                                                                                                          SingleTermCondition(
                                                                                                                                                                            SingleFactConditionTerm(
                                                                                                                                                                              ComplexConditionFact(
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      DesignatorFactor(
                                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                                         n
                                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                                      ) [DesignatorFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                LeqOperator(
                                                                                                                                                                                ) [LeqOperator]
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                        IntConstantFactor(
                                                                                                                                                                                         0
                                                                                                                                                                                        ) [IntConstantFactor]
                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                              ) [ComplexConditionFact]
                                                                                                                                                                            ) [SingleFactConditionTerm]
                                                                                                                                                                          ) [SingleTermCondition]
                                                                                                                                                                        ) [IfStatementHeader]
                                                                                                                                                                        StatementBlock(
                                                                                                                                                                          MultipleStatements(
                                                                                                                                                                            MultipleStatements(
                                                                                                                                                                              MultipleStatements(
                                                                                                                                                                                MultipleStatements(
                                                                                                                                                                                  MultipleStatements(
                                                                                                                                                                                    MultipleStatements(
                                                                                                                                                                                      MultipleStatements(
                                                                                                                                                                                        NoStatements(
                                                                                                                                                                                        ) [NoStatements]
                                                                                                                                                                                        PrintStatement(
                                                                                                                                                                                          LeftExpression(
                                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                                              NoSign(
                                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                                ConstantFactor(
                                                                                                                                                                                                  CharConstantFactor(
                                                                                                                                                                                                   B
                                                                                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                                                                                ) [ConstantFactor]
                                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                                          NoPrintWidth(
                                                                                                                                                                                          ) [NoPrintWidth]
                                                                                                                                                                                        ) [PrintStatement]
                                                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                                                      PrintStatement(
                                                                                                                                                                                        LeftExpression(
                                                                                                                                                                                          SingleTermExpression(
                                                                                                                                                                                            NoSign(
                                                                                                                                                                                            ) [NoSign]
                                                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                                                              ConstantFactor(
                                                                                                                                                                                                CharConstantFactor(
                                                                                                                                                                                                 a
                                                                                                                                                                                                ) [CharConstantFactor]
                                                                                                                                                                                              ) [ConstantFactor]
                                                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                                                        NoPrintWidth(
                                                                                                                                                                                        ) [NoPrintWidth]
                                                                                                                                                                                      ) [PrintStatement]
                                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                                    PrintStatement(
                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                          NoSign(
                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                            ConstantFactor(
                                                                                                                                                                                              CharConstantFactor(
                                                                                                                                                                                               d
                                                                                                                                                                                              ) [CharConstantFactor]
                                                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                      NoPrintWidth(
                                                                                                                                                                                      ) [NoPrintWidth]
                                                                                                                                                                                    ) [PrintStatement]
                                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                                  PrintStatement(
                                                                                                                                                                                    LeftExpression(
                                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                                        NoSign(
                                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                                            CharConstantFactor(
                                                                                                                                                                                              
                                                                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                                    NoPrintWidth(
                                                                                                                                                                                    ) [NoPrintWidth]
                                                                                                                                                                                  ) [PrintStatement]
                                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                                PrintStatement(
                                                                                                                                                                                  LeftExpression(
                                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                                      NoSign(
                                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                                          CharConstantFactor(
                                                                                                                                                                                           n
                                                                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                                  NoPrintWidth(
                                                                                                                                                                                  ) [NoPrintWidth]
                                                                                                                                                                                ) [PrintStatement]
                                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                                              PrintStatement(
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      ConstantFactor(
                                                                                                                                                                                        CharConstantFactor(
                                                                                                                                                                                         !
                                                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                                NoPrintWidth(
                                                                                                                                                                                ) [NoPrintWidth]
                                                                                                                                                                              ) [PrintStatement]
                                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                                            ReturnStatement(
                                                                                                                                                                              NoReturnValue(
                                                                                                                                                                              ) [NoReturnValue]
                                                                                                                                                                            ) [ReturnStatement]
                                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                                        ) [StatementBlock]
                                                                                                                                                                        NoElseStatment(
                                                                                                                                                                        ) [NoElseStatment]
                                                                                                                                                                      ) [IfOptElseStatement]
                                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                                    DesignatorBasedStatement(
                                                                                                                                                                      AssignmentDesignatorStatement(
                                                                                                                                                                        AssignmentHeader(
                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                           arr
                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                        ) [AssignmentHeader]
                                                                                                                                                                        AssignmentFooter(
                                                                                                                                                                          AssignOperator(
                                                                                                                                                                          ) [AssignOperator]
                                                                                                                                                                          LeftExpression(
                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                              NoSign(
                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                AllocatorFactor(
                                                                                                                                                                                  Type(
                                                                                                                                                                                   int
                                                                                                                                                                                  ) [Type]
                                                                                                                                                                                  SingleArrayIndexer(
                                                                                                                                                                                    ArrayIndexer(
                                                                                                                                                                                      LeftExpression(
                                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                                          NoSign(
                                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                                            DesignatorFactor(
                                                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                                                               n
                                                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                                                            ) [DesignatorFactor]
                                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                                    ) [ArrayIndexer]
                                                                                                                                                                                  ) [SingleArrayIndexer]
                                                                                                                                                                                ) [AllocatorFactor]
                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                                        ) [AssignmentFooter]
                                                                                                                                                                      ) [AssignmentDesignatorStatement]
                                                                                                                                                                    ) [DesignatorBasedStatement]
                                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                                  DesignatorBasedStatement(
                                                                                                                                                                    MethodCallDesignatorStatement(
                                                                                                                                                                      MethodCall(
                                                                                                                                                                        MethodCallHeader(
                                                                                                                                                                          IdentifierDesignator(
                                                                                                                                                                           readArray
                                                                                                                                                                          ) [IdentifierDesignator]
                                                                                                                                                                        ) [MethodCallHeader]
                                                                                                                                                                        ActualParameters(
                                                                                                                                                                          SingleActualParameter(
                                                                                                                                                                            ActualParameter(
                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                  NoSign(
                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                    DesignatorFactor(
                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                       arr
                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                    ) [DesignatorFactor]
                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                            ) [ActualParameter]
                                                                                                                                                                          ) [SingleActualParameter]
                                                                                                                                                                        ) [ActualParameters]
                                                                                                                                                                      ) [MethodCall]
                                                                                                                                                                    ) [MethodCallDesignatorStatement]
                                                                                                                                                                  ) [DesignatorBasedStatement]
                                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                                  MethodCallDesignatorStatement(
                                                                                                                                                                    MethodCall(
                                                                                                                                                                      MethodCallHeader(
                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                         printArray
                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                      ) [MethodCallHeader]
                                                                                                                                                                      ActualParameters(
                                                                                                                                                                        MultipleActualParameters(
                                                                                                                                                                          SingleActualParameter(
                                                                                                                                                                            ActualParameter(
                                                                                                                                                                              LeftExpression(
                                                                                                                                                                                SingleTermExpression(
                                                                                                                                                                                  NoSign(
                                                                                                                                                                                  ) [NoSign]
                                                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                                                    DesignatorFactor(
                                                                                                                                                                                      IdentifierDesignator(
                                                                                                                                                                                       arr
                                                                                                                                                                                      ) [IdentifierDesignator]
                                                                                                                                                                                    ) [DesignatorFactor]
                                                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                                                              ) [LeftExpression]
                                                                                                                                                                            ) [ActualParameter]
                                                                                                                                                                          ) [SingleActualParameter]
                                                                                                                                                                          ActualParameter(
                                                                                                                                                                            LeftExpression(
                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                NoSign(
                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                    BoolConstantFactor(
                                                                                                                                                                                     false
                                                                                                                                                                                    ) [BoolConstantFactor]
                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                          ) [ActualParameter]
                                                                                                                                                                        ) [MultipleActualParameters]
                                                                                                                                                                      ) [ActualParameters]
                                                                                                                                                                    ) [MethodCall]
                                                                                                                                                                  ) [MethodCallDesignatorStatement]
                                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                              DesignatorBasedStatement(
                                                                                                                                                                AssignmentDesignatorStatement(
                                                                                                                                                                  AssignmentHeader(
                                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                                     arrCopy
                                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                                  ) [AssignmentHeader]
                                                                                                                                                                  AssignmentFooter(
                                                                                                                                                                    AssignOperator(
                                                                                                                                                                    ) [AssignOperator]
                                                                                                                                                                    LeftExpression(
                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                        NoSign(
                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                          AllocatorFactor(
                                                                                                                                                                            Type(
                                                                                                                                                                             int
                                                                                                                                                                            ) [Type]
                                                                                                                                                                            SingleArrayIndexer(
                                                                                                                                                                              ArrayIndexer(
                                                                                                                                                                                LeftExpression(
                                                                                                                                                                                  SingleTermExpression(
                                                                                                                                                                                    NoSign(
                                                                                                                                                                                    ) [NoSign]
                                                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                                                      DesignatorFactor(
                                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                                         n
                                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                                      ) [DesignatorFactor]
                                                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                                                ) [LeftExpression]
                                                                                                                                                                              ) [ArrayIndexer]
                                                                                                                                                                            ) [SingleArrayIndexer]
                                                                                                                                                                          ) [AllocatorFactor]
                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                  ) [AssignmentFooter]
                                                                                                                                                                ) [AssignmentDesignatorStatement]
                                                                                                                                                              ) [DesignatorBasedStatement]
                                                                                                                                                            ) [MultipleStatements]
                                                                                                                                                            DesignatorBasedStatement(
                                                                                                                                                              AssignmentDesignatorStatement(
                                                                                                                                                                AssignmentHeader(
                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                   globalI
                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                ) [AssignmentHeader]
                                                                                                                                                                AssignmentFooter(
                                                                                                                                                                  AssignOperator(
                                                                                                                                                                  ) [AssignOperator]
                                                                                                                                                                  LeftExpression(
                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                      MinusSign(
                                                                                                                                                                      ) [MinusSign]
                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                          IntConstantFactor(
                                                                                                                                                                           1
                                                                                                                                                                          ) [IntConstantFactor]
                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                ) [AssignmentFooter]
                                                                                                                                                              ) [AssignmentDesignatorStatement]
                                                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                                                          ) [MultipleStatements]
                                                                                                                                                          ForEachStatement(
                                                                                                                                                            ForEachStatementHeader(
                                                                                                                                                              ForEachStatementHeaderStart(
                                                                                                                                                              ) [ForEachStatementHeaderStart]
                                                                                                                                                             globalIt
                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                               arr
                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                            ) [ForEachStatementHeader]
                                                                                                                                                            StatementBlock(
                                                                                                                                                              MultipleStatements(
                                                                                                                                                                NoStatements(
                                                                                                                                                                ) [NoStatements]
                                                                                                                                                                DesignatorBasedStatement(
                                                                                                                                                                  AssignmentDesignatorStatement(
                                                                                                                                                                    AssignmentHeader(
                                                                                                                                                                      ElementAccessDesignator(
                                                                                                                                                                        IdentifierDesignator(
                                                                                                                                                                         arrCopy
                                                                                                                                                                        ) [IdentifierDesignator]
                                                                                                                                                                        ArrayIndexer(
                                                                                                                                                                          AssignmentExpression(
                                                                                                                                                                            SingleTermExpression(
                                                                                                                                                                              NoSign(
                                                                                                                                                                              ) [NoSign]
                                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                                DesignatorFactor(
                                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                                   globalI
                                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                                ) [DesignatorFactor]
                                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                                            RightAddOperator(
                                                                                                                                                                              AddAssignOperator(
                                                                                                                                                                              ) [AddAssignOperator]
                                                                                                                                                                            ) [RightAddOperator]
                                                                                                                                                                            LeftExpression(
                                                                                                                                                                              SingleTermExpression(
                                                                                                                                                                                NoSign(
                                                                                                                                                                                ) [NoSign]
                                                                                                                                                                                SingleFactorTerm(
                                                                                                                                                                                  ConstantFactor(
                                                                                                                                                                                    IntConstantFactor(
                                                                                                                                                                                     1
                                                                                                                                                                                    ) [IntConstantFactor]
                                                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                                                            ) [LeftExpression]
                                                                                                                                                                          ) [AssignmentExpression]
                                                                                                                                                                        ) [ArrayIndexer]
                                                                                                                                                                      ) [ElementAccessDesignator]
                                                                                                                                                                    ) [AssignmentHeader]
                                                                                                                                                                    AssignmentFooter(
                                                                                                                                                                      AssignOperator(
                                                                                                                                                                      ) [AssignOperator]
                                                                                                                                                                      LeftExpression(
                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                          NoSign(
                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                            DesignatorFactor(
                                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                                               globalIt
                                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                                            ) [DesignatorFactor]
                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                    ) [AssignmentFooter]
                                                                                                                                                                  ) [AssignmentDesignatorStatement]
                                                                                                                                                                ) [DesignatorBasedStatement]
                                                                                                                                                              ) [MultipleStatements]
                                                                                                                                                            ) [StatementBlock]
                                                                                                                                                          ) [ForEachStatement]
                                                                                                                                                        ) [MultipleStatements]
                                                                                                                                                        DesignatorBasedStatement(
                                                                                                                                                          MethodCallDesignatorStatement(
                                                                                                                                                            MethodCall(
                                                                                                                                                              MethodCallHeader(
                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                 sortArray
                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                              ) [MethodCallHeader]
                                                                                                                                                              ActualParameters(
                                                                                                                                                                MultipleActualParameters(
                                                                                                                                                                  SingleActualParameter(
                                                                                                                                                                    ActualParameter(
                                                                                                                                                                      LeftExpression(
                                                                                                                                                                        SingleTermExpression(
                                                                                                                                                                          NoSign(
                                                                                                                                                                          ) [NoSign]
                                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                                            DesignatorFactor(
                                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                                               arr
                                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                                            ) [DesignatorFactor]
                                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                                    ) [ActualParameter]
                                                                                                                                                                  ) [SingleActualParameter]
                                                                                                                                                                  ActualParameter(
                                                                                                                                                                    LeftExpression(
                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                        NoSign(
                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                          ConstantFactor(
                                                                                                                                                                            BoolConstantFactor(
                                                                                                                                                                             true
                                                                                                                                                                            ) [BoolConstantFactor]
                                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                  ) [ActualParameter]
                                                                                                                                                                ) [MultipleActualParameters]
                                                                                                                                                              ) [ActualParameters]
                                                                                                                                                            ) [MethodCall]
                                                                                                                                                          ) [MethodCallDesignatorStatement]
                                                                                                                                                        ) [DesignatorBasedStatement]
                                                                                                                                                      ) [MultipleStatements]
                                                                                                                                                      DesignatorBasedStatement(
                                                                                                                                                        MethodCallDesignatorStatement(
                                                                                                                                                          MethodCall(
                                                                                                                                                            MethodCallHeader(
                                                                                                                                                              IdentifierDesignator(
                                                                                                                                                               printArray
                                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                                            ) [MethodCallHeader]
                                                                                                                                                            ActualParameters(
                                                                                                                                                              MultipleActualParameters(
                                                                                                                                                                SingleActualParameter(
                                                                                                                                                                  ActualParameter(
                                                                                                                                                                    LeftExpression(
                                                                                                                                                                      SingleTermExpression(
                                                                                                                                                                        NoSign(
                                                                                                                                                                        ) [NoSign]
                                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                                          DesignatorFactor(
                                                                                                                                                                            IdentifierDesignator(
                                                                                                                                                                             arr
                                                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                                                          ) [DesignatorFactor]
                                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                                  ) [ActualParameter]
                                                                                                                                                                ) [SingleActualParameter]
                                                                                                                                                                ActualParameter(
                                                                                                                                                                  LeftExpression(
                                                                                                                                                                    SingleTermExpression(
                                                                                                                                                                      NoSign(
                                                                                                                                                                      ) [NoSign]
                                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                                        ConstantFactor(
                                                                                                                                                                          BoolConstantFactor(
                                                                                                                                                                           true
                                                                                                                                                                          ) [BoolConstantFactor]
                                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                                ) [ActualParameter]
                                                                                                                                                              ) [MultipleActualParameters]
                                                                                                                                                            ) [ActualParameters]
                                                                                                                                                          ) [MethodCall]
                                                                                                                                                        ) [MethodCallDesignatorStatement]
                                                                                                                                                      ) [DesignatorBasedStatement]
                                                                                                                                                    ) [MultipleStatements]
                                                                                                                                                    PrintStatement(
                                                                                                                                                      LeftExpression(
                                                                                                                                                        SingleTermExpression(
                                                                                                                                                          NoSign(
                                                                                                                                                          ) [NoSign]
                                                                                                                                                          SingleFactorTerm(
                                                                                                                                                            ConstantFactor(
                                                                                                                                                              CharConstantFactor(
                                                                                                                                                               c
                                                                                                                                                              ) [CharConstantFactor]
                                                                                                                                                            ) [ConstantFactor]
                                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                                      ) [LeftExpression]
                                                                                                                                                      NoPrintWidth(
                                                                                                                                                      ) [NoPrintWidth]
                                                                                                                                                    ) [PrintStatement]
                                                                                                                                                  ) [MultipleStatements]
                                                                                                                                                  PrintStatement(
                                                                                                                                                    LeftExpression(
                                                                                                                                                      SingleTermExpression(
                                                                                                                                                        NoSign(
                                                                                                                                                        ) [NoSign]
                                                                                                                                                        SingleFactorTerm(
                                                                                                                                                          ConstantFactor(
                                                                                                                                                            CharConstantFactor(
                                                                                                                                                             o
                                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                                          ) [ConstantFactor]
                                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                                    ) [LeftExpression]
                                                                                                                                                    NoPrintWidth(
                                                                                                                                                    ) [NoPrintWidth]
                                                                                                                                                  ) [PrintStatement]
                                                                                                                                                ) [MultipleStatements]
                                                                                                                                                PrintStatement(
                                                                                                                                                  LeftExpression(
                                                                                                                                                    SingleTermExpression(
                                                                                                                                                      NoSign(
                                                                                                                                                      ) [NoSign]
                                                                                                                                                      SingleFactorTerm(
                                                                                                                                                        ConstantFactor(
                                                                                                                                                          CharConstantFactor(
                                                                                                                                                           m
                                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                                        ) [ConstantFactor]
                                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                                  ) [LeftExpression]
                                                                                                                                                  NoPrintWidth(
                                                                                                                                                  ) [NoPrintWidth]
                                                                                                                                                ) [PrintStatement]
                                                                                                                                              ) [MultipleStatements]
                                                                                                                                              PrintStatement(
                                                                                                                                                LeftExpression(
                                                                                                                                                  SingleTermExpression(
                                                                                                                                                    NoSign(
                                                                                                                                                    ) [NoSign]
                                                                                                                                                    SingleFactorTerm(
                                                                                                                                                      ConstantFactor(
                                                                                                                                                        CharConstantFactor(
                                                                                                                                                         p
                                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                                      ) [ConstantFactor]
                                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                                ) [LeftExpression]
                                                                                                                                                NoPrintWidth(
                                                                                                                                                ) [NoPrintWidth]
                                                                                                                                              ) [PrintStatement]
                                                                                                                                            ) [MultipleStatements]
                                                                                                                                            PrintStatement(
                                                                                                                                              LeftExpression(
                                                                                                                                                SingleTermExpression(
                                                                                                                                                  NoSign(
                                                                                                                                                  ) [NoSign]
                                                                                                                                                  SingleFactorTerm(
                                                                                                                                                    ConstantFactor(
                                                                                                                                                      CharConstantFactor(
                                                                                                                                                       a
                                                                                                                                                      ) [CharConstantFactor]
                                                                                                                                                    ) [ConstantFactor]
                                                                                                                                                  ) [SingleFactorTerm]
                                                                                                                                                ) [SingleTermExpression]
                                                                                                                                              ) [LeftExpression]
                                                                                                                                              NoPrintWidth(
                                                                                                                                              ) [NoPrintWidth]
                                                                                                                                            ) [PrintStatement]
                                                                                                                                          ) [MultipleStatements]
                                                                                                                                          PrintStatement(
                                                                                                                                            LeftExpression(
                                                                                                                                              SingleTermExpression(
                                                                                                                                                NoSign(
                                                                                                                                                ) [NoSign]
                                                                                                                                                SingleFactorTerm(
                                                                                                                                                  ConstantFactor(
                                                                                                                                                    CharConstantFactor(
                                                                                                                                                     r
                                                                                                                                                    ) [CharConstantFactor]
                                                                                                                                                  ) [ConstantFactor]
                                                                                                                                                ) [SingleFactorTerm]
                                                                                                                                              ) [SingleTermExpression]
                                                                                                                                            ) [LeftExpression]
                                                                                                                                            NoPrintWidth(
                                                                                                                                            ) [NoPrintWidth]
                                                                                                                                          ) [PrintStatement]
                                                                                                                                        ) [MultipleStatements]
                                                                                                                                        PrintStatement(
                                                                                                                                          LeftExpression(
                                                                                                                                            SingleTermExpression(
                                                                                                                                              NoSign(
                                                                                                                                              ) [NoSign]
                                                                                                                                              SingleFactorTerm(
                                                                                                                                                ConstantFactor(
                                                                                                                                                  CharConstantFactor(
                                                                                                                                                   e
                                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                                ) [ConstantFactor]
                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                          ) [LeftExpression]
                                                                                                                                          NoPrintWidth(
                                                                                                                                          ) [NoPrintWidth]
                                                                                                                                        ) [PrintStatement]
                                                                                                                                      ) [MultipleStatements]
                                                                                                                                      PrintStatement(
                                                                                                                                        LeftExpression(
                                                                                                                                          SingleTermExpression(
                                                                                                                                            NoSign(
                                                                                                                                            ) [NoSign]
                                                                                                                                            SingleFactorTerm(
                                                                                                                                              DesignatorFactor(
                                                                                                                                                IdentifierDesignator(
                                                                                                                                                 eol
                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                              ) [DesignatorFactor]
                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                        ) [LeftExpression]
                                                                                                                                        NoPrintWidth(
                                                                                                                                        ) [NoPrintWidth]
                                                                                                                                      ) [PrintStatement]
                                                                                                                                    ) [MultipleStatements]
                                                                                                                                    PrintStatement(
                                                                                                                                      LeftExpression(
                                                                                                                                        SingleTermExpression(
                                                                                                                                          NoSign(
                                                                                                                                          ) [NoSign]
                                                                                                                                          SingleFactorTerm(
                                                                                                                                            ConstantFactor(
                                                                                                                                              CharConstantFactor(
                                                                                                                                               f
                                                                                                                                              ) [CharConstantFactor]
                                                                                                                                            ) [ConstantFactor]
                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                      ) [LeftExpression]
                                                                                                                                      NoPrintWidth(
                                                                                                                                      ) [NoPrintWidth]
                                                                                                                                    ) [PrintStatement]
                                                                                                                                  ) [MultipleStatements]
                                                                                                                                  PrintStatement(
                                                                                                                                    LeftExpression(
                                                                                                                                      SingleTermExpression(
                                                                                                                                        NoSign(
                                                                                                                                        ) [NoSign]
                                                                                                                                        SingleFactorTerm(
                                                                                                                                          ConstantFactor(
                                                                                                                                            CharConstantFactor(
                                                                                                                                             o
                                                                                                                                            ) [CharConstantFactor]
                                                                                                                                          ) [ConstantFactor]
                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                    ) [LeftExpression]
                                                                                                                                    NoPrintWidth(
                                                                                                                                    ) [NoPrintWidth]
                                                                                                                                  ) [PrintStatement]
                                                                                                                                ) [MultipleStatements]
                                                                                                                                PrintStatement(
                                                                                                                                  LeftExpression(
                                                                                                                                    SingleTermExpression(
                                                                                                                                      NoSign(
                                                                                                                                      ) [NoSign]
                                                                                                                                      SingleFactorTerm(
                                                                                                                                        ConstantFactor(
                                                                                                                                          CharConstantFactor(
                                                                                                                                           r
                                                                                                                                          ) [CharConstantFactor]
                                                                                                                                        ) [ConstantFactor]
                                                                                                                                      ) [SingleFactorTerm]
                                                                                                                                    ) [SingleTermExpression]
                                                                                                                                  ) [LeftExpression]
                                                                                                                                  NoPrintWidth(
                                                                                                                                  ) [NoPrintWidth]
                                                                                                                                ) [PrintStatement]
                                                                                                                              ) [MultipleStatements]
                                                                                                                              PrintStatement(
                                                                                                                                LeftExpression(
                                                                                                                                  SingleTermExpression(
                                                                                                                                    NoSign(
                                                                                                                                    ) [NoSign]
                                                                                                                                    SingleFactorTerm(
                                                                                                                                      ConstantFactor(
                                                                                                                                        CharConstantFactor(
                                                                                                                                          
                                                                                                                                        ) [CharConstantFactor]
                                                                                                                                      ) [ConstantFactor]
                                                                                                                                    ) [SingleFactorTerm]
                                                                                                                                  ) [SingleTermExpression]
                                                                                                                                ) [LeftExpression]
                                                                                                                                NoPrintWidth(
                                                                                                                                ) [NoPrintWidth]
                                                                                                                              ) [PrintStatement]
                                                                                                                            ) [MultipleStatements]
                                                                                                                            DesignatorBasedStatement(
                                                                                                                              MethodCallDesignatorStatement(
                                                                                                                                MethodCall(
                                                                                                                                  MethodCallHeader(
                                                                                                                                    IdentifierDesignator(
                                                                                                                                     printBool
                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                  ) [MethodCallHeader]
                                                                                                                                  ActualParameters(
                                                                                                                                    SingleActualParameter(
                                                                                                                                      ActualParameter(
                                                                                                                                        LeftExpression(
                                                                                                                                          SingleTermExpression(
                                                                                                                                            NoSign(
                                                                                                                                            ) [NoSign]
                                                                                                                                            SingleFactorTerm(
                                                                                                                                              MethodCallFactor(
                                                                                                                                                MethodCall(
                                                                                                                                                  MethodCallHeader(
                                                                                                                                                    IdentifierDesignator(
                                                                                                                                                     compareArraysFor
                                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                                  ) [MethodCallHeader]
                                                                                                                                                  ActualParameters(
                                                                                                                                                    MultipleActualParameters(
                                                                                                                                                      SingleActualParameter(
                                                                                                                                                        ActualParameter(
                                                                                                                                                          LeftExpression(
                                                                                                                                                            SingleTermExpression(
                                                                                                                                                              NoSign(
                                                                                                                                                              ) [NoSign]
                                                                                                                                                              SingleFactorTerm(
                                                                                                                                                                DesignatorFactor(
                                                                                                                                                                  IdentifierDesignator(
                                                                                                                                                                   arr
                                                                                                                                                                  ) [IdentifierDesignator]
                                                                                                                                                                ) [DesignatorFactor]
                                                                                                                                                              ) [SingleFactorTerm]
                                                                                                                                                            ) [SingleTermExpression]
                                                                                                                                                          ) [LeftExpression]
                                                                                                                                                        ) [ActualParameter]
                                                                                                                                                      ) [SingleActualParameter]
                                                                                                                                                      ActualParameter(
                                                                                                                                                        LeftExpression(
                                                                                                                                                          SingleTermExpression(
                                                                                                                                                            NoSign(
                                                                                                                                                            ) [NoSign]
                                                                                                                                                            SingleFactorTerm(
                                                                                                                                                              DesignatorFactor(
                                                                                                                                                                IdentifierDesignator(
                                                                                                                                                                 arrCopy
                                                                                                                                                                ) [IdentifierDesignator]
                                                                                                                                                              ) [DesignatorFactor]
                                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                                        ) [LeftExpression]
                                                                                                                                                      ) [ActualParameter]
                                                                                                                                                    ) [MultipleActualParameters]
                                                                                                                                                  ) [ActualParameters]
                                                                                                                                                ) [MethodCall]
                                                                                                                                              ) [MethodCallFactor]
                                                                                                                                            ) [SingleFactorTerm]
                                                                                                                                          ) [SingleTermExpression]
                                                                                                                                        ) [LeftExpression]
                                                                                                                                      ) [ActualParameter]
                                                                                                                                    ) [SingleActualParameter]
                                                                                                                                  ) [ActualParameters]
                                                                                                                                ) [MethodCall]
                                                                                                                              ) [MethodCallDesignatorStatement]
                                                                                                                            ) [DesignatorBasedStatement]
                                                                                                                          ) [MultipleStatements]
                                                                                                                          PrintStatement(
                                                                                                                            LeftExpression(
                                                                                                                              SingleTermExpression(
                                                                                                                                NoSign(
                                                                                                                                ) [NoSign]
                                                                                                                                SingleFactorTerm(
                                                                                                                                  DesignatorFactor(
                                                                                                                                    IdentifierDesignator(
                                                                                                                                     eol
                                                                                                                                    ) [IdentifierDesignator]
                                                                                                                                  ) [DesignatorFactor]
                                                                                                                                ) [SingleFactorTerm]
                                                                                                                              ) [SingleTermExpression]
                                                                                                                            ) [LeftExpression]
                                                                                                                            NoPrintWidth(
                                                                                                                            ) [NoPrintWidth]
                                                                                                                          ) [PrintStatement]
                                                                                                                        ) [MultipleStatements]
                                                                                                                        PrintStatement(
                                                                                                                          LeftExpression(
                                                                                                                            SingleTermExpression(
                                                                                                                              NoSign(
                                                                                                                              ) [NoSign]
                                                                                                                              SingleFactorTerm(
                                                                                                                                ConstantFactor(
                                                                                                                                  CharConstantFactor(
                                                                                                                                   f
                                                                                                                                  ) [CharConstantFactor]
                                                                                                                                ) [ConstantFactor]
                                                                                                                              ) [SingleFactorTerm]
                                                                                                                            ) [SingleTermExpression]
                                                                                                                          ) [LeftExpression]
                                                                                                                          NoPrintWidth(
                                                                                                                          ) [NoPrintWidth]
                                                                                                                        ) [PrintStatement]
                                                                                                                      ) [MultipleStatements]
                                                                                                                      PrintStatement(
                                                                                                                        LeftExpression(
                                                                                                                          SingleTermExpression(
                                                                                                                            NoSign(
                                                                                                                            ) [NoSign]
                                                                                                                            SingleFactorTerm(
                                                                                                                              ConstantFactor(
                                                                                                                                CharConstantFactor(
                                                                                                                                 o
                                                                                                                                ) [CharConstantFactor]
                                                                                                                              ) [ConstantFactor]
                                                                                                                            ) [SingleFactorTerm]
                                                                                                                          ) [SingleTermExpression]
                                                                                                                        ) [LeftExpression]
                                                                                                                        NoPrintWidth(
                                                                                                                        ) [NoPrintWidth]
                                                                                                                      ) [PrintStatement]
                                                                                                                    ) [MultipleStatements]
                                                                                                                    PrintStatement(
                                                                                                                      LeftExpression(
                                                                                                                        SingleTermExpression(
                                                                                                                          NoSign(
                                                                                                                          ) [NoSign]
                                                                                                                          SingleFactorTerm(
                                                                                                                            ConstantFactor(
                                                                                                                              CharConstantFactor(
                                                                                                                               r
                                                                                                                              ) [CharConstantFactor]
                                                                                                                            ) [ConstantFactor]
                                                                                                                          ) [SingleFactorTerm]
                                                                                                                        ) [SingleTermExpression]
                                                                                                                      ) [LeftExpression]
                                                                                                                      NoPrintWidth(
                                                                                                                      ) [NoPrintWidth]
                                                                                                                    ) [PrintStatement]
                                                                                                                  ) [MultipleStatements]
                                                                                                                  PrintStatement(
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          ConstantFactor(
                                                                                                                            CharConstantFactor(
                                                                                                                             e
                                                                                                                            ) [CharConstantFactor]
                                                                                                                          ) [ConstantFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                    NoPrintWidth(
                                                                                                                    ) [NoPrintWidth]
                                                                                                                  ) [PrintStatement]
                                                                                                                ) [MultipleStatements]
                                                                                                                PrintStatement(
                                                                                                                  LeftExpression(
                                                                                                                    SingleTermExpression(
                                                                                                                      NoSign(
                                                                                                                      ) [NoSign]
                                                                                                                      SingleFactorTerm(
                                                                                                                        ConstantFactor(
                                                                                                                          CharConstantFactor(
                                                                                                                           a
                                                                                                                          ) [CharConstantFactor]
                                                                                                                        ) [ConstantFactor]
                                                                                                                      ) [SingleFactorTerm]
                                                                                                                    ) [SingleTermExpression]
                                                                                                                  ) [LeftExpression]
                                                                                                                  NoPrintWidth(
                                                                                                                  ) [NoPrintWidth]
                                                                                                                ) [PrintStatement]
                                                                                                              ) [MultipleStatements]
                                                                                                              PrintStatement(
                                                                                                                LeftExpression(
                                                                                                                  SingleTermExpression(
                                                                                                                    NoSign(
                                                                                                                    ) [NoSign]
                                                                                                                    SingleFactorTerm(
                                                                                                                      ConstantFactor(
                                                                                                                        CharConstantFactor(
                                                                                                                         c
                                                                                                                        ) [CharConstantFactor]
                                                                                                                      ) [ConstantFactor]
                                                                                                                    ) [SingleFactorTerm]
                                                                                                                  ) [SingleTermExpression]
                                                                                                                ) [LeftExpression]
                                                                                                                NoPrintWidth(
                                                                                                                ) [NoPrintWidth]
                                                                                                              ) [PrintStatement]
                                                                                                            ) [MultipleStatements]
                                                                                                            PrintStatement(
                                                                                                              LeftExpression(
                                                                                                                SingleTermExpression(
                                                                                                                  NoSign(
                                                                                                                  ) [NoSign]
                                                                                                                  SingleFactorTerm(
                                                                                                                    ConstantFactor(
                                                                                                                      CharConstantFactor(
                                                                                                                       h
                                                                                                                      ) [CharConstantFactor]
                                                                                                                    ) [ConstantFactor]
                                                                                                                  ) [SingleFactorTerm]
                                                                                                                ) [SingleTermExpression]
                                                                                                              ) [LeftExpression]
                                                                                                              NoPrintWidth(
                                                                                                              ) [NoPrintWidth]
                                                                                                            ) [PrintStatement]
                                                                                                          ) [MultipleStatements]
                                                                                                          PrintStatement(
                                                                                                            LeftExpression(
                                                                                                              SingleTermExpression(
                                                                                                                NoSign(
                                                                                                                ) [NoSign]
                                                                                                                SingleFactorTerm(
                                                                                                                  ConstantFactor(
                                                                                                                    CharConstantFactor(
                                                                                                                      
                                                                                                                    ) [CharConstantFactor]
                                                                                                                  ) [ConstantFactor]
                                                                                                                ) [SingleFactorTerm]
                                                                                                              ) [SingleTermExpression]
                                                                                                            ) [LeftExpression]
                                                                                                            NoPrintWidth(
                                                                                                            ) [NoPrintWidth]
                                                                                                          ) [PrintStatement]
                                                                                                        ) [MultipleStatements]
                                                                                                        DesignatorBasedStatement(
                                                                                                          MethodCallDesignatorStatement(
                                                                                                            MethodCall(
                                                                                                              MethodCallHeader(
                                                                                                                IdentifierDesignator(
                                                                                                                 printBool
                                                                                                                ) [IdentifierDesignator]
                                                                                                              ) [MethodCallHeader]
                                                                                                              ActualParameters(
                                                                                                                SingleActualParameter(
                                                                                                                  ActualParameter(
                                                                                                                    LeftExpression(
                                                                                                                      SingleTermExpression(
                                                                                                                        NoSign(
                                                                                                                        ) [NoSign]
                                                                                                                        SingleFactorTerm(
                                                                                                                          MethodCallFactor(
                                                                                                                            MethodCall(
                                                                                                                              MethodCallHeader(
                                                                                                                                IdentifierDesignator(
                                                                                                                                 compareArraysForEach
                                                                                                                                ) [IdentifierDesignator]
                                                                                                                              ) [MethodCallHeader]
                                                                                                                              ActualParameters(
                                                                                                                                MultipleActualParameters(
                                                                                                                                  SingleActualParameter(
                                                                                                                                    ActualParameter(
                                                                                                                                      LeftExpression(
                                                                                                                                        SingleTermExpression(
                                                                                                                                          NoSign(
                                                                                                                                          ) [NoSign]
                                                                                                                                          SingleFactorTerm(
                                                                                                                                            DesignatorFactor(
                                                                                                                                              IdentifierDesignator(
                                                                                                                                               arr
                                                                                                                                              ) [IdentifierDesignator]
                                                                                                                                            ) [DesignatorFactor]
                                                                                                                                          ) [SingleFactorTerm]
                                                                                                                                        ) [SingleTermExpression]
                                                                                                                                      ) [LeftExpression]
                                                                                                                                    ) [ActualParameter]
                                                                                                                                  ) [SingleActualParameter]
                                                                                                                                  ActualParameter(
                                                                                                                                    LeftExpression(
                                                                                                                                      SingleTermExpression(
                                                                                                                                        NoSign(
                                                                                                                                        ) [NoSign]
                                                                                                                                        SingleFactorTerm(
                                                                                                                                          DesignatorFactor(
                                                                                                                                            IdentifierDesignator(
                                                                                                                                             arrCopy
                                                                                                                                            ) [IdentifierDesignator]
                                                                                                                                          ) [DesignatorFactor]
                                                                                                                                        ) [SingleFactorTerm]
                                                                                                                                      ) [SingleTermExpression]
                                                                                                                                    ) [LeftExpression]
                                                                                                                                  ) [ActualParameter]
                                                                                                                                ) [MultipleActualParameters]
                                                                                                                              ) [ActualParameters]
                                                                                                                            ) [MethodCall]
                                                                                                                          ) [MethodCallFactor]
                                                                                                                        ) [SingleFactorTerm]
                                                                                                                      ) [SingleTermExpression]
                                                                                                                    ) [LeftExpression]
                                                                                                                  ) [ActualParameter]
                                                                                                                ) [SingleActualParameter]
                                                                                                              ) [ActualParameters]
                                                                                                            ) [MethodCall]
                                                                                                          ) [MethodCallDesignatorStatement]
                                                                                                        ) [DesignatorBasedStatement]
                                                                                                      ) [MultipleStatements]
                                                                                                      PrintStatement(
                                                                                                        LeftExpression(
                                                                                                          SingleTermExpression(
                                                                                                            NoSign(
                                                                                                            ) [NoSign]
                                                                                                            SingleFactorTerm(
                                                                                                              DesignatorFactor(
                                                                                                                IdentifierDesignator(
                                                                                                                 eol
                                                                                                                ) [IdentifierDesignator]
                                                                                                              ) [DesignatorFactor]
                                                                                                            ) [SingleFactorTerm]
                                                                                                          ) [SingleTermExpression]
                                                                                                        ) [LeftExpression]
                                                                                                        NoPrintWidth(
                                                                                                        ) [NoPrintWidth]
                                                                                                      ) [PrintStatement]
                                                                                                    ) [MultipleStatements]
                                                                                                    PrintStatement(
                                                                                                      LeftExpression(
                                                                                                        SingleTermExpression(
                                                                                                          NoSign(
                                                                                                          ) [NoSign]
                                                                                                          SingleFactorTerm(
                                                                                                            ConstantFactor(
                                                                                                              CharConstantFactor(
                                                                                                               e
                                                                                                              ) [CharConstantFactor]
                                                                                                            ) [ConstantFactor]
                                                                                                          ) [SingleFactorTerm]
                                                                                                        ) [SingleTermExpression]
                                                                                                      ) [LeftExpression]
                                                                                                      NoPrintWidth(
                                                                                                      ) [NoPrintWidth]
                                                                                                    ) [PrintStatement]
                                                                                                  ) [MultipleStatements]
                                                                                                  PrintStatement(
                                                                                                    LeftExpression(
                                                                                                      SingleTermExpression(
                                                                                                        NoSign(
                                                                                                        ) [NoSign]
                                                                                                        SingleFactorTerm(
                                                                                                          ConstantFactor(
                                                                                                            CharConstantFactor(
                                                                                                              
                                                                                                            ) [CharConstantFactor]
                                                                                                          ) [ConstantFactor]
                                                                                                        ) [SingleFactorTerm]
                                                                                                      ) [SingleTermExpression]
                                                                                                    ) [LeftExpression]
                                                                                                    NoPrintWidth(
                                                                                                    ) [NoPrintWidth]
                                                                                                  ) [PrintStatement]
                                                                                                ) [MultipleStatements]
                                                                                                PrintStatement(
                                                                                                  LeftExpression(
                                                                                                    SingleTermExpression(
                                                                                                      NoSign(
                                                                                                      ) [NoSign]
                                                                                                      SingleFactorTerm(
                                                                                                        ConstantFactor(
                                                                                                          CharConstantFactor(
                                                                                                           =
                                                                                                          ) [CharConstantFactor]
                                                                                                        ) [ConstantFactor]
                                                                                                      ) [SingleFactorTerm]
                                                                                                    ) [SingleTermExpression]
                                                                                                  ) [LeftExpression]
                                                                                                  NoPrintWidth(
                                                                                                  ) [NoPrintWidth]
                                                                                                ) [PrintStatement]
                                                                                              ) [MultipleStatements]
                                                                                              PrintStatement(
                                                                                                LeftExpression(
                                                                                                  SingleTermExpression(
                                                                                                    NoSign(
                                                                                                    ) [NoSign]
                                                                                                    SingleFactorTerm(
                                                                                                      ConstantFactor(
                                                                                                        CharConstantFactor(
                                                                                                          
                                                                                                        ) [CharConstantFactor]
                                                                                                      ) [ConstantFactor]
                                                                                                    ) [SingleFactorTerm]
                                                                                                  ) [SingleTermExpression]
                                                                                                ) [LeftExpression]
                                                                                                NoPrintWidth(
                                                                                                ) [NoPrintWidth]
                                                                                              ) [PrintStatement]
                                                                                            ) [MultipleStatements]
                                                                                            ReadStatement(
                                                                                              IdentifierDesignator(
                                                                                               e
                                                                                              ) [IdentifierDesignator]
                                                                                            ) [ReadStatement]
                                                                                          ) [MultipleStatements]
                                                                                          PrintStatement(
                                                                                            LeftExpression(
                                                                                              SingleTermExpression(
                                                                                                NoSign(
                                                                                                ) [NoSign]
                                                                                                SingleFactorTerm(
                                                                                                  ConstantFactor(
                                                                                                    CharConstantFactor(
                                                                                                     f
                                                                                                    ) [CharConstantFactor]
                                                                                                  ) [ConstantFactor]
                                                                                                ) [SingleFactorTerm]
                                                                                              ) [SingleTermExpression]
                                                                                            ) [LeftExpression]
                                                                                            NoPrintWidth(
                                                                                            ) [NoPrintWidth]
                                                                                          ) [PrintStatement]
                                                                                        ) [MultipleStatements]
                                                                                        PrintStatement(
                                                                                          LeftExpression(
                                                                                            SingleTermExpression(
                                                                                              NoSign(
                                                                                              ) [NoSign]
                                                                                              SingleFactorTerm(
                                                                                                ConstantFactor(
                                                                                                  CharConstantFactor(
                                                                                                   o
                                                                                                  ) [CharConstantFactor]
                                                                                                ) [ConstantFactor]
                                                                                              ) [SingleFactorTerm]
                                                                                            ) [SingleTermExpression]
                                                                                          ) [LeftExpression]
                                                                                          NoPrintWidth(
                                                                                          ) [NoPrintWidth]
                                                                                        ) [PrintStatement]
                                                                                      ) [MultipleStatements]
                                                                                      PrintStatement(
                                                                                        LeftExpression(
                                                                                          SingleTermExpression(
                                                                                            NoSign(
                                                                                            ) [NoSign]
                                                                                            SingleFactorTerm(
                                                                                              ConstantFactor(
                                                                                                CharConstantFactor(
                                                                                                 r
                                                                                                ) [CharConstantFactor]
                                                                                              ) [ConstantFactor]
                                                                                            ) [SingleFactorTerm]
                                                                                          ) [SingleTermExpression]
                                                                                        ) [LeftExpression]
                                                                                        NoPrintWidth(
                                                                                        ) [NoPrintWidth]
                                                                                      ) [PrintStatement]
                                                                                    ) [MultipleStatements]
                                                                                    PrintStatement(
                                                                                      LeftExpression(
                                                                                        SingleTermExpression(
                                                                                          NoSign(
                                                                                          ) [NoSign]
                                                                                          SingleFactorTerm(
                                                                                            ConstantFactor(
                                                                                              CharConstantFactor(
                                                                                                
                                                                                              ) [CharConstantFactor]
                                                                                            ) [ConstantFactor]
                                                                                          ) [SingleFactorTerm]
                                                                                        ) [SingleTermExpression]
                                                                                      ) [LeftExpression]
                                                                                      NoPrintWidth(
                                                                                      ) [NoPrintWidth]
                                                                                    ) [PrintStatement]
                                                                                  ) [MultipleStatements]
                                                                                  DesignatorBasedStatement(
                                                                                    MethodCallDesignatorStatement(
                                                                                      MethodCall(
                                                                                        MethodCallHeader(
                                                                                          IdentifierDesignator(
                                                                                           printBool
                                                                                          ) [IdentifierDesignator]
                                                                                        ) [MethodCallHeader]
                                                                                        ActualParameters(
                                                                                          SingleActualParameter(
                                                                                            ActualParameter(
                                                                                              LeftExpression(
                                                                                                SingleTermExpression(
                                                                                                  NoSign(
                                                                                                  ) [NoSign]
                                                                                                  SingleFactorTerm(
                                                                                                    MethodCallFactor(
                                                                                                      MethodCall(
                                                                                                        MethodCallHeader(
                                                                                                          IdentifierDesignator(
                                                                                                           findElementFor
                                                                                                          ) [IdentifierDesignator]
                                                                                                        ) [MethodCallHeader]
                                                                                                        ActualParameters(
                                                                                                          MultipleActualParameters(
                                                                                                            SingleActualParameter(
                                                                                                              ActualParameter(
                                                                                                                LeftExpression(
                                                                                                                  SingleTermExpression(
                                                                                                                    NoSign(
                                                                                                                    ) [NoSign]
                                                                                                                    SingleFactorTerm(
                                                                                                                      DesignatorFactor(
                                                                                                                        IdentifierDesignator(
                                                                                                                         arr
                                                                                                                        ) [IdentifierDesignator]
                                                                                                                      ) [DesignatorFactor]
                                                                                                                    ) [SingleFactorTerm]
                                                                                                                  ) [SingleTermExpression]
                                                                                                                ) [LeftExpression]
                                                                                                              ) [ActualParameter]
                                                                                                            ) [SingleActualParameter]
                                                                                                            ActualParameter(
                                                                                                              LeftExpression(
                                                                                                                SingleTermExpression(
                                                                                                                  NoSign(
                                                                                                                  ) [NoSign]
                                                                                                                  SingleFactorTerm(
                                                                                                                    DesignatorFactor(
                                                                                                                      IdentifierDesignator(
                                                                                                                       e
                                                                                                                      ) [IdentifierDesignator]
                                                                                                                    ) [DesignatorFactor]
                                                                                                                  ) [SingleFactorTerm]
                                                                                                                ) [SingleTermExpression]
                                                                                                              ) [LeftExpression]
                                                                                                            ) [ActualParameter]
                                                                                                          ) [MultipleActualParameters]
                                                                                                        ) [ActualParameters]
                                                                                                      ) [MethodCall]
                                                                                                    ) [MethodCallFactor]
                                                                                                  ) [SingleFactorTerm]
                                                                                                ) [SingleTermExpression]
                                                                                              ) [LeftExpression]
                                                                                            ) [ActualParameter]
                                                                                          ) [SingleActualParameter]
                                                                                        ) [ActualParameters]
                                                                                      ) [MethodCall]
                                                                                    ) [MethodCallDesignatorStatement]
                                                                                  ) [DesignatorBasedStatement]
                                                                                ) [MultipleStatements]
                                                                                PrintStatement(
                                                                                  LeftExpression(
                                                                                    SingleTermExpression(
                                                                                      NoSign(
                                                                                      ) [NoSign]
                                                                                      SingleFactorTerm(
                                                                                        DesignatorFactor(
                                                                                          IdentifierDesignator(
                                                                                           eol
                                                                                          ) [IdentifierDesignator]
                                                                                        ) [DesignatorFactor]
                                                                                      ) [SingleFactorTerm]
                                                                                    ) [SingleTermExpression]
                                                                                  ) [LeftExpression]
                                                                                  NoPrintWidth(
                                                                                  ) [NoPrintWidth]
                                                                                ) [PrintStatement]
                                                                              ) [MultipleStatements]
                                                                              PrintStatement(
                                                                                LeftExpression(
                                                                                  SingleTermExpression(
                                                                                    NoSign(
                                                                                    ) [NoSign]
                                                                                    SingleFactorTerm(
                                                                                      ConstantFactor(
                                                                                        CharConstantFactor(
                                                                                         f
                                                                                        ) [CharConstantFactor]
                                                                                      ) [ConstantFactor]
                                                                                    ) [SingleFactorTerm]
                                                                                  ) [SingleTermExpression]
                                                                                ) [LeftExpression]
                                                                                NoPrintWidth(
                                                                                ) [NoPrintWidth]
                                                                              ) [PrintStatement]
                                                                            ) [MultipleStatements]
                                                                            PrintStatement(
                                                                              LeftExpression(
                                                                                SingleTermExpression(
                                                                                  NoSign(
                                                                                  ) [NoSign]
                                                                                  SingleFactorTerm(
                                                                                    ConstantFactor(
                                                                                      CharConstantFactor(
                                                                                       o
                                                                                      ) [CharConstantFactor]
                                                                                    ) [ConstantFactor]
                                                                                  ) [SingleFactorTerm]
                                                                                ) [SingleTermExpression]
                                                                              ) [LeftExpression]
                                                                              NoPrintWidth(
                                                                              ) [NoPrintWidth]
                                                                            ) [PrintStatement]
                                                                          ) [MultipleStatements]
                                                                          PrintStatement(
                                                                            LeftExpression(
                                                                              SingleTermExpression(
                                                                                NoSign(
                                                                                ) [NoSign]
                                                                                SingleFactorTerm(
                                                                                  ConstantFactor(
                                                                                    CharConstantFactor(
                                                                                     r
                                                                                    ) [CharConstantFactor]
                                                                                  ) [ConstantFactor]
                                                                                ) [SingleFactorTerm]
                                                                              ) [SingleTermExpression]
                                                                            ) [LeftExpression]
                                                                            NoPrintWidth(
                                                                            ) [NoPrintWidth]
                                                                          ) [PrintStatement]
                                                                        ) [MultipleStatements]
                                                                        PrintStatement(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                ConstantFactor(
                                                                                  CharConstantFactor(
                                                                                   e
                                                                                  ) [CharConstantFactor]
                                                                                ) [ConstantFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                          NoPrintWidth(
                                                                          ) [NoPrintWidth]
                                                                        ) [PrintStatement]
                                                                      ) [MultipleStatements]
                                                                      PrintStatement(
                                                                        LeftExpression(
                                                                          SingleTermExpression(
                                                                            NoSign(
                                                                            ) [NoSign]
                                                                            SingleFactorTerm(
                                                                              ConstantFactor(
                                                                                CharConstantFactor(
                                                                                 a
                                                                                ) [CharConstantFactor]
                                                                              ) [ConstantFactor]
                                                                            ) [SingleFactorTerm]
                                                                          ) [SingleTermExpression]
                                                                        ) [LeftExpression]
                                                                        NoPrintWidth(
                                                                        ) [NoPrintWidth]
                                                                      ) [PrintStatement]
                                                                    ) [MultipleStatements]
                                                                    PrintStatement(
                                                                      LeftExpression(
                                                                        SingleTermExpression(
                                                                          NoSign(
                                                                          ) [NoSign]
                                                                          SingleFactorTerm(
                                                                            ConstantFactor(
                                                                              CharConstantFactor(
                                                                               c
                                                                              ) [CharConstantFactor]
                                                                            ) [ConstantFactor]
                                                                          ) [SingleFactorTerm]
                                                                        ) [SingleTermExpression]
                                                                      ) [LeftExpression]
                                                                      NoPrintWidth(
                                                                      ) [NoPrintWidth]
                                                                    ) [PrintStatement]
                                                                  ) [MultipleStatements]
                                                                  PrintStatement(
                                                                    LeftExpression(
                                                                      SingleTermExpression(
                                                                        NoSign(
                                                                        ) [NoSign]
                                                                        SingleFactorTerm(
                                                                          ConstantFactor(
                                                                            CharConstantFactor(
                                                                             h
                                                                            ) [CharConstantFactor]
                                                                          ) [ConstantFactor]
                                                                        ) [SingleFactorTerm]
                                                                      ) [SingleTermExpression]
                                                                    ) [LeftExpression]
                                                                    NoPrintWidth(
                                                                    ) [NoPrintWidth]
                                                                  ) [PrintStatement]
                                                                ) [MultipleStatements]
                                                                PrintStatement(
                                                                  LeftExpression(
                                                                    SingleTermExpression(
                                                                      NoSign(
                                                                      ) [NoSign]
                                                                      SingleFactorTerm(
                                                                        ConstantFactor(
                                                                          CharConstantFactor(
                                                                            
                                                                          ) [CharConstantFactor]
                                                                        ) [ConstantFactor]
                                                                      ) [SingleFactorTerm]
                                                                    ) [SingleTermExpression]
                                                                  ) [LeftExpression]
                                                                  NoPrintWidth(
                                                                  ) [NoPrintWidth]
                                                                ) [PrintStatement]
                                                              ) [MultipleStatements]
                                                              DesignatorBasedStatement(
                                                                MethodCallDesignatorStatement(
                                                                  MethodCall(
                                                                    MethodCallHeader(
                                                                      IdentifierDesignator(
                                                                       printBool
                                                                      ) [IdentifierDesignator]
                                                                    ) [MethodCallHeader]
                                                                    ActualParameters(
                                                                      SingleActualParameter(
                                                                        ActualParameter(
                                                                          LeftExpression(
                                                                            SingleTermExpression(
                                                                              NoSign(
                                                                              ) [NoSign]
                                                                              SingleFactorTerm(
                                                                                MethodCallFactor(
                                                                                  MethodCall(
                                                                                    MethodCallHeader(
                                                                                      IdentifierDesignator(
                                                                                       findElementForEach
                                                                                      ) [IdentifierDesignator]
                                                                                    ) [MethodCallHeader]
                                                                                    ActualParameters(
                                                                                      MultipleActualParameters(
                                                                                        SingleActualParameter(
                                                                                          ActualParameter(
                                                                                            LeftExpression(
                                                                                              SingleTermExpression(
                                                                                                NoSign(
                                                                                                ) [NoSign]
                                                                                                SingleFactorTerm(
                                                                                                  DesignatorFactor(
                                                                                                    IdentifierDesignator(
                                                                                                     arr
                                                                                                    ) [IdentifierDesignator]
                                                                                                  ) [DesignatorFactor]
                                                                                                ) [SingleFactorTerm]
                                                                                              ) [SingleTermExpression]
                                                                                            ) [LeftExpression]
                                                                                          ) [ActualParameter]
                                                                                        ) [SingleActualParameter]
                                                                                        ActualParameter(
                                                                                          LeftExpression(
                                                                                            SingleTermExpression(
                                                                                              NoSign(
                                                                                              ) [NoSign]
                                                                                              SingleFactorTerm(
                                                                                                DesignatorFactor(
                                                                                                  IdentifierDesignator(
                                                                                                   e
                                                                                                  ) [IdentifierDesignator]
                                                                                                ) [DesignatorFactor]
                                                                                              ) [SingleFactorTerm]
                                                                                            ) [SingleTermExpression]
                                                                                          ) [LeftExpression]
                                                                                        ) [ActualParameter]
                                                                                      ) [MultipleActualParameters]
                                                                                    ) [ActualParameters]
                                                                                  ) [MethodCall]
                                                                                ) [MethodCallFactor]
                                                                              ) [SingleFactorTerm]
                                                                            ) [SingleTermExpression]
                                                                          ) [LeftExpression]
                                                                        ) [ActualParameter]
                                                                      ) [SingleActualParameter]
                                                                    ) [ActualParameters]
                                                                  ) [MethodCall]
                                                                ) [MethodCallDesignatorStatement]
                                                              ) [DesignatorBasedStatement]
                                                            ) [MultipleStatements]
                                                            PrintStatement(
                                                              LeftExpression(
                                                                SingleTermExpression(
                                                                  NoSign(
                                                                  ) [NoSign]
                                                                  SingleFactorTerm(
                                                                    DesignatorFactor(
                                                                      IdentifierDesignator(
                                                                       eol
                                                                      ) [IdentifierDesignator]
                                                                    ) [DesignatorFactor]
                                                                  ) [SingleFactorTerm]
                                                                ) [SingleTermExpression]
                                                              ) [LeftExpression]
                                                              NoPrintWidth(
                                                              ) [NoPrintWidth]
                                                            ) [PrintStatement]
                                                          ) [MultipleStatements]
                                                          PrintStatement(
                                                            LeftExpression(
                                                              SingleTermExpression(
                                                                NoSign(
                                                                ) [NoSign]
                                                                SingleFactorTerm(
                                                                  ConstantFactor(
                                                                    CharConstantFactor(
                                                                     o
                                                                    ) [CharConstantFactor]
                                                                  ) [ConstantFactor]
                                                                ) [SingleFactorTerm]
                                                              ) [SingleTermExpression]
                                                            ) [LeftExpression]
                                                            NoPrintWidth(
                                                            ) [NoPrintWidth]
                                                          ) [PrintStatement]
                                                        ) [MultipleStatements]
                                                        PrintStatement(
                                                          LeftExpression(
                                                            SingleTermExpression(
                                                              NoSign(
                                                              ) [NoSign]
                                                              SingleFactorTerm(
                                                                ConstantFactor(
                                                                  CharConstantFactor(
                                                                   d
                                                                  ) [CharConstantFactor]
                                                                ) [ConstantFactor]
                                                              ) [SingleFactorTerm]
                                                            ) [SingleTermExpression]
                                                          ) [LeftExpression]
                                                          NoPrintWidth(
                                                          ) [NoPrintWidth]
                                                        ) [PrintStatement]
                                                      ) [MultipleStatements]
                                                      PrintStatement(
                                                        LeftExpression(
                                                          SingleTermExpression(
                                                            NoSign(
                                                            ) [NoSign]
                                                            SingleFactorTerm(
                                                              ConstantFactor(
                                                                CharConstantFactor(
                                                                 d
                                                                ) [CharConstantFactor]
                                                              ) [ConstantFactor]
                                                            ) [SingleFactorTerm]
                                                          ) [SingleTermExpression]
                                                        ) [LeftExpression]
                                                        NoPrintWidth(
                                                        ) [NoPrintWidth]
                                                      ) [PrintStatement]
                                                    ) [MultipleStatements]
                                                    PrintStatement(
                                                      LeftExpression(
                                                        SingleTermExpression(
                                                          NoSign(
                                                          ) [NoSign]
                                                          SingleFactorTerm(
                                                            ConstantFactor(
                                                              CharConstantFactor(
                                                                
                                                              ) [CharConstantFactor]
                                                            ) [ConstantFactor]
                                                          ) [SingleFactorTerm]
                                                        ) [SingleTermExpression]
                                                      ) [LeftExpression]
                                                      NoPrintWidth(
                                                      ) [NoPrintWidth]
                                                    ) [PrintStatement]
                                                  ) [MultipleStatements]
                                                  PrintStatement(
                                                    LeftExpression(
                                                      SingleTermExpression(
                                                        NoSign(
                                                        ) [NoSign]
                                                        SingleFactorTerm(
                                                          ConstantFactor(
                                                            CharConstantFactor(
                                                             c
                                                            ) [CharConstantFactor]
                                                          ) [ConstantFactor]
                                                        ) [SingleFactorTerm]
                                                      ) [SingleTermExpression]
                                                    ) [LeftExpression]
                                                    NoPrintWidth(
                                                    ) [NoPrintWidth]
                                                  ) [PrintStatement]
                                                ) [MultipleStatements]
                                                PrintStatement(
                                                  LeftExpression(
                                                    SingleTermExpression(
                                                      NoSign(
                                                      ) [NoSign]
                                                      SingleFactorTerm(
                                                        ConstantFactor(
                                                          CharConstantFactor(
                                                           o
                                                          ) [CharConstantFactor]
                                                        ) [ConstantFactor]
                                                      ) [SingleFactorTerm]
                                                    ) [SingleTermExpression]
                                                  ) [LeftExpression]
                                                  NoPrintWidth(
                                                  ) [NoPrintWidth]
                                                ) [PrintStatement]
                                              ) [MultipleStatements]
                                              PrintStatement(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      ConstantFactor(
                                                        CharConstantFactor(
                                                         u
                                                        ) [CharConstantFactor]
                                                      ) [ConstantFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                                NoPrintWidth(
                                                ) [NoPrintWidth]
                                              ) [PrintStatement]
                                            ) [MultipleStatements]
                                            PrintStatement(
                                              LeftExpression(
                                                SingleTermExpression(
                                                  NoSign(
                                                  ) [NoSign]
                                                  SingleFactorTerm(
                                                    ConstantFactor(
                                                      CharConstantFactor(
                                                       n
                                                      ) [CharConstantFactor]
                                                    ) [ConstantFactor]
                                                  ) [SingleFactorTerm]
                                                ) [SingleTermExpression]
                                              ) [LeftExpression]
                                              NoPrintWidth(
                                              ) [NoPrintWidth]
                                            ) [PrintStatement]
                                          ) [MultipleStatements]
                                          PrintStatement(
                                            LeftExpression(
                                              SingleTermExpression(
                                                NoSign(
                                                ) [NoSign]
                                                SingleFactorTerm(
                                                  ConstantFactor(
                                                    CharConstantFactor(
                                                     t
                                                    ) [CharConstantFactor]
                                                  ) [ConstantFactor]
                                                ) [SingleFactorTerm]
                                              ) [SingleTermExpression]
                                            ) [LeftExpression]
                                            NoPrintWidth(
                                            ) [NoPrintWidth]
                                          ) [PrintStatement]
                                        ) [MultipleStatements]
                                        PrintStatement(
                                          LeftExpression(
                                            SingleTermExpression(
                                              NoSign(
                                              ) [NoSign]
                                              SingleFactorTerm(
                                                DesignatorFactor(
                                                  IdentifierDesignator(
                                                   eol
                                                  ) [IdentifierDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactorTerm]
                                            ) [SingleTermExpression]
                                          ) [LeftExpression]
                                          NoPrintWidth(
                                          ) [NoPrintWidth]
                                        ) [PrintStatement]
                                      ) [MultipleStatements]
                                      PrintStatement(
                                        LeftExpression(
                                          SingleTermExpression(
                                            NoSign(
                                            ) [NoSign]
                                            SingleFactorTerm(
                                              ConstantFactor(
                                                CharConstantFactor(
                                                 f
                                                ) [CharConstantFactor]
                                              ) [ConstantFactor]
                                            ) [SingleFactorTerm]
                                          ) [SingleTermExpression]
                                        ) [LeftExpression]
                                        NoPrintWidth(
                                        ) [NoPrintWidth]
                                      ) [PrintStatement]
                                    ) [MultipleStatements]
                                    PrintStatement(
                                      LeftExpression(
                                        SingleTermExpression(
                                          NoSign(
                                          ) [NoSign]
                                          SingleFactorTerm(
                                            ConstantFactor(
                                              CharConstantFactor(
                                               o
                                              ) [CharConstantFactor]
                                            ) [ConstantFactor]
                                          ) [SingleFactorTerm]
                                        ) [SingleTermExpression]
                                      ) [LeftExpression]
                                      NoPrintWidth(
                                      ) [NoPrintWidth]
                                    ) [PrintStatement]
                                  ) [MultipleStatements]
                                  PrintStatement(
                                    LeftExpression(
                                      SingleTermExpression(
                                        NoSign(
                                        ) [NoSign]
                                        SingleFactorTerm(
                                          ConstantFactor(
                                            CharConstantFactor(
                                             r
                                            ) [CharConstantFactor]
                                          ) [ConstantFactor]
                                        ) [SingleFactorTerm]
                                      ) [SingleTermExpression]
                                    ) [LeftExpression]
                                    NoPrintWidth(
                                    ) [NoPrintWidth]
                                  ) [PrintStatement]
                                ) [MultipleStatements]
                                PrintStatement(
                                  LeftExpression(
                                    SingleTermExpression(
                                      NoSign(
                                      ) [NoSign]
                                      SingleFactorTerm(
                                        ConstantFactor(
                                          CharConstantFactor(
                                            
                                          ) [CharConstantFactor]
                                        ) [ConstantFactor]
                                      ) [SingleFactorTerm]
                                    ) [SingleTermExpression]
                                  ) [LeftExpression]
                                  NoPrintWidth(
                                  ) [NoPrintWidth]
                                ) [PrintStatement]
                              ) [MultipleStatements]
                              PrintStatement(
                                LeftExpression(
                                  SingleTermExpression(
                                    NoSign(
                                    ) [NoSign]
                                    SingleFactorTerm(
                                      MethodCallFactor(
                                        MethodCall(
                                          MethodCallHeader(
                                            IdentifierDesignator(
                                             countOddFor
                                            ) [IdentifierDesignator]
                                          ) [MethodCallHeader]
                                          ActualParameters(
                                            SingleActualParameter(
                                              ActualParameter(
                                                LeftExpression(
                                                  SingleTermExpression(
                                                    NoSign(
                                                    ) [NoSign]
                                                    SingleFactorTerm(
                                                      DesignatorFactor(
                                                        IdentifierDesignator(
                                                         arr
                                                        ) [IdentifierDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactorTerm]
                                                  ) [SingleTermExpression]
                                                ) [LeftExpression]
                                              ) [ActualParameter]
                                            ) [SingleActualParameter]
                                          ) [ActualParameters]
                                        ) [MethodCall]
                                      ) [MethodCallFactor]
                                    ) [SingleFactorTerm]
                                  ) [SingleTermExpression]
                                ) [LeftExpression]
                                NoPrintWidth(
                                ) [NoPrintWidth]
                              ) [PrintStatement]
                            ) [MultipleStatements]
                            PrintStatement(
                              LeftExpression(
                                SingleTermExpression(
                                  NoSign(
                                  ) [NoSign]
                                  SingleFactorTerm(
                                    DesignatorFactor(
                                      IdentifierDesignator(
                                       eol
                                      ) [IdentifierDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactorTerm]
                                ) [SingleTermExpression]
                              ) [LeftExpression]
                              NoPrintWidth(
                              ) [NoPrintWidth]
                            ) [PrintStatement]
                          ) [MultipleStatements]
                          PrintStatement(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  ConstantFactor(
                                    CharConstantFactor(
                                     f
                                    ) [CharConstantFactor]
                                  ) [ConstantFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                            NoPrintWidth(
                            ) [NoPrintWidth]
                          ) [PrintStatement]
                        ) [MultipleStatements]
                        PrintStatement(
                          LeftExpression(
                            SingleTermExpression(
                              NoSign(
                              ) [NoSign]
                              SingleFactorTerm(
                                ConstantFactor(
                                  CharConstantFactor(
                                   o
                                  ) [CharConstantFactor]
                                ) [ConstantFactor]
                              ) [SingleFactorTerm]
                            ) [SingleTermExpression]
                          ) [LeftExpression]
                          NoPrintWidth(
                          ) [NoPrintWidth]
                        ) [PrintStatement]
                      ) [MultipleStatements]
                      PrintStatement(
                        LeftExpression(
                          SingleTermExpression(
                            NoSign(
                            ) [NoSign]
                            SingleFactorTerm(
                              ConstantFactor(
                                CharConstantFactor(
                                 r
                                ) [CharConstantFactor]
                              ) [ConstantFactor]
                            ) [SingleFactorTerm]
                          ) [SingleTermExpression]
                        ) [LeftExpression]
                        NoPrintWidth(
                        ) [NoPrintWidth]
                      ) [PrintStatement]
                    ) [MultipleStatements]
                    PrintStatement(
                      LeftExpression(
                        SingleTermExpression(
                          NoSign(
                          ) [NoSign]
                          SingleFactorTerm(
                            ConstantFactor(
                              CharConstantFactor(
                               e
                              ) [CharConstantFactor]
                            ) [ConstantFactor]
                          ) [SingleFactorTerm]
                        ) [SingleTermExpression]
                      ) [LeftExpression]
                      NoPrintWidth(
                      ) [NoPrintWidth]
                    ) [PrintStatement]
                  ) [MultipleStatements]
                  PrintStatement(
                    LeftExpression(
                      SingleTermExpression(
                        NoSign(
                        ) [NoSign]
                        SingleFactorTerm(
                          ConstantFactor(
                            CharConstantFactor(
                             a
                            ) [CharConstantFactor]
                          ) [ConstantFactor]
                        ) [SingleFactorTerm]
                      ) [SingleTermExpression]
                    ) [LeftExpression]
                    NoPrintWidth(
                    ) [NoPrintWidth]
                  ) [PrintStatement]
                ) [MultipleStatements]
                PrintStatement(
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        ConstantFactor(
                          CharConstantFactor(
                           c
                          ) [CharConstantFactor]
                        ) [ConstantFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                  NoPrintWidth(
                  ) [NoPrintWidth]
                ) [PrintStatement]
              ) [MultipleStatements]
              PrintStatement(
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      ConstantFactor(
                        CharConstantFactor(
                         h
                        ) [CharConstantFactor]
                      ) [ConstantFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
                NoPrintWidth(
                ) [NoPrintWidth]
              ) [PrintStatement]
            ) [MultipleStatements]
            PrintStatement(
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    ConstantFactor(
                      CharConstantFactor(
                        
                      ) [CharConstantFactor]
                    ) [ConstantFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
              NoPrintWidth(
              ) [NoPrintWidth]
            ) [PrintStatement]
          ) [MultipleStatements]
          PrintStatement(
            LeftExpression(
              SingleTermExpression(
                NoSign(
                ) [NoSign]
                SingleFactorTerm(
                  MethodCallFactor(
                    MethodCall(
                      MethodCallHeader(
                        IdentifierDesignator(
                         countOddForEach
                        ) [IdentifierDesignator]
                      ) [MethodCallHeader]
                      ActualParameters(
                        SingleActualParameter(
                          ActualParameter(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     arr
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ActualParameter]
                        ) [SingleActualParameter]
                      ) [ActualParameters]
                    ) [MethodCall]
                  ) [MethodCallFactor]
                ) [SingleFactorTerm]
              ) [SingleTermExpression]
            ) [LeftExpression]
            NoPrintWidth(
            ) [NoPrintWidth]
          ) [PrintStatement]
        ) [MultipleStatements]
        PrintStatement(
          LeftExpression(
            SingleTermExpression(
              NoSign(
              ) [NoSign]
              SingleFactorTerm(
                DesignatorFactor(
                  IdentifierDesignator(
                   eol
                  ) [IdentifierDesignator]
                ) [DesignatorFactor]
              ) [SingleFactorTerm]
            ) [SingleTermExpression]
          ) [LeftExpression]
          NoPrintWidth(
          ) [NoPrintWidth]
        ) [PrintStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
DEBUG - generator_B.mj:8: SEMANTIC ANALYZER: Visited node: 'ProgramHeader'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_B.mj:9: SEMANTIC ANALYZER: Defined int variable 'globalI'. Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'Variable'.
INFO  - generator_B.mj:9: SEMANTIC ANALYZER: Defined int variable 'globalIt'. Symbol node: Variable 'globalIt': type = 'int', adr = 1, level = 0
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:11: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:12: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:14: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:14: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:14: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:14: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:14: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:14: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:16: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:52: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:52: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:52: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:64: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:64: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:64: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:76: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:76: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:76: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:17: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:17: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:17: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:11: SEMANTIC ANALYZER: Defined method 'readArray'. Symbol node: Method 'readArray': type = 'void', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:21: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:21: SEMANTIC ANALYZER: Defined bool formal parameter 'inline'. Symbol node: Formal parameter 'inline': type = 'bool', adr = 1, level = 1
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:22: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:22: SEMANTIC ANALYZER: Defined int variable 'it'. Symbol node: Variable 'it': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:24: SEMANTIC ANALYZER: Found formal parameter usage 'inline'! Symbol node: Formal parameter 'inline': type = 'bool', adr = 1, level = 1
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:26: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:27: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:29: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:31: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:33: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:35: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:44: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:44: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:68: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:68: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:68: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:80: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:80: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:80: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:36: SEMANTIC ANALYZER: Found global variable usage 'globalIt'! Symbol node: Variable 'globalIt': type = 'int', adr = 1, level = 0
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:36: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:37: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:21: SEMANTIC ANALYZER: Defined method 'printArray'. Symbol node: Method 'printArray': type = 'void', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'inline': type = 'bool', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'it': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:42: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:42: SEMANTIC ANALYZER: Defined int formal parameter 'i'. Symbol node: Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:42: SEMANTIC ANALYZER: Defined int formal parameter 'j'. Symbol node: Formal parameter 'j': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:43: SEMANTIC ANALYZER: Defined int variable 'tmp'. Symbol node: Variable 'tmp': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:45: SEMANTIC ANALYZER: Found local variable usage 'tmp'! Symbol node: Variable 'tmp': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:45: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:45: SEMANTIC ANALYZER: Found formal parameter usage 'i'! Symbol node: Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:45: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:45: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:46: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:46: SEMANTIC ANALYZER: Found formal parameter usage 'i'! Symbol node: Formal parameter 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:46: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:46: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:46: SEMANTIC ANALYZER: Found formal parameter usage 'j'! Symbol node: Formal parameter 'j': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:21: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:46: SEMANTIC ANALYZER: Found array element access 'j[j]'! Symbol node: Array element 'j[j]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:47: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:47: SEMANTIC ANALYZER: Found formal parameter usage 'j'! Symbol node: Formal parameter 'j': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:47: SEMANTIC ANALYZER: Found array element access 'j[j]'! Symbol node: Array element 'j[j]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:47: SEMANTIC ANALYZER: Found local variable usage 'tmp'! Symbol node: Variable 'tmp': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:47: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:42: SEMANTIC ANALYZER: Defined method 'swap'. Symbol node: Method 'swap': type = 'void', adr = 0, level = 3
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'i': type = 'int', adr = 1, level = 1
  Formal parameter 'j': type = 'int', adr = 2, level = 1
  Variable 'tmp': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:50: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:50: SEMANTIC ANALYZER: Defined bool formal parameter 'asc'. Symbol node: Formal parameter 'asc': type = 'bool', adr = 1, level = 1
DEBUG - generator_B.mj:51: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:51: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:51: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:51: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:51: SEMANTIC ANALYZER: Defined int variable 'j'. Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:54: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:54: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:54: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:54: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:54: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:54: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:55: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found formal parameter usage 'asc'! Symbol node: Formal parameter 'asc': type = 'bool', adr = 1, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:31: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found array element access 'j[j]'! Symbol node: Array element 'j[j]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found formal parameter usage 'asc'! Symbol node: Formal parameter 'asc': type = 'bool', adr = 1, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:44: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:44: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:51: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:51: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:44: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:60: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:60: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:75: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:75: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:56: SEMANTIC ANALYZER: Found array element access 'j[j]'! Symbol node: Array element 'j[j]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:60: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:57: SEMANTIC ANALYZER: Found global method call 'swap'! Symbol node: Method 'swap': type = 'void', adr = 0, level = 3
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'i': type = 'int', adr = 1, level = 1
  Formal parameter 'j': type = 'int', adr = 2, level = 1
  Variable 'tmp': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:57: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:57: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:57: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:56: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:55: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:50: SEMANTIC ANALYZER: Defined method 'sortArray'. Symbol node: Method 'sortArray': type = 'void', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'asc': type = 'bool', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:65: SEMANTIC ANALYZER: Defined int array formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:65: SEMANTIC ANALYZER: Defined int array formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'array of int', adr = 1, level = 1
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:66: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:66: SEMANTIC ANALYZER: Defined int variable 'j'. Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:67: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:67: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:67: SEMANTIC ANALYZER: Defined bool variable 'same'. Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:67: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:67: SEMANTIC ANALYZER: Defined bool variable 'found'. Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:69: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:69: SEMANTIC ANALYZER: Found local variable usage 'same'! Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:69: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:69: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:69: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:70: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:70: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:70: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:70: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:70: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:70: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:71: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:71: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:71: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:71: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:71: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:72: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:72: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:72: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:72: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'array of int', adr = 1, level = 1
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:72: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:72: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:73: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:73: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:73: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:73: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'array of int', adr = 1, level = 1
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:73: SEMANTIC ANALYZER: Found local variable usage 'j'! Symbol node: Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:73: SEMANTIC ANALYZER: Found array element access 'j[j]'! Symbol node: Array element 'j[j]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:73: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:74: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:72: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:77: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:77: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:77: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:77: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:77: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:77: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:78: SEMANTIC ANALYZER: Found local variable usage 'same'! Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:70: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:81: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:81: SEMANTIC ANALYZER: Found local variable usage 'same'! Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:81: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:81: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:65: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:65: SEMANTIC ANALYZER: Defined method 'compareArraysFor'. Symbol node: Method 'compareArraysFor': type = 'bool', adr = 0, level = 2
  Formal parameter 'a': type = 'array of int', adr = 0, level = 1
  Formal parameter 'b': type = 'array of int', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'j': type = 'int', adr = 3, level = 1
  Variable 'same': type = 'bool', adr = 4, level = 1
  Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:86: SEMANTIC ANALYZER: Defined int array formal parameter 'a'. Symbol node: Formal parameter 'a': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:86: SEMANTIC ANALYZER: Defined int array formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'array of int', adr = 1, level = 1
DEBUG - generator_B.mj:87: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:87: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:87: SEMANTIC ANALYZER: Defined int variable 'itA'. Symbol node: Variable 'itA': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:87: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:87: SEMANTIC ANALYZER: Defined int variable 'itB'. Symbol node: Variable 'itB': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:88: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:88: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:88: SEMANTIC ANALYZER: Defined bool variable 'same'. Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:88: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:88: SEMANTIC ANALYZER: Defined bool variable 'found'. Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:90: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:90: SEMANTIC ANALYZER: Found local variable usage 'same'! Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:90: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:90: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:90: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:91: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:91: SEMANTIC ANALYZER: Found formal parameter usage 'a'! Symbol node: Formal parameter 'a': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:91: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:92: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:92: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:92: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:92: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:92: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:93: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:93: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'array of int', adr = 1, level = 1
DEBUG - generator_B.mj:93: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:94: SEMANTIC ANALYZER: Found local variable usage 'itA'! Symbol node: Variable 'itA': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:94: SEMANTIC ANALYZER: Found local variable usage 'itB'! Symbol node: Variable 'itB': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:94: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:95: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:95: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:95: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:95: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:95: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:93: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:98: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:99: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:99: SEMANTIC ANALYZER: Found local variable usage 'same'! Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:99: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:99: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:99: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:91: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:102: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:102: SEMANTIC ANALYZER: Found local variable usage 'same'! Symbol node: Variable 'same': type = 'bool', adr = 4, level = 1
DEBUG - generator_B.mj:102: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:102: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:86: SEMANTIC ANALYZER: Defined method 'compareArraysForEach'. Symbol node: Method 'compareArraysForEach': type = 'bool', adr = 0, level = 2
  Formal parameter 'a': type = 'array of int', adr = 0, level = 1
  Formal parameter 'b': type = 'array of int', adr = 1, level = 1
  Variable 'itA': type = 'int', adr = 2, level = 1
  Variable 'itB': type = 'int', adr = 3, level = 1
  Variable 'same': type = 'bool', adr = 4, level = 1
  Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:105: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:105: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:105: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:105: SEMANTIC ANALYZER: Defined bool formal parameter 'b'. Symbol node: Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:106: SEMANTIC ANALYZER: Found formal parameter usage 'b'! Symbol node: Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - generator_B.mj:106: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:106: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:107: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:109: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:106: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:105: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:105: SEMANTIC ANALYZER: Defined method 'printBool'. Symbol node: Method 'printBool': type = 'void', adr = 0, level = 1
  Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:113: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:113: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:113: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:113: SEMANTIC ANALYZER: Defined int formal parameter 'n'. Symbol node: Formal parameter 'n': type = 'int', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:115: SEMANTIC ANALYZER: Found formal parameter usage 'n'! Symbol node: Formal parameter 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:116: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:116: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:117: SEMANTIC ANALYZER: Found formal parameter usage 'n'! Symbol node: Formal parameter 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:118: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:118: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:120: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:120: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:117: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:115: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:122: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:122: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:122: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:122: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:113: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:113: SEMANTIC ANALYZER: Defined method 'conditionalPrint'. Symbol node: Method 'conditionalPrint': type = 'void', adr = 0, level = 1
  Formal parameter 'n': type = 'int', adr = 0, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:125: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:126: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:126: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:126: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:126: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:126: SEMANTIC ANALYZER: Defined int variable 'n'. Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:128: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:128: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:128: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:129: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:129: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:129: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:129: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:130: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:130: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:130: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:132: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:132: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:132: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:133: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:133: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:133: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:133: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:133: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:134: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:134: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:136: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:136: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:136: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:137: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:137: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:137: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:137: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:32: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:137: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:138: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:138: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:138: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:140: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:140: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:140: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:141: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:141: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:141: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:141: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:34: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:141: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:141: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:142: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:142: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:142: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:144: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:144: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:144: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:145: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:145: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:145: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:145: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:145: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:145: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:146: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:146: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:146: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:148: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:148: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:148: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:149: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:149: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:149: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:150: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:149: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:151: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:151: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:151: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:153: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:153: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:153: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:153: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:153: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:154: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:154: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:154: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:155: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:156: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:157: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:157: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:156: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:155: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:158: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:158: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:158: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:158: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:160: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:160: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:160: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:160: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:11: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:160: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:161: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:161: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:162: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:162: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:163: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:163: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:27: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:164: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:164: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:164: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:164: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:164: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:163: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:162: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:161: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:165: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:36: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:165: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:165: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:46: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:125: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:125: SEMANTIC ANALYZER: Defined method 'iftest'. Symbol node: Method 'iftest': type = 'void', adr = 0, level = 0
  Variable 'i': type = 'int', adr = 0, level = 1
  Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:168: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:168: SEMANTIC ANALYZER: Defined int formal parameter 'elem'. Symbol node: Formal parameter 'elem': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:169: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:169: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:169: SEMANTIC ANALYZER: Defined bool variable 'found'. Symbol node: Variable 'found': type = 'bool', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:171: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:171: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 2, level = 1
DEBUG - generator_B.mj:171: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:171: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:171: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:173: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:173: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:173: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:173: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:40: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:173: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:173: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:174: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:174: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:174: SEMANTIC ANALYZER: Found array element access 'globalI[globalI]'! Symbol node: Array element 'globalI[globalI]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:174: SEMANTIC ANALYZER: Found formal parameter usage 'elem'! Symbol node: Formal parameter 'elem': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:175: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:175: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 2, level = 1
DEBUG - generator_B.mj:175: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:175: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:175: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:174: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:173: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:110: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:110: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:122: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:122: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:122: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:180: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:134: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:180: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:180: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:150: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:181: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:181: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 2, level = 1
DEBUG - generator_B.mj:181: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:181: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:168: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:168: SEMANTIC ANALYZER: Defined method 'findElementFor'. Symbol node: Method 'findElementFor': type = 'bool', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'elem': type = 'int', adr = 1, level = 1
  Variable 'found': type = 'bool', adr = 2, level = 1
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:184: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:184: SEMANTIC ANALYZER: Defined int formal parameter 'elem'. Symbol node: Formal parameter 'elem': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:185: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:185: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:185: SEMANTIC ANALYZER: Defined int variable 'it'. Symbol node: Variable 'it': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:186: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:186: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:186: SEMANTIC ANALYZER: Defined bool variable 'found'. Symbol node: Variable 'found': type = 'bool', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:188: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:188: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 3, level = 1
DEBUG - generator_B.mj:188: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:188: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:188: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:190: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:190: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:190: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:191: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:191: SEMANTIC ANALYZER: Found formal parameter usage 'elem'! Symbol node: Formal parameter 'elem': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:192: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:192: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 3, level = 1
DEBUG - generator_B.mj:192: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:192: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:192: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:191: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:190: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:197: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:197: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:197: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:85: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:85: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:85: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:198: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:198: SEMANTIC ANALYZER: Found local variable usage 'found'! Symbol node: Variable 'found': type = 'bool', adr = 3, level = 1
DEBUG - generator_B.mj:198: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:198: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:184: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:184: SEMANTIC ANALYZER: Defined method 'findElementForEach'. Symbol node: Method 'findElementForEach': type = 'bool', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'elem': type = 'int', adr = 1, level = 1
  Variable 'it': type = 'int', adr = 2, level = 1
  Variable 'found': type = 'bool', adr = 3, level = 1
DEBUG - generator_B.mj:201: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:201: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_B.mj:201: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:201: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:201: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:201: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:202: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:202: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:202: SEMANTIC ANALYZER: Defined int variable 'i'. Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:202: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:202: SEMANTIC ANALYZER: Defined int variable 'count'. Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:204: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:204: SEMANTIC ANALYZER: Found local variable usage 'count'! Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:204: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:204: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:204: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:205: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:205: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:205: SEMANTIC ANALYZER: Found global method call 'len'! Symbol node: Method 'len': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of none', adr = 0, level = 1
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:205: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:205: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'ForStatementHeader'.
INFO  - generator_B.mj:205: SEMANTIC ANALYZER: Found for loop 'none'!
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:207: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:207: SEMANTIC ANALYZER: Found local variable usage 'i'! Symbol node: Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:207: SEMANTIC ANALYZER: Found array element access 'i[i]'! Symbol node: Array element 'i[i]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:207: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:208: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:208: SEMANTIC ANALYZER: Found local variable usage 'count'! Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:208: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:205: SEMANTIC ANALYZER: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:210: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:210: SEMANTIC ANALYZER: Found local variable usage 'count'! Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:210: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:210: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:201: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:201: SEMANTIC ANALYZER: Defined method 'countOddFor'. Symbol node: Method 'countOddFor': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'i': type = 'int', adr = 1, level = 1
  Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:213: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:213: SEMANTIC ANALYZER: Visited node: 'ReturnType'.
DEBUG - generator_B.mj:213: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:213: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:213: SEMANTIC ANALYZER: Visited node: 'FormalParameter'.
INFO  - generator_B.mj:213: SEMANTIC ANALYZER: Defined int array formal parameter 'arr'. Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:214: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:214: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:214: SEMANTIC ANALYZER: Defined int variable 'it'. Symbol node: Variable 'it': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:214: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:214: SEMANTIC ANALYZER: Defined int variable 'count'. Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:216: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:216: SEMANTIC ANALYZER: Found local variable usage 'count'! Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:216: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:216: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:216: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:217: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:217: SEMANTIC ANALYZER: Found formal parameter usage 'arr'! Symbol node: Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
DEBUG - generator_B.mj:217: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:219: SEMANTIC ANALYZER: Found local variable usage 'it'! Symbol node: Variable 'it': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'MultipleFactorsTerm'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:16: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - SEMANTIC ANALYZER: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:219: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:220: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:220: SEMANTIC ANALYZER: Found local variable usage 'count'! Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:220: SEMANTIC ANALYZER: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:217: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:222: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:222: SEMANTIC ANALYZER: Found local variable usage 'count'! Symbol node: Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:222: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:222: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:9: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:213: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:213: SEMANTIC ANALYZER: Defined method 'countOddForEach'. Symbol node: Method 'countOddForEach': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'it': type = 'int', adr = 1, level = 1
  Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'ReturnVoid'.
DEBUG - generator_B.mj:225: SEMANTIC ANALYZER: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:226: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:226: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:226: SEMANTIC ANALYZER: Defined int variable 'n'. Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:226: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:226: SEMANTIC ANALYZER: Defined int variable 'e'. Symbol node: Variable 'e': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:226: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:226: SEMANTIC ANALYZER: Defined int array variable 'arr'. Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:226: SEMANTIC ANALYZER: Visited node: 'LocalVariable'.
INFO  - generator_B.mj:226: SEMANTIC ANALYZER: Defined int array variable 'arrCopy'. Symbol node: Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - SEMANTIC ANALYZER: Visited node: 'MethodStatementListStart'.
DEBUG - generator_B.mj:228: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:228: SEMANTIC ANALYZER: Found global method call 'iftest'! Symbol node: Method 'iftest': type = 'void', adr = 0, level = 0
  Variable 'i': type = 'int', adr = 0, level = 1
  Variable 'n': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:228: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:228: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:230: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:110: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:110: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:110: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:231: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:231: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:231: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:232: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:232: SEMANTIC ANALYZER: Found global method call 'conditionalPrint'! Symbol node: Method 'conditionalPrint': type = 'void', adr = 0, level = 1
  Formal parameter 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:232: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:232: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:232: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:232: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:232: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:25: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:232: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:234: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:235: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:235: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:235: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:236: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:15: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:12: SEMANTIC ANALYZER: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:42: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:54: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:66: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:237: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:78: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:13: SEMANTIC ANALYZER: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:236: SEMANTIC ANALYZER: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:241: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:241: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:13: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:13: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:241: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:243: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:243: SEMANTIC ANALYZER: Found global method call 'readArray'! Symbol node: Method 'readArray': type = 'void', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'i': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:243: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:243: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:243: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:243: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:243: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:243: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:244: SEMANTIC ANALYZER: Found global method call 'printArray'! Symbol node: Method 'printArray': type = 'void', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'inline': type = 'bool', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'it': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:244: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:244: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:246: SEMANTIC ANALYZER: Found local variable usage 'arrCopy'! Symbol node: Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'Type'.
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:246: SEMANTIC ANALYZER: Found local variable usage 'n'! Symbol node: Variable 'n': type = 'int', adr = 0, level = 1
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'AllocatorFactor'.
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:17: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:246: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:247: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:247: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:247: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:247: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:247: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:247: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:247: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:248: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:248: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:248: SEMANTIC ANALYZER: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:249: SEMANTIC ANALYZER: Found local variable usage 'arrCopy'! Symbol node: Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:249: SEMANTIC ANALYZER: Found global variable usage 'globalI'! Symbol node: Variable 'globalI': type = 'int', adr = 0, level = 0
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:29: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:20: SEMANTIC ANALYZER: Visited node: 'AssignmentExpression'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'ElementAccessDesignator'.
INFO  - generator_B.mj:249: SEMANTIC ANALYZER: Found array element access 'globalI[globalI += 1]'! Symbol node: Array element 'globalI[globalI += 1]': type = 'int', adr = -1, level = -1
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:249: SEMANTIC ANALYZER: Found global variable usage 'globalIt'! Symbol node: Variable 'globalIt': type = 'int', adr = 1, level = 0
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:249: SEMANTIC ANALYZER: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:248: SEMANTIC ANALYZER: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:252: SEMANTIC ANALYZER: Found global method call 'sortArray'! Symbol node: Method 'sortArray': type = 'void', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'asc': type = 'bool', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'j': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:252: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:22: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:252: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:253: SEMANTIC ANALYZER: Found global method call 'printArray'! Symbol node: Method 'printArray': type = 'void', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'inline': type = 'bool', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'it': type = 'int', adr = 3, level = 1
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:253: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:19: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:23: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:253: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:255: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:255: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:256: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:257: SEMANTIC ANALYZER: Found global method call 'printBool'! Symbol node: Method 'printBool': type = 'void', adr = 0, level = 1
  Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:257: SEMANTIC ANALYZER: Found global method call 'compareArraysFor'! Symbol node: Method 'compareArraysFor': type = 'bool', adr = 0, level = 2
  Formal parameter 'a': type = 'array of int', adr = 0, level = 1
  Formal parameter 'b': type = 'array of int', adr = 1, level = 1
  Variable 'i': type = 'int', adr = 2, level = 1
  Variable 'j': type = 'int', adr = 3, level = 1
  Variable 'same': type = 'bool', adr = 4, level = 1
  Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:257: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:35: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:257: SEMANTIC ANALYZER: Found local variable usage 'arrCopy'! Symbol node: Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:257: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:257: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:57: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:258: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:259: SEMANTIC ANALYZER: Found global method call 'printBool'! Symbol node: Method 'printBool': type = 'void', adr = 0, level = 1
  Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:259: SEMANTIC ANALYZER: Found global method call 'compareArraysForEach'! Symbol node: Method 'compareArraysForEach': type = 'bool', adr = 0, level = 2
  Formal parameter 'a': type = 'array of int', adr = 0, level = 1
  Formal parameter 'b': type = 'array of int', adr = 1, level = 1
  Variable 'itA': type = 'int', adr = 2, level = 1
  Variable 'itB': type = 'int', adr = 3, level = 1
  Variable 'same': type = 'bool', adr = 4, level = 1
  Variable 'found': type = 'bool', adr = 5, level = 1
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:259: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:259: SEMANTIC ANALYZER: Found local variable usage 'arrCopy'! Symbol node: Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:259: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:259: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:61: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:61: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:61: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:261: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:262: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:262: SEMANTIC ANALYZER: Found local variable usage 'e'! Symbol node: Variable 'e': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:262: SEMANTIC ANALYZER: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:264: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:265: SEMANTIC ANALYZER: Found global method call 'printBool'! Symbol node: Method 'printBool': type = 'void', adr = 0, level = 1
  Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:265: SEMANTIC ANALYZER: Found global method call 'findElementFor'! Symbol node: Method 'findElementFor': type = 'bool', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'elem': type = 'int', adr = 1, level = 1
  Variable 'found': type = 'bool', adr = 2, level = 1
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:265: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:33: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:265: SEMANTIC ANALYZER: Found local variable usage 'e'! Symbol node: Variable 'e': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:265: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:265: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:49: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:49: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:49: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:266: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:267: SEMANTIC ANALYZER: Found global method call 'printBool'! Symbol node: Method 'printBool': type = 'void', adr = 0, level = 1
  Formal parameter 'b': type = 'bool', adr = 0, level = 1
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:267: SEMANTIC ANALYZER: Found global method call 'findElementForEach'! Symbol node: Method 'findElementForEach': type = 'bool', adr = 0, level = 2
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Formal parameter 'elem': type = 'int', adr = 1, level = 1
  Variable 'it': type = 'int', adr = 2, level = 1
  Variable 'found': type = 'bool', adr = 3, level = 1
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:267: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:37: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:267: SEMANTIC ANALYZER: Found local variable usage 'e'! Symbol node: Variable 'e': type = 'int', adr = 1, level = 1
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:41: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:41: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:41: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:18: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:267: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:267: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:53: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:53: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:53: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:269: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:270: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:270: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:272: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:273: SEMANTIC ANALYZER: Found global method call 'countOddFor'! Symbol node: Method 'countOddFor': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'i': type = 'int', adr = 1, level = 1
  Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:273: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:273: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:273: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:39: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:26: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:38: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:50: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:62: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:74: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:86: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:274: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:98: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:275: SEMANTIC ANALYZER: Found global method call 'countOddForEach'! Symbol node: Method 'countOddForEach': type = 'int', adr = 0, level = 1
  Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
  Variable 'it': type = 'int', adr = 1, level = 1
  Variable 'count': type = 'int', adr = 2, level = 1
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'MethodCallHeader'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:275: SEMANTIC ANALYZER: Found local variable usage 'arr'! Symbol node: Variable 'arr': type = 'array of int', adr = 2, level = 1
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:30: SEMANTIC ANALYZER: Visited node: 'ActualParameter'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'MethodCallFactor'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:14: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'IdentifierDesignator'.
INFO  - generator_B.mj:275: SEMANTIC ANALYZER: Found symbolic constant usage 'eol'! Symbol node: Constant 'eol': type = 'char', adr = 10, level = 0
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:275: SEMANTIC ANALYZER: Visited node: 'SingleFactorTerm'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'LeftExpression'.
DEBUG - generator_B.mj:43: SEMANTIC ANALYZER: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:225: SEMANTIC ANALYZER: Visited node: 'MethodDeclaration'.
INFO  - generator_B.mj:225: SEMANTIC ANALYZER: Defined method 'main'. Symbol node: Method 'main': type = 'void', adr = 0, level = 0
  Variable 'n': type = 'int', adr = 0, level = 1
  Variable 'e': type = 'int', adr = 1, level = 1
  Variable 'arr': type = 'array of int', adr = 2, level = 1
  Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - generator_B.mj:8: SEMANTIC ANALYZER: Visited node: 'Program'.
INFO  - generator_B.mj:8: SEMANTIC ANALYZER: Defined program 'level_b_code_generation'. Symbol node: Program 'level_b_code_generation': type = 'none', adr = 0, level = 1
  Variable 'globalI': type = 'int', adr = 0, level = 0
  Variable 'globalIt': type = 'int', adr = 1, level = 0
  Method 'readArray': type = 'void', adr = 0, level = 1
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Variable 'i': type = 'int', adr = 1, level = 1
  Method 'printArray': type = 'void', adr = 0, level = 2
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Formal parameter 'inline': type = 'bool', adr = 1, level = 1
    Variable 'i': type = 'int', adr = 2, level = 1
    Variable 'it': type = 'int', adr = 3, level = 1
  Method 'swap': type = 'void', adr = 0, level = 3
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Formal parameter 'i': type = 'int', adr = 1, level = 1
    Formal parameter 'j': type = 'int', adr = 2, level = 1
    Variable 'tmp': type = 'int', adr = 3, level = 1
  Method 'sortArray': type = 'void', adr = 0, level = 2
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Formal parameter 'asc': type = 'bool', adr = 1, level = 1
    Variable 'i': type = 'int', adr = 2, level = 1
    Variable 'j': type = 'int', adr = 3, level = 1
  Method 'compareArraysFor': type = 'bool', adr = 0, level = 2
    Formal parameter 'a': type = 'array of int', adr = 0, level = 1
    Formal parameter 'b': type = 'array of int', adr = 1, level = 1
    Variable 'i': type = 'int', adr = 2, level = 1
    Variable 'j': type = 'int', adr = 3, level = 1
    Variable 'same': type = 'bool', adr = 4, level = 1
    Variable 'found': type = 'bool', adr = 5, level = 1
  Method 'compareArraysForEach': type = 'bool', adr = 0, level = 2
    Formal parameter 'a': type = 'array of int', adr = 0, level = 1
    Formal parameter 'b': type = 'array of int', adr = 1, level = 1
    Variable 'itA': type = 'int', adr = 2, level = 1
    Variable 'itB': type = 'int', adr = 3, level = 1
    Variable 'same': type = 'bool', adr = 4, level = 1
    Variable 'found': type = 'bool', adr = 5, level = 1
  Method 'printBool': type = 'void', adr = 0, level = 1
    Formal parameter 'b': type = 'bool', adr = 0, level = 1
  Method 'conditionalPrint': type = 'void', adr = 0, level = 1
    Formal parameter 'n': type = 'int', adr = 0, level = 1
  Method 'iftest': type = 'void', adr = 0, level = 0
    Variable 'i': type = 'int', adr = 0, level = 1
    Variable 'n': type = 'int', adr = 1, level = 1
  Method 'findElementFor': type = 'bool', adr = 0, level = 2
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Formal parameter 'elem': type = 'int', adr = 1, level = 1
    Variable 'found': type = 'bool', adr = 2, level = 1
  Method 'findElementForEach': type = 'bool', adr = 0, level = 2
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Formal parameter 'elem': type = 'int', adr = 1, level = 1
    Variable 'it': type = 'int', adr = 2, level = 1
    Variable 'found': type = 'bool', adr = 3, level = 1
  Method 'countOddFor': type = 'int', adr = 0, level = 1
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Variable 'i': type = 'int', adr = 1, level = 1
    Variable 'count': type = 'int', adr = 2, level = 1
  Method 'countOddForEach': type = 'int', adr = 0, level = 1
    Formal parameter 'arr': type = 'array of int', adr = 0, level = 1
    Variable 'it': type = 'int', adr = 1, level = 1
    Variable 'count': type = 'int', adr = 2, level = 1
  Method 'main': type = 'void', adr = 0, level = 0
    Variable 'n': type = 'int', adr = 0, level = 1
    Variable 'e': type = 'int', adr = 1, level = 1
    Variable 'arr': type = 'array of int', adr = 2, level = 1
    Variable 'arrCopy': type = 'array of int', adr = 3, level = 1
DEBUG - generator_B.mj:8: CODE GENERATOR: Visited node: 'ProgramHeader'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'Variable'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:40: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:52: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:52: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:64: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:64: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:76: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:76: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:21: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_B.mj:31: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:31: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:31: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:31: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:44: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:44: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:68: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:68: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:80: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:80: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:39: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:37: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:37: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:21: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:45: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:21: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:47: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'MultipleTermsExpression'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:31: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:44: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:51: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:44: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:44: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:60: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:75: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:60: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:44: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:56: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:55: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:65: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:69: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:69: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:69: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:69: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - generator_B.mj:71: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:71: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:71: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:71: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:73: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:72: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:77: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:77: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:77: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:77: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:78: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:78: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:78: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:78: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:70: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:81: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:81: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:65: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:90: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:90: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:90: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:90: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:91: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:91: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:91: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:92: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:92: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:92: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:92: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:94: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:94: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:94: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:94: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:94: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:94: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:95: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:95: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:95: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:95: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:93: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:99: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:99: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:99: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:99: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:91: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:91: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:91: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:102: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:102: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:105: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:106: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:106: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SimpleConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:106: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:107: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_B.mj:109: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:109: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:66: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:106: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:105: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:113: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:115: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:115: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:115: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:115: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:116: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:117: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:117: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:117: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:117: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:118: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_B.mj:120: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:117: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:115: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:122: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:122: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:113: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:125: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:128: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:129: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:130: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:130: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:130: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:130: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:130: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:130: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:132: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:133: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:136: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:32: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:137: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:138: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:138: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:138: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:138: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:138: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:138: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:140: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:34: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:141: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:142: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:142: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:142: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:142: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:142: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:142: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:144: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'MultipleFactsConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'MultipleTermsCondition'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:145: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:146: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:146: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:146: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:146: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:146: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:146: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:148: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_B.mj:150: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:150: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:150: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:150: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:149: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:151: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:151: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:151: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:151: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:151: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:151: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:153: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:153: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:153: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:153: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:154: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:154: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:155: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:155: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:155: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:155: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:156: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:156: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:156: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:156: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:156: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_B.mj:157: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:156: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:155: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:158: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:158: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:160: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:160: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:160: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:11: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:160: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:27: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ElseStatementStart'.
DEBUG - generator_B.mj:164: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:164: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:164: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:164: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:163: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:162: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:161: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:165: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:165: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:165: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:165: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:36: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:165: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:165: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:46: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:125: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:168: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:171: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:171: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:171: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:171: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:40: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:175: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:175: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:175: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:175: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:174: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:173: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:110: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:110: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:122: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:122: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:134: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:180: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:150: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:150: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:181: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:181: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:168: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:184: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:188: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:188: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:188: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:188: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:191: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:191: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:191: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:191: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:191: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:192: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:192: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:192: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:192: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'BreakStatement'.
DEBUG - generator_B.mj:191: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:190: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:197: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:85: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:85: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:198: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:198: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:184: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:201: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:204: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:204: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:204: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:204: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForStatementHeaderStart'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleCondition'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'SingleDesignatorStatement'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'ForStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:28: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:207: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:208: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:208: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'ForStatement'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:205: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:210: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:210: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:201: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:213: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:216: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:216: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:216: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:216: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'MultipleFactorsTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:24: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:16: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - CODE GENERATOR: Visited node: 'ContinueStatement'.
DEBUG - generator_B.mj:219: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:220: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:220: CODE GENERATOR: Visited node: 'IncrementDesignatorStatement'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:217: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:222: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:222: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:9: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:213: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:225: CODE GENERATOR: Visited node: 'MethodHeader'.
DEBUG - generator_B.mj:228: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:228: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:230: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:110: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:110: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:231: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:231: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:232: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:232: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:232: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:25: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:232: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:234: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:234: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:234: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:234: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:235: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:235: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - CODE GENERATOR: Visited node: 'IfStatementHeaderStart'.
DEBUG - generator_B.mj:236: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:236: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:236: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:15: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'ComplexConditionFact'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleFactConditionTerm'.
DEBUG - generator_B.mj:12: CODE GENERATOR: Visited node: 'SingleTermCondition'.
DEBUG - generator_B.mj:236: CODE GENERATOR: Visited node: 'IfStatementHeader'.
DEBUG - generator_B.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:42: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:54: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:66: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:66: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:237: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:78: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:78: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:13: CODE GENERATOR: Visited node: 'ReturnStatement'.
DEBUG - generator_B.mj:236: CODE GENERATOR: Visited node: 'IfOptElseStatement'.
DEBUG - generator_B.mj:241: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:241: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:241: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:241: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:241: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_B.mj:13: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:241: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:243: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:243: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:243: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:243: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:244: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:244: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:244: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:244: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:244: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:246: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:246: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:246: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:246: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:246: CODE GENERATOR: Visited node: 'AllocatorFactor'.
DEBUG - generator_B.mj:17: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:246: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:247: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:247: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:247: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:247: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:247: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - CODE GENERATOR: Visited node: 'ForEachStatementHeaderStart'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'ForEachStatementHeader'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:29: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:20: CODE GENERATOR: Visited node: 'AssignmentExpression'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'ElementAccessDesignator'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'AssignmentHeader'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:249: CODE GENERATOR: Visited node: 'AssignmentDesignatorStatement'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'ForEachStatement'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:248: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:252: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:252: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:252: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:252: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:22: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:252: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:253: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:253: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:253: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:19: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:253: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:23: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:253: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:255: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:256: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:35: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:257: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:57: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:258: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:259: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:61: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:61: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:261: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:262: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:262: CODE GENERATOR: Visited node: 'ReadStatement'.
DEBUG - generator_B.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:264: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:33: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:265: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:49: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:49: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:266: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:37: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:41: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:18: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:267: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:53: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:53: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:269: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:270: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:272: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:273: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:273: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:273: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:273: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:273: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:273: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:39: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:39: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:26: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:38: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:50: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:62: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:74: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:86: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:274: CODE GENERATOR: Visited node: 'ConstantFactor'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:98: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:275: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:275: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:275: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:30: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:275: CODE GENERATOR: Visited node: 'MethodCall'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:14: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:275: CODE GENERATOR: Visited node: 'IdentifierDesignator'.
DEBUG - generator_B.mj:275: CODE GENERATOR: Visited node: 'DesignatorFactor'.
DEBUG - generator_B.mj:43: CODE GENERATOR: Visited node: 'SingleTermExpression'.
DEBUG - generator_B.mj:43: CODE GENERATOR: Visited node: 'PrintStatement'.
DEBUG - generator_B.mj:225: CODE GENERATOR: Visited node: 'MethodDeclaration'.
DEBUG - generator_B.mj:8: CODE GENERATOR: Visited node: 'Program'.
