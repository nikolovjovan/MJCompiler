// level C error recovery test
// - abstract class method declaration (ignore until ';')
// - class base type declaration (ignore until '{' or 'extends')
program error_c
    abstract class A {
        private int a;
        {
            // valid abstract method
            public abstract int test();

            // invalid abstract method; no parentheses
            public abstract char badabstractmethoddecl;

            // invalid abstract method; no type, no parentheses
            public abstract badabstractmethoddecl;

            // invalid abstract method; no type, no parentheses, no semicolon
            private abstract badabstractmethoddeclnosemi

            // valid abstract method; should be eaten up until semicolon because of the previous invalid method
            protected abstract int valid_abstract_method(int c);

            // valid method
            public int get_a() { return a; }
        }
    }

    class B extends A {
    }

    // invalid class base type declaration until 'extends'
    class C badextends extends B {}

    // invalid class base type declaration until '{'
    class D extends ;:trash:; {}
{
    void main()
        A a, b, c;
    {
        a = new B;
        b = new C;
        c = new D;
    }
}