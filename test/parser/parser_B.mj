// level B syntax test
program level_b_syntax_test
    int arr[];
{
    // program function definition test
    int f1() {

    }

    char f2(int a, int b) {
        return a - b;
    }

    bool f3(int a, int b) {
        if (a == b) return true;
        return false;
    }

    void f4()
        int var1;
    {

    }

    char f5(int p1)
        int var1[];
        char var2;
    {

    }

    void f6(int p1, char p2)
        int var1, var2;
        char var3, var4[];
        bool var5;
    {

    }

    const int c = 5;

    int f(int x) {
        return x + 6;
    }

    void statement_test()
        int x, y, z, i;
        char arr[];
    {
        // initialization
        x = 5;
        y = 6;
        z = 1;
        arr = new char[18 / 2]; // array initialization test

        // assignment and array access
        x = arr[3 + 1 + z];

        // arithmetic operations
        z = x + y;
        z = x - y;
        z = x * y;
        z = x / y;
        z = x % y;

        // complex arithmetic
        z = (x + y) * 3 - 12 / 2 + z % 2;

        // increment, decrement
        x++;
        y--;

        // combined arithmetic and assignment operators
        z += 1;
        z -= 2;
        z *= x + y;
        z /= x - 4;
        z %= 12 * y;

        // function call test
        z = f(x);

        // read and print functions
        read(x);
        print(y);

        // if statements and conditionals
        if (x + 1 > y) { // basic if, no else
            x += 5;
        }
        if (y % 2 != z && x > 5 || x == 6) { // complex if, else precedence test
            z = 2;
        } else if (true && false || true)
            y = 15;
        else x = -6; // should match to previous if

        // for loops
        for (i = 6; i < 16 && i < z; i++) {
            print(i);
            // break and continue
            if (x == 5) break;
            if (y < 6) continue;
        }

        // foreach loop
        foreach (x : arr) {
            print(x);
        }

        // class element access
        x = a.b.c;
    }

    // invalid main return type
    int main() {
        return 0;
    }

    void main()
        int x, i;
    {
        arr = new int[2];
        arr[0] = 5;
        arr[1] = 2;
        x = 0;

        x += 2;
        arr[0] *= x -= 1;

        foreach (i : arr) print(i);
    }
}