DEBUG - parser_recovery_C.mj:4:1: LEXER: Found symbol: '#2' with value: 'program'
DEBUG - parser_recovery_C.mj:4:9: LEXER: Found symbol: '#55' with value: 'error_c'
DEBUG - parser_recovery_C.mj:5:5: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - parser_recovery_C.mj:5:14: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - parser_recovery_C.mj:5:20: LEXER: Found symbol: '#55' with value: 'A'
DEBUG - parser_recovery_C.mj:5:22: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:6:9: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - parser_recovery_C.mj:6:17: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - parser_recovery_C.mj:6:21: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - parser_recovery_C.mj:6:22: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:7:9: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:9:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - parser_recovery_C.mj:9:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - parser_recovery_C.mj:9:29: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - parser_recovery_C.mj:9:33: LEXER: Found symbol: '#55' with value: 'test'
DEBUG - parser_recovery_C.mj:9:37: LEXER: Found symbol: '#42' with value: '('
DEBUG - parser_recovery_C.mj:9:38: LEXER: Found symbol: '#43' with value: ')'
DEBUG - parser_recovery_C.mj:9:39: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:12:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - parser_recovery_C.mj:12:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - parser_recovery_C.mj:12:29: LEXER: Found symbol: '#55' with value: 'char'
DEBUG - parser_recovery_C.mj:12:34: LEXER: Found symbol: '#55' with value: 'badabstractmethoddecl'
DEBUG - parser_recovery_C.mj:12:55: LEXER: Found symbol: '#49' with value: ';'
ERROR - parser_recovery_C.mj:12:55: PARSER: Syntax error!
DEBUG - parser_recovery_C.mj:15:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - parser_recovery_C.mj:15:20: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - parser_recovery_C.mj:15:29: LEXER: Found symbol: '#55' with value: 'badabstractmethoddecl'
WARN  - parser_recovery_C.mj:12:55: PARSER: Invalid abstract class method declaration! Parsing continued...
DEBUG - parser_recovery_C.mj:15:50: LEXER: Found symbol: '#49' with value: ';'
ERROR - parser_recovery_C.mj:15:50: PARSER: Syntax error!
DEBUG - parser_recovery_C.mj:18:13: LEXER: Found symbol: '#20' with value: 'private'
DEBUG - parser_recovery_C.mj:18:21: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - parser_recovery_C.mj:18:30: LEXER: Found symbol: '#55' with value: 'badabstractmethoddeclnosemi'
WARN  - parser_recovery_C.mj:15:50: PARSER: Invalid abstract class method declaration! Parsing continued...
DEBUG - parser_recovery_C.mj:21:13: LEXER: Found symbol: '#19' with value: 'protected'
ERROR - parser_recovery_C.mj:21:13: PARSER: Syntax error!
DEBUG - parser_recovery_C.mj:21:23: LEXER: Found symbol: '#5' with value: 'abstract'
DEBUG - parser_recovery_C.mj:21:32: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - parser_recovery_C.mj:21:36: LEXER: Found symbol: '#55' with value: 'valid_abstract_method'
DEBUG - parser_recovery_C.mj:21:57: LEXER: Found symbol: '#42' with value: '('
DEBUG - parser_recovery_C.mj:21:58: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - parser_recovery_C.mj:21:62: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - parser_recovery_C.mj:21:63: LEXER: Found symbol: '#43' with value: ')'
DEBUG - parser_recovery_C.mj:21:64: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:24:13: LEXER: Found symbol: '#18' with value: 'public'
DEBUG - parser_recovery_C.mj:24:20: LEXER: Found symbol: '#55' with value: 'int'
DEBUG - parser_recovery_C.mj:24:24: LEXER: Found symbol: '#55' with value: 'get_a'
WARN  - parser_recovery_C.mj:21:13: PARSER: Invalid abstract class method declaration! Parsing continued...
DEBUG - parser_recovery_C.mj:24:29: LEXER: Found symbol: '#42' with value: '('
DEBUG - parser_recovery_C.mj:24:30: LEXER: Found symbol: '#43' with value: ')'
DEBUG - parser_recovery_C.mj:24:32: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:24:34: LEXER: Found symbol: '#12' with value: 'return'
DEBUG - parser_recovery_C.mj:24:41: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - parser_recovery_C.mj:24:42: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:24:44: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:25:9: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:26:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:28:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - parser_recovery_C.mj:28:11: LEXER: Found symbol: '#55' with value: 'B'
DEBUG - parser_recovery_C.mj:28:13: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - parser_recovery_C.mj:28:21: LEXER: Found symbol: '#55' with value: 'A'
DEBUG - parser_recovery_C.mj:28:23: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:29:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:32:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - parser_recovery_C.mj:32:11: LEXER: Found symbol: '#55' with value: 'C'
DEBUG - parser_recovery_C.mj:32:13: LEXER: Found symbol: '#55' with value: 'badextends'
ERROR - parser_recovery_C.mj:32:13: PARSER: Syntax error!
DEBUG - parser_recovery_C.mj:32:24: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - parser_recovery_C.mj:32:32: LEXER: Found symbol: '#55' with value: 'B'
DEBUG - parser_recovery_C.mj:32:34: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:32:35: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:35:5: LEXER: Found symbol: '#4' with value: 'class'
DEBUG - parser_recovery_C.mj:35:11: LEXER: Found symbol: '#55' with value: 'D'
WARN  - parser_recovery_C.mj:32:13: PARSER: Invalid class base type declaration! Parsing continued...
DEBUG - parser_recovery_C.mj:35:13: LEXER: Found symbol: '#15' with value: 'extends'
DEBUG - parser_recovery_C.mj:35:21: LEXER: Found symbol: '#49' with value: ';'
ERROR - parser_recovery_C.mj:35:21: PARSER: Syntax error!
DEBUG - parser_recovery_C.mj:35:22: LEXER: Found symbol: '#48' with value: ':'
DEBUG - parser_recovery_C.mj:35:23: LEXER: Found symbol: '#55' with value: 'trash'
DEBUG - parser_recovery_C.mj:35:28: LEXER: Found symbol: '#48' with value: ':'
DEBUG - parser_recovery_C.mj:35:29: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:35:31: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:35:32: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:36:1: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:37:5: LEXER: Found symbol: '#13' with value: 'void'
WARN  - parser_recovery_C.mj:35:21: PARSER: Invalid class base type declaration! Parsing continued...
DEBUG - parser_recovery_C.mj:37:10: LEXER: Found symbol: '#55' with value: 'main'
DEBUG - parser_recovery_C.mj:37:14: LEXER: Found symbol: '#42' with value: '('
DEBUG - parser_recovery_C.mj:37:15: LEXER: Found symbol: '#43' with value: ')'
DEBUG - parser_recovery_C.mj:38:9: LEXER: Found symbol: '#55' with value: 'A'
DEBUG - parser_recovery_C.mj:38:11: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - parser_recovery_C.mj:38:12: LEXER: Found symbol: '#50' with value: ','
DEBUG - parser_recovery_C.mj:38:14: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - parser_recovery_C.mj:38:15: LEXER: Found symbol: '#50' with value: ','
DEBUG - parser_recovery_C.mj:38:17: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - parser_recovery_C.mj:38:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:39:5: LEXER: Found symbol: '#46' with value: '{'
DEBUG - parser_recovery_C.mj:40:9: LEXER: Found symbol: '#55' with value: 'a'
DEBUG - parser_recovery_C.mj:40:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - parser_recovery_C.mj:40:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - parser_recovery_C.mj:40:17: LEXER: Found symbol: '#55' with value: 'B'
DEBUG - parser_recovery_C.mj:40:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:41:9: LEXER: Found symbol: '#55' with value: 'b'
DEBUG - parser_recovery_C.mj:41:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - parser_recovery_C.mj:41:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - parser_recovery_C.mj:41:17: LEXER: Found symbol: '#55' with value: 'C'
DEBUG - parser_recovery_C.mj:41:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:42:9: LEXER: Found symbol: '#55' with value: 'c'
DEBUG - parser_recovery_C.mj:42:11: LEXER: Found symbol: '#21' with value: '='
DEBUG - parser_recovery_C.mj:42:13: LEXER: Found symbol: '#9' with value: 'new'
DEBUG - parser_recovery_C.mj:42:17: LEXER: Found symbol: '#55' with value: 'D'
DEBUG - parser_recovery_C.mj:42:18: LEXER: Found symbol: '#49' with value: ';'
DEBUG - parser_recovery_C.mj:43:5: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:44:1: LEXER: Found symbol: '#47' with value: '}'
DEBUG - parser_recovery_C.mj:44:2: LEXER: Found symbol: '#0' with value: ''
DEBUG - parser_recovery_C.mj:44:2: LEXER: Found symbol: '#0' with value: ''
INFO  - Abstract syntax tree:
Program(
  ProgramHeader(
   error_c
  ) [ProgramHeader]
  MultipleProgramDeclarations(
    MultipleProgramDeclarations(
      MultipleProgramDeclarations(
        MultipleProgramDeclarations(
          NoProgramDeclarations(
          ) [NoProgramDeclarations]
          AbstractClassProgramDeclaration(
            AbstractClassDeclaration(
              AbstractClassHeader(
               A
                NoClassBaseType(
                ) [NoClassBaseType]
              ) [AbstractClassHeader]
              MultipleClassVarDeclarations(
                NoClassVarDeclarations(
                ) [NoClassVarDeclarations]
                ClassVarDeclaration(
                  PrivateAccessModifier(
                  ) [PrivateAccessModifier]
                  Type(
                   int
                  ) [Type]
                  SingleClassVariable(
                    ClassVariable(
                     a
                      NoArrayBrackets(
                      ) [NoArrayBrackets]
                    ) [ClassVariable]
                  ) [SingleClassVariable]
                ) [ClassVarDeclaration]
              ) [MultipleClassVarDeclarations]
              AbstractClassMethods(
                MultipleAbstractClassMethods(
                  MultipleAbstractClassMethods(
                    MultipleAbstractClassMethods(
                      MultipleAbstractClassMethods(
                        SingleAbstractClassMethod(
                          AbstractClassAbstractMethodDeclaration(
                            PublicAccessModifier(
                            ) [PublicAccessModifier]
                            AbstractMethodDeclaration(
                              AbstractMethodHeader(
                                ReturnType(
                                  Type(
                                   int
                                  ) [Type]
                                ) [ReturnType]
                               test
                              ) [AbstractMethodHeader]
                              NoFormalParameters(
                              ) [NoFormalParameters]
                            ) [AbstractMethodDeclaration]
                          ) [AbstractClassAbstractMethodDeclaration]
                        ) [SingleAbstractClassMethod]
                        ErrorAbstractClassMethodDeclaration(
                        ) [ErrorAbstractClassMethodDeclaration]
                      ) [MultipleAbstractClassMethods]
                      ErrorAbstractClassMethodDeclaration(
                      ) [ErrorAbstractClassMethodDeclaration]
                    ) [MultipleAbstractClassMethods]
                    ErrorAbstractClassMethodDeclaration(
                    ) [ErrorAbstractClassMethodDeclaration]
                  ) [MultipleAbstractClassMethods]
                  AbstractClassMethodDeclaration(
                    PublicAccessModifier(
                    ) [PublicAccessModifier]
                    MethodDeclaration(
                      MethodHeader(
                        ReturnType(
                          Type(
                           int
                          ) [Type]
                        ) [ReturnType]
                       get_a
                      ) [MethodHeader]
                      NoFormalParameters(
                      ) [NoFormalParameters]
                      NoLocalVarDeclarations(
                      ) [NoLocalVarDeclarations]
                      MethodStatementListStart(
                      ) [MethodStatementListStart]
                      MultipleStatements(
                        NoStatements(
                        ) [NoStatements]
                        ReturnStatement(
                          ReturnValue(
                            LeftExpression(
                              SingleTermExpression(
                                NoSign(
                                ) [NoSign]
                                SingleFactorTerm(
                                  DesignatorFactor(
                                    IdentifierDesignator(
                                     a
                                    ) [IdentifierDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactorTerm]
                              ) [SingleTermExpression]
                            ) [LeftExpression]
                          ) [ReturnValue]
                        ) [ReturnStatement]
                      ) [MultipleStatements]
                    ) [MethodDeclaration]
                  ) [AbstractClassMethodDeclaration]
                ) [MultipleAbstractClassMethods]
              ) [AbstractClassMethods]
            ) [AbstractClassDeclaration]
          ) [AbstractClassProgramDeclaration]
        ) [MultipleProgramDeclarations]
        ClassProgramDeclaration(
          ClassDeclaration(
            ClassHeader(
             B
              ClassBaseType(
                Type(
                 A
                ) [Type]
              ) [ClassBaseType]
            ) [ClassHeader]
            NoClassVarDeclarations(
            ) [NoClassVarDeclarations]
            NoClassMethodDeclarations(
            ) [NoClassMethodDeclarations]
          ) [ClassDeclaration]
        ) [ClassProgramDeclaration]
      ) [MultipleProgramDeclarations]
      ClassProgramDeclaration(
        ClassDeclaration(
          ClassHeader(
           C
            ErrorClassBaseTypeBeforeExtends(
            ) [ErrorClassBaseTypeBeforeExtends]
          ) [ClassHeader]
          NoClassVarDeclarations(
          ) [NoClassVarDeclarations]
          NoClassMethodDeclarations(
          ) [NoClassMethodDeclarations]
        ) [ClassDeclaration]
      ) [ClassProgramDeclaration]
    ) [MultipleProgramDeclarations]
    ClassProgramDeclaration(
      ClassDeclaration(
        ClassHeader(
         D
          ErrorClassBaseTypeAfterExtends(
          ) [ErrorClassBaseTypeAfterExtends]
        ) [ClassHeader]
        NoClassVarDeclarations(
        ) [NoClassVarDeclarations]
        NoClassMethodDeclarations(
        ) [NoClassMethodDeclarations]
      ) [ClassDeclaration]
    ) [ClassProgramDeclaration]
  ) [MultipleProgramDeclarations]
  MultipleMethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDeclaration(
      MethodHeader(
        ReturnVoid(
        ) [ReturnVoid]
       main
      ) [MethodHeader]
      NoFormalParameters(
      ) [NoFormalParameters]
      MultipleLocalVarDeclarations(
        NoLocalVarDeclarations(
        ) [NoLocalVarDeclarations]
        LocalVarDeclaration(
          Type(
           A
          ) [Type]
          MultipleLocalVariables(
            MultipleLocalVariables(
              SingleLocalVariable(
                LocalVariable(
                 a
                  NoArrayBrackets(
                  ) [NoArrayBrackets]
                ) [LocalVariable]
              ) [SingleLocalVariable]
              LocalVariable(
               b
                NoArrayBrackets(
                ) [NoArrayBrackets]
              ) [LocalVariable]
            ) [MultipleLocalVariables]
            LocalVariable(
             c
              NoArrayBrackets(
              ) [NoArrayBrackets]
            ) [LocalVariable]
          ) [MultipleLocalVariables]
        ) [LocalVarDeclaration]
      ) [MultipleLocalVarDeclarations]
      MethodStatementListStart(
      ) [MethodStatementListStart]
      MultipleStatements(
        MultipleStatements(
          MultipleStatements(
            NoStatements(
            ) [NoStatements]
            DesignatorBasedStatement(
              AssignmentDesignatorStatement(
                AssignmentHeader(
                  IdentifierDesignator(
                   a
                  ) [IdentifierDesignator]
                ) [AssignmentHeader]
                AssignmentFooter(
                  AssignOperator(
                  ) [AssignOperator]
                  LeftExpression(
                    SingleTermExpression(
                      NoSign(
                      ) [NoSign]
                      SingleFactorTerm(
                        AllocatorFactor(
                          Type(
                           B
                          ) [Type]
                          NoArrayIndexer(
                          ) [NoArrayIndexer]
                        ) [AllocatorFactor]
                      ) [SingleFactorTerm]
                    ) [SingleTermExpression]
                  ) [LeftExpression]
                ) [AssignmentFooter]
              ) [AssignmentDesignatorStatement]
            ) [DesignatorBasedStatement]
          ) [MultipleStatements]
          DesignatorBasedStatement(
            AssignmentDesignatorStatement(
              AssignmentHeader(
                IdentifierDesignator(
                 b
                ) [IdentifierDesignator]
              ) [AssignmentHeader]
              AssignmentFooter(
                AssignOperator(
                ) [AssignOperator]
                LeftExpression(
                  SingleTermExpression(
                    NoSign(
                    ) [NoSign]
                    SingleFactorTerm(
                      AllocatorFactor(
                        Type(
                         C
                        ) [Type]
                        NoArrayIndexer(
                        ) [NoArrayIndexer]
                      ) [AllocatorFactor]
                    ) [SingleFactorTerm]
                  ) [SingleTermExpression]
                ) [LeftExpression]
              ) [AssignmentFooter]
            ) [AssignmentDesignatorStatement]
          ) [DesignatorBasedStatement]
        ) [MultipleStatements]
        DesignatorBasedStatement(
          AssignmentDesignatorStatement(
            AssignmentHeader(
              IdentifierDesignator(
               c
              ) [IdentifierDesignator]
            ) [AssignmentHeader]
            AssignmentFooter(
              AssignOperator(
              ) [AssignOperator]
              LeftExpression(
                SingleTermExpression(
                  NoSign(
                  ) [NoSign]
                  SingleFactorTerm(
                    AllocatorFactor(
                      Type(
                       D
                      ) [Type]
                      NoArrayIndexer(
                      ) [NoArrayIndexer]
                    ) [AllocatorFactor]
                  ) [SingleFactorTerm]
                ) [SingleTermExpression]
              ) [LeftExpression]
            ) [AssignmentFooter]
          ) [AssignmentDesignatorStatement]
        ) [DesignatorBasedStatement]
      ) [MultipleStatements]
    ) [MethodDeclaration]
  ) [MultipleMethodDeclarations]
) [Program]
